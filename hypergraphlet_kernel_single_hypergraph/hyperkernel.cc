#include "hyperkernel.h"
#include "string.h"
#include <algorithm>
#include <cmath>
#include <iostream>
#include <queue>
#include <iomanip>


/*********************** HyperKernels methods ***********************/
void HyperKernels::read_hypergraph(string nl_path, string el_path, string hg_path, const vector<unsigned> &vertices_of_interest)  {
    if (VERBOSE)  cerr << "Reading input vertex- and edge-labeled hypergraph ... " << endl;

    hypergraph = SimpleHypergraph::read_hypergraph( (nl_path + ".nlabels").c_str(), (el_path + ".elabels").c_str(), (hg_path + ".hypergraph").c_str());
//    hypergraph = SimpleHypergraph::read_hypergraph( (nl_path + ".sklabels").c_str(), (el_path + ".elabels").c_str(), (hg_path + ".hypergraph").c_str());

    // JLM: FOR DEBUGGING PURPOSES. This outputs the standard graph representation of a hypergraph using clique expansion or star expansion
    /*
    hypergraph.transform_clique_expansion((nl_path + "_clique.labels").c_str(), (hg_path + "_clique.multigraph").c_str());
    hypergraph.transform_star_expansion((nl_path + "_star.labels").c_str(), (hg_path + "_star.multigraph").c_str());
    */

    // Remove any pre-existing vertices of interest
    if (roots.size() > 0)
        roots.clear();

    if (VERBOSE)  cerr << "Reading vertices of interest ... ";

    for (unsigned i=0; i<vertices_of_interest.size(); i++)  {
        if (VERBOSE && (i+1) % 1000 == 0)  cerr << " " << i+1;

        roots.push_back(vertices_of_interest[i]);
    }

    if (VERBOSE)  cerr << endl;
}

void HyperKernels::read_dual_hypergraph(string nl_path, string el_path, string hg_path, const vector<unsigned> &vertices_of_interest)  {
    if (VERBOSE)  cerr << "Creating dual vertex- and edge-labeled hypergraph from input hypergraph ... " << endl;
    
    hypergraph = SimpleHypergraph::read_dual_hypergraph( (nl_path + ".nlabels").c_str(), (el_path + ".elabels").c_str(), (hg_path + ".hypergraph").c_str());
//    hypergraph = SimpleHypergraph::read_dual_hypergraph( (nl_path + ".sklabels").c_str(), (el_path + ".elabels").c_str(), (hg_path + ".hypergraph").c_str());
    
    // JLM: FOR DEBUGGING PURPOSES. This outputs the standard graph representation of a dual hypergraph using clique expansion or star expansion
    /*
    hypergraph.print_hypergraph((nl_path + "_dual.nlabels").c_str(), (el_path + "_dual.elabels").c_str(), (hg_path + "_dual.hypergraph").c_str());
    hypergraph.transform_clique_expansion((nl_path + "_clique.labels").c_str(), (hg_path + "_clique.multigraph").c_str());
    hypergraph.transform_star_expansion((nl_path + "_star.labels").c_str(), (hg_path + "_star.multigraph").c_str());
    */
     
    // Remove any pre-existing vertices of interest
    if (roots.size() > 0)
        roots.clear();

    if (VERBOSE)  cerr << "Reading vertices of interest ... ";

    for (unsigned i=0; i<vertices_of_interest.size(); i++)  {
        if (VERBOSE && (i+1) % 1000 == 0)  cerr << " " << i+1;

        roots.push_back(vertices_of_interest[i]);
    }

    if (VERBOSE)  cerr << endl;
}

void HyperKernels::read_sim_vlm_matrix(string sim_prob_matrix_file)  {
    if (VERBOSE)  cerr << "Reading probability similarity matrix file for vertex labels ... ";
	string column, row, key;

    // Read vertex labels similarity matrix.
    ifstream p(sim_prob_matrix_file.c_str(), ios::in);
    if (p.fail())  {
        cerr << "ERROR: Vertex labels similarity matrix file " << sim_prob_matrix_file << " cannot be opened." << endl; exit(1);
    }
    else  {
        if (VERBOSE)  cerr << sim_prob_matrix_file.c_str();
        getline(p, column);
        while(getline(p, row))  {
            vector<string> tokens = split(row, '\t'); 
            for(unsigned i=0 ; i<column.size() ; i++)  {
                key = tokens[0] + column[i];
                map<string, float>::iterator it = sim_vlm_matrix.find(key);
                if(it == sim_vlm_matrix.end())  {
                    sim_vlm_matrix[key] = to_f(tokens[i+1]);
                }
            }
        }
    }
    p.close();

    if (VERBOSE)  cerr << endl;
}

void HyperKernels::read_sim_elm_matrix(string sim_prob_matrix_file)  {
    if (VERBOSE)  cerr << "Reading probability similarity matrix file for edge labels ... ";
    string column, row, key;
	
    // Read edge labels similarity matrix.
    ifstream p(sim_prob_matrix_file.c_str(), ios::in);
    if (p.fail())  {
        cerr << "ERROR: Edge labels similarity matrix file " << sim_prob_matrix_file << " cannot be opened." << endl; exit(1);
    }
    else  {
        if (VERBOSE)  cerr << sim_prob_matrix_file.c_str();
        getline(p, column);
        while(getline(p, row))  {
            vector<string> tokens = split(row, '\t'); 
            for(unsigned i=0 ; i<column.size() ; i++)  {
                key = tokens[0] + column[i];
                map<string, float>::iterator it = sim_elm_matrix.find(key);
                if(it == sim_elm_matrix.end())  {
                    sim_elm_matrix[key] = to_f(tokens[i+1]);
                }
            }
        }
    }
    p.close();

    if (VERBOSE)  cerr << endl;
}

void HyperKernels::compute_random_walk_cumulative_matrix(int steps, double restart)  {
    if (VERBOSE)  cerr << "Computing Cumulative Random Walk Hypergraph Kernel for #steps = " << steps << " restart prob = " << restart << "... ";
    
    hyperkernel.resize(roots.size());
    for (unsigned i=0; i<roots.size(); i++)
        hyperkernel[i].resize(i+1);
        
    for (unsigned i=0; i<roots.size(); i++)  {
        if (VERBOSE && (i+1) % 1000 == 0)  cerr << " " << i+1;
        
        hyperkernel[i][i] = random_walk_cumulative(hypergraph, roots[i], roots[i], steps, restart);
        for (unsigned j=0; j<i; j++)  {
            hyperkernel[i][j] = random_walk_cumulative(hypergraph, roots[i], roots[j], steps, restart);
        }
    }
    if (VERBOSE)  cerr << endl;
}

void HyperKernels::compute_random_walk_matrix(int steps, double restart)  {
    if (VERBOSE)  cerr << "Computing Random Walk Hypergraph Kernel for #steps = " << steps << " restart prob = " << restart << "... ";

    hyperkernel.resize(roots.size());
    for (unsigned i=0; i<roots.size(); i++)
        hyperkernel[i].resize(i+1);

    for (unsigned i=0; i<roots.size(); i++)  {
        if (VERBOSE && (i+1) % 1000 == 0)  cerr << " " << i+1;

        hyperkernel[i][i] = random_walk(hypergraph, roots[i], roots[i], steps, restart);
        for (unsigned j=0; j<i; j++)  {			
            hyperkernel[i][j] = random_walk(hypergraph, roots[i], roots[j], steps, restart);
        }
    }
    if (VERBOSE)  cerr << endl;
}

void HyperKernels::compute_label_mismatch_matrix()  {
    if (VERBOSE)  {
        if (set_k((HYPERGRAPHLETS_TYPES-1), SF) > 0)
            cerr << "Computing Label Substitutions Hypergraphlet Kernel ... ";
        else
            cerr << "Computing Standard Hypergraphlet Kernel ... ";
    }

    hyperkernel.resize(roots.size());
    for (unsigned i=0; i<roots.size(); i++)
        hyperkernel[i].resize(i+1);
    
	for (unsigned i=0; i<roots.size(); i++)  {
		for (unsigned j=0; j<=i; j++)
			hyperkernel[i][j] = 0.0;
	}

    for (unsigned i=0; i<roots.size(); i++)  {
    	if (ENABLE_INDUCED_HYPERGRAPHLETS)
        	hashes.push_back(get_induced_hypergraphlets_counts(hypergraph, roots[i]));
        else
        	hashes.push_back(get_hypergraphlets_counts(hypergraph, roots[i]));
    }

	unsigned long hg_type(0);
	while (hg_type < HYPERGRAPHLETS_TYPES)  {
        if((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4))  {
            int VLM = set_k(hg_type, SF);
            map<Key,MismatchInfo> mismatch_hash;

		    for (unsigned i=0; i<roots.size(); i++)  {
			    if (VERBOSE && (i+1) % 1000 == 0)  cerr << " " << i+1;

                add_vertex_label_mismatch_counts(hashes[i][hg_type], mismatch_hash, hg_type, VLM, false);

				add_edge_label_mismatch_counts(hashes[i][hg_type], mismatch_hash, hg_type, ELM);

                update_label_mismatch_counts(hashes[i][hg_type], mismatch_hash, hg_type, false, VLM, ELM, false);

				hyperkernel[i][i] = hyperkernel[i][i] + distance_hash_join(hashes[i][hg_type], hashes[i][hg_type], hg_type);
			    for (unsigned j=0; j<i; j++)  {
				    hyperkernel[i][j] = hyperkernel[i][j] + distance_hash_join(hashes[i][hg_type], hashes[j][hg_type], hg_type);
			    }
		    }
			vl_mismatch_neighborhood.clear();
			el_mismatch_neighborhood.clear();

			for (unsigned i=0; i<roots.size(); i++)  {
				hashes[i][hg_type].clear();
            }
            if (VERBOSE)  {
			    cerr << "\n\t Saving current KM up to " << hg_type << " in file 'LM.dat'.";
                string filename = "LM.dat";
                write_matrix(filename.c_str());
            }
        }
        hg_type = hg_type + 1; 
	}

    if (VERBOSE)  cerr << endl;
}

void HyperKernels::compute_edge_mismatch_matrix()  {
    if (VERBOSE)   cerr << "Computing Edge Indels Hypergraphlet Kernel ... ";
    
    hyperkernel.resize(roots.size());
    for (unsigned i=0; i<roots.size(); i++)
        hyperkernel[i].resize(i+1);

    for (unsigned i=0; i<roots.size(); i++)  {   
        if (ENABLE_INDUCED_HYPERGRAPHLETS)
        	hashes.push_back(get_induced_hypergraphlets_counts(hypergraph, roots[i]));
        else     
        	hashes.push_back(get_hypergraphlets_counts(hypergraph, roots[i]));
        add_edge_mismatch_counts(hashes[i]);
    }

    for (unsigned i=0; i<roots.size(); i++)  {
        if (VERBOSE && (i+1) % 1000 == 0)  cerr << " " << i+1;
               
        hyperkernel[i][i] = distance_hash_join(hashes[i], hashes[i]);
        for (unsigned j=0; j<i; j++)  {
            hyperkernel[i][j] = distance_hash_join(hashes[i], hashes[j]);
        }
    }

    if (VERBOSE)  cerr << endl;
}

void HyperKernels::compute_edit_distance_matrix()  {
    if (VERBOSE)  cerr << "Computing Edit Distance Hypergraphlet Kernel (d=1) ... ";

    hyperkernel.resize(roots.size());
    for (unsigned i=0; i<roots.size(); i++)
        hyperkernel[i].resize(i+1);
    
	for (unsigned i=0; i<roots.size(); i++)  {
		for (unsigned j=0; j<=i; j++)
			hyperkernel[i][j] = 0.0;
	}

    for (unsigned i=0; i<roots.size(); i++)  {
    	if (ENABLE_INDUCED_HYPERGRAPHLETS)
        	hashes.push_back(get_induced_hypergraphlets_counts(hypergraph, roots[i]));
        else
        	hashes.push_back(get_hypergraphlets_counts(hypergraph, roots[i]));
        add_edge_mismatch_counts(hashes[i]);
    }

    unsigned long hg_type(0);
	while (hg_type < HYPERGRAPHLETS_TYPES)  {
        if((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4))  {
            int VLM = set_k(hg_type, SF);
            map<Key,MismatchInfo> mismatch_hash;

		    for (unsigned i=0; i<roots.size(); i++)  {
			    if (VERBOSE && (i+1) % 1000 == 0)  cerr << " " << i+1;
                
                if (VLM >= 1)  {
                    add_vertex_label_mismatch_counts(hashes[i][hg_type], mismatch_hash, hg_type, 1, false);
                }

                if (ELM >= 1)  {
                    add_edge_label_mismatch_counts(hashes[i][hg_type], mismatch_hash, hg_type, 1);
                }

                update_label_mismatch_counts(hashes[i][hg_type], mismatch_hash, hg_type, false, 1, 1, true);

			    hyperkernel[i][i] = hyperkernel[i][i] + distance_hash_join(hashes[i][hg_type], hashes[i][hg_type], hg_type);
			    for (unsigned j=0; j<i; j++)  {
				    hyperkernel[i][j] = hyperkernel[i][j] + distance_hash_join(hashes[i][hg_type], hashes[j][hg_type], hg_type);
			    }
		    }
			vl_mismatch_neighborhood.clear();
			el_mismatch_neighborhood.clear();

            for (unsigned i=0; i<roots.size(); i++)  {
                hashes[i][hg_type].clear();
            }
            if (VERBOSE)  {
                cerr << "\n\t Saving current KM up to " << hg_type << " in file 'ED1.dat'.";
                string filename = "ED1.dat";
                write_matrix(filename.c_str());
            }
        }
        hg_type = hg_type + 1; 
	}

    if (VERBOSE)  cerr << endl;
}

void HyperKernels::compute_edit_distance2_matrix()  {
    if (VERBOSE)  cerr << "Computing Edit Distance Hypergraphlet Kernel (d=2) ... ";

    hyperkernel.resize(roots.size());
    for (unsigned i=0; i<roots.size(); i++)
        hyperkernel[i].resize(i+1);
    
	for (unsigned i=0; i<roots.size(); i++)  {
		for (unsigned j=0; j<=i; j++)
			hyperkernel[i][j] = 0.0;
	}

    for (unsigned i=0; i<roots.size(); i++)  {
    	if (ENABLE_INDUCED_HYPERGRAPHLETS)
        	hashes.push_back(get_induced_hypergraphlets_counts(hypergraph, roots[i]));
        else
        	hashes.push_back(get_hypergraphlets_counts(hypergraph, roots[i]));
        add_1_edge_mismatch_counts(hashes[i]);
    }

    unsigned long hg_type(0);
	while (hg_type < HYPERGRAPHLETS_TYPES)  {
        if((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4))  {
            int VLM = set_k(hg_type, SF);
            map<Key,MismatchInfo> mismatch_hash;

		    for (unsigned i=0; i<roots.size(); i++)  {
                if (VLM >= 1)  {
					add_vertex_label_mismatch_counts(hashes[i][hg_type], mismatch_hash, hg_type, 1, true);
                }

                if (ELM >= 1)  {
                    add_edge_label_mismatch_counts(hashes[i][hg_type], mismatch_hash, hg_type, 1);
                }

                update_label_mismatch_counts(hashes[i][hg_type], mismatch_hash, hg_type, true, 1, 1, true);
            }
        }
		vl_mismatch_neighborhood.clear();
		el_mismatch_neighborhood.clear();
        hg_type = hg_type + 1;
    }
    for (unsigned i=0; i<roots.size(); i++)  {
        add_2_edge_mismatch_counts(hashes[i]);
    }

	hg_type = 0;
	while (hg_type < HYPERGRAPHLETS_TYPES)  {
        if((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4))  {
            int VLM = set_k(hg_type, SF);
            map<Key,MismatchInfo> mismatch_hash;

            for (unsigned i=0; i<roots.size(); i++)  {
                if (VERBOSE && (i+1) % 1000 == 0)  cerr << " " << i+1;

                if (VLM >= 2)  {
                    add_vertex_label_mismatch_counts(hashes[i][hg_type], mismatch_hash, hg_type, 2, false);
                }

                if (ELM >= 2)  {
                    add_edge_label_mismatch_counts(hashes[i][hg_type], mismatch_hash, hg_type, 2);
                }

                update_label_mismatch_counts(hashes[i][hg_type], mismatch_hash, hg_type, false, 2, 2, true);

                hyperkernel[i][i] = hyperkernel[i][i] + distance_hash_join(hashes[i][hg_type], hashes[i][hg_type], hg_type);
			    for (unsigned j=0; j<i; j++)  {
				    hyperkernel[i][j] = hyperkernel[i][j] + distance_hash_join(hashes[i][hg_type], hashes[j][hg_type], hg_type);
			    }
		    }
			vl_mismatch_neighborhood.clear();
			el_mismatch_neighborhood.clear();
            for (unsigned i=0; i<roots.size(); i++)  {
                hashes[i][hg_type].clear();
            }
            if (VERBOSE)  {
                cerr << "\n\t Saving current KM up to " << hg_type << " in file 'ED2.dat'.";
                string filename = "ED2.dat";
                write_matrix(filename.c_str());
            }
        }
        hg_type = hg_type + 1; 
	}

    if (VERBOSE)  cerr << endl;
}

#if OUTPUT_FORMAT == 0
void HyperKernels::write_matrix(const char *file)  {
	ofstream out(file, ios::out | ios::binary);

    unsigned hg_size = roots.size();
	out.write((char*) &hg_size, sizeof(unsigned)); 

    for (unsigned i=0; i<hg_size; i++)  {
		for (unsigned j=0; j<=i; j++)  {
			out.write((char*) &hyperkernel[i][j], sizeof(float));
        }
    }
    out.close();
}
#elif OUTPUT_FORMAT == 1
void HyperKernels::write_matrix(const char *file)  {
    ofstream out(file, ios::out );

    unsigned hg_size = roots.size();

    for (unsigned i=0; i<hg_size; i++)  {
		for (unsigned j=0; j<=i; j++)   {
			out  << hyperkernel[i][j] << "\t";
		}
		out  <<  endl;
	}
	out.close();
}
#else
void HyperKernels::write_matrix(const char *file)  {
	ofstream out(file, ios::out );
	
	unsigned hg_size = roots.size();
	
	for (unsigned i=0; i<hg_size; i++)  {
		for (unsigned j=0; j<hg_size; j++)   { 
			if (j>i)  {
				out << setprecision (10) << hyperkernel[j][i]  <<  "\t"  ;
			} else  {
				out << setprecision (10) << hyperkernel[i][j]  <<  "\t"  ;
			}
		}
		out  <<  endl;
	}
	out.close();
}
#endif

void HyperKernels::write_sparse_svml_lm(const char *file)  {
    if (VERBOSE)   { 
        if (set_k((HYPERGRAPHLETS_TYPES-1), SF) > 0)
            cerr << "Computing attributes for Label Substitutions Hypergraphlet Kernel ... ";
        else
            cerr << "Computing attributes for Standard Hypergraphlet Kernel ... ";
    }

    ofstream out(file, ios::out);
    for (unsigned i=0; i<roots.size(); i++)  {
        if (VERBOSE && (i+1) % 1000 == 0)  cerr << " " << i+1;

        out << labels[i];

		vector<map<Key,MismatchInfo> > g_hash;
    	if (ENABLE_INDUCED_HYPERGRAPHLETS)
        	g_hash = get_induced_hypergraphlets_counts(hypergraph, roots[i]);
        else
        	g_hash = get_hypergraphlets_counts(hypergraph, roots[i]);
        for (unsigned hg_type=0; hg_type<HYPERGRAPHLETS_TYPES; hg_type++)  {
            if((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4))  {
                int VLM= set_k(hg_type, SF);
                map<Key,MismatchInfo> mismatch_hash;

                add_vertex_label_mismatch_counts(g_hash[hg_type], mismatch_hash, hg_type, VLM, false);

				add_edge_label_mismatch_counts(g_hash[hg_type], mismatch_hash, hg_type, ELM);

                update_label_mismatch_counts(g_hash[hg_type], mismatch_hash, hg_type, false, VLM, ELM, false);
                
				for (map<Key,MismatchInfo>::iterator it = g_hash[hg_type].begin(); it != g_hash[hg_type].end(); it++)
//					out << " " << hg_type << ":" << retrieve_label_mismatch_count(hg_type, g_hash[hg_type], it->first); //JLM: FOR DEBUGGING PURPOSES
//					out << " " << print_nkey(it->first.first) << ";" << print_ekey(it->first.second) << "," << hg_type << ":" << retrieve_label_mismatch_count(hg_type, g_hash[hg_type], it->first); //JLM: FOR DEBUGGING PURPOSES
                    out << " " << get_feature_id_nodes(it->first.first, hg_type) << ":" << get_feature_id_hyperedges(it->first.second, hg_type) << ":" << retrieve_label_mismatch_count(hg_type, g_hash[hg_type], it->first);
			}
			vl_mismatch_neighborhood.clear();
			el_mismatch_neighborhood.clear();
        }
        out << " #" << i << endl;
    }
    out.close();

    if (VERBOSE)  cerr << endl;
}

void HyperKernels::write_sparse_svml_em(const char *file)  {
    if (VERBOSE)  cerr << "Computing attributes for Edge Indels Hypergraphlet Kernel ... ";
    
    ofstream out(file, ios::out);
    for (unsigned i=0; i<roots.size(); i++)  {
        if (VERBOSE && (i+1) % 1000 == 0)  cerr << " " << i+1;

        out << labels[i];

		vector<map<Key,MismatchInfo> > g_hash;
    	if (ENABLE_INDUCED_HYPERGRAPHLETS)
        	g_hash = get_induced_hypergraphlets_counts(hypergraph, roots[i]);
        else
        	g_hash = get_hypergraphlets_counts(hypergraph, roots[i]);
		add_edge_mismatch_counts(g_hash);
		for (unsigned hg_type=0; hg_type<HYPERGRAPHLETS_TYPES; hg_type++)  {
            if((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4))  {
                for (map<Key,MismatchInfo>::iterator it = g_hash[hg_type].begin(); it != g_hash[hg_type].end(); it++)
//					out << " " << print_nkey(it->first.first) << ";" << print_ekey(it->first.second) << "," << hg_type << ":" << retrieve_edge_mismatch_count(g_hash[hg_type], it->first); //JLM: FOR DEBUGGING PURPOSES
                    out << " " << get_feature_id_nodes(it->first.first, hg_type) << ":" << get_feature_id_hyperedges(it->first.second, hg_type) << ":" << retrieve_edge_mismatch_count(g_hash[hg_type], it->first);
            }
        }
        out << " #" << i << endl;
    }
    out.close();
    
    if (VERBOSE)  cerr << endl;
}

void HyperKernels::write_sparse_svml_ed(const char *file)  {
    if (VERBOSE)  cerr << "Computing attributes for Edit Distance Hypergraphlet Kernel (d=1) ... ";

    ofstream out(file, ios::out);
    for (unsigned i=0; i<roots.size(); i++)  {
        if (VERBOSE && (i+1) % 1000 == 0)  cerr << " " << i+1;

        out << labels[i];

        vector<map<Key,MismatchInfo> > g_hash;
    	if (ENABLE_INDUCED_HYPERGRAPHLETS)
        	g_hash = get_induced_hypergraphlets_counts(hypergraph, roots[i]);
        else
        	g_hash = get_hypergraphlets_counts(hypergraph, roots[i]);
        add_edge_mismatch_counts(g_hash);
		for (unsigned hg_type=0; hg_type<HYPERGRAPHLETS_TYPES; hg_type++)  {
            if((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4))  {
                int VLM = set_k(hg_type, SF);
                map<Key,MismatchInfo> mismatch_hash;

                if(VLM >= 1)                    
                    add_vertex_label_mismatch_counts(g_hash[hg_type], mismatch_hash, hg_type, 1, false);
                    
                if (ELM >= 1)
                    add_edge_label_mismatch_counts(g_hash[hg_type], mismatch_hash, hg_type, 1);

                update_label_mismatch_counts(g_hash[hg_type], mismatch_hash, hg_type, false, 1, 1, true);

                for (map<Key,MismatchInfo>::iterator it = g_hash[hg_type].begin(); it != g_hash[hg_type].end(); it++)  {                    
                    if (retrieve_label_mismatch_count(hg_type, g_hash[hg_type], it->first) > 0.0)
//                        out << " " << print_nkey(it->first.first) << ";" << print_ekey(it->first.second) << "," << hg_type  << ":" << retrieve_label_mismatch_count(hg_type, g_hash[hg_type], it->first); //JLM: FOR DEBUGGING PURPOSES
                        out << " " << get_feature_id_nodes(it->first.first, hg_type) << ":" << get_feature_id_hyperedges(it->first.second, hg_type) << ":" << retrieve_label_mismatch_count(hg_type, g_hash[hg_type], it->first);
                }
            }
			vl_mismatch_neighborhood.clear();
			el_mismatch_neighborhood.clear();
        }
        out << " #" << i << endl;
    }
    out.close();

    if (VERBOSE)  cerr << endl;
}

void HyperKernels::write_sparse_svml_ed2(const char *file)  {
    if (VERBOSE)  cerr << "Computing attributes for Edit Distance Hypergraphlet Kernel (d=2) ... ";

    ofstream out(file, ios::out);
    for (unsigned i=0; i<roots.size(); i++)  {
        if (VERBOSE && (i+1) % 1000 == 0)  cerr << " " << i+1;

        out << labels[i];

        vector<map<Key,MismatchInfo> > g_hash;
    	if (ENABLE_INDUCED_HYPERGRAPHLETS)
        	g_hash = get_induced_hypergraphlets_counts(hypergraph, roots[i]);
        else
        	g_hash = get_hypergraphlets_counts(hypergraph, roots[i]);
        add_1_edge_mismatch_counts(g_hash);        
		for (unsigned hg_type=0; hg_type<HYPERGRAPHLETS_TYPES; hg_type++)  {
            if((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4))  {
                int VLM = set_k(hg_type, SF);
                map<Key,MismatchInfo> mismatch_hash;

                if(VLM >= 1)                    
                    add_vertex_label_mismatch_counts(g_hash[hg_type], mismatch_hash, hg_type, 1, true);

                if (ELM >= 1)
                    add_edge_label_mismatch_counts(g_hash[hg_type], mismatch_hash, hg_type, 1);

                update_label_mismatch_counts(g_hash[hg_type], mismatch_hash, hg_type, true, 1, 1, true);
                vl_mismatch_neighborhood.clear();
				el_mismatch_neighborhood.clear();

                add_2_edge_mismatch_counts(g_hash);

                if (VLM >= 2)
                    add_vertex_label_mismatch_counts(g_hash[hg_type], mismatch_hash, hg_type, 2, false);

                if (ELM >= 2)
                    add_edge_label_mismatch_counts(g_hash[hg_type], mismatch_hash, hg_type, 2);

                update_label_mismatch_counts(g_hash[hg_type], mismatch_hash, hg_type, false, 2, 2, true);
                vl_mismatch_neighborhood.clear();
				el_mismatch_neighborhood.clear();

                for (map<Key,MismatchInfo>::iterator it = g_hash[hg_type].begin(); it != g_hash[hg_type].end(); it++)  {                    
                    if (retrieve_label_mismatch_count(hg_type, g_hash[hg_type], it->first) > 0.0)
//                        out << " " << print_nkey(it->first.first) << ";" << print_ekey(it->first.second) << "," << hg_type  << ":" << retrieve_label_mismatch_count(hg_type, g_hash[hg_type], it->first); //JLM: FOR DEBUGGING PURPOSES
                        out << " " << get_feature_id_nodes(it->first.first, hg_type) << ":" << get_feature_id_hyperedges(it->first.second, hg_type) << ":" << retrieve_label_mismatch_count(hg_type, g_hash[hg_type], it->first);
                }
            }
        }
        out << " #" << i << endl;
    }
    out.close();

    if (VERBOSE)  cerr << endl;
}

void HyperKernels::write_labels(const char *file)  {
    unsigned num_pos(0), num_neg(0);

    ofstream out(file, ios::out);

    out << labels[0];
    labels[0]==1 ? num_pos++ : num_neg++;

    for (unsigned i=1; i<labels.size(); i++)  {
        out << "\n" << labels[i];
        labels[i]==1 ? num_pos++ : num_neg++;
    }
    out.close();

    if (VERBOSE)  {
        cerr << "Positive examples: " << num_pos << endl;
        cerr << "Negative examples: " << num_neg << endl;
    }
}

float HyperKernels::random_walk_cumulative(SimpleHypergraph &hg, unsigned hg1_root, unsigned hg2_root, int STEPS, double RESTART)  {
    unsigned e1, e2, i1, i2;
    unsigned hg1_curr_node, hg2_curr_node, hg1_next_node, hg2_next_node, hg1_next_edge, hg2_next_edge;
    float value = compare_labels(hg.node_labels[hg1_root], hg.node_labels[hg2_root]); 
    vector<unsigned> hg1_incident_edges, hg2_incident_edges;
    
    hg1_curr_node = hg1_root;
    hg2_curr_node = hg2_root;
    int step(1);
    while(step < STEPS)  {
        hg1_incident_edges = hg.get_incident_edges(hg1_curr_node);
        hg2_incident_edges = hg.get_incident_edges(hg2_curr_node);
        if (hg1_incident_edges.size() == 0 || hg2_incident_edges.size() == 0)  {
            return value;
        }
        e1 = randint(hg1_incident_edges.size());
        e2 = randint(hg2_incident_edges.size());
        hg1_next_edge = hg.edge_set[hg1_curr_node][e1];
        hg2_next_edge = hg.edge_set[hg2_curr_node][e2];
        if (hg.vertex_set[hg1_next_edge].size() == 0 || hg.vertex_set[hg2_next_edge].size() == 0)  {
            return value;
        }
        i1 = randint(hg.vertex_set[hg1_next_edge].size());
        i2 = randint(hg.vertex_set[hg2_next_edge].size());
        hg1_next_node = hg.vertex_set[hg1_next_edge][i1];
        hg2_next_node = hg.vertex_set[hg2_next_edge][i2]; 
        value = value + compare_labels(hg.node_labels[hg1_next_node], hg.node_labels[hg2_next_node]) + compare_labels(hg.edge_labels[hg1_next_edge], hg.edge_labels[hg2_next_edge]);
        double prob = randdouble();
        // Restart random walk
        if(prob < RESTART)  {
            hg1_curr_node = hg1_root;
            hg2_curr_node = hg2_root;
        }
        // Continue random walk
        else  {
            hg1_curr_node = hg1_next_node;
            hg2_curr_node = hg2_next_node;
        }
        step += 1;
    }

    return value;
}

float HyperKernels::random_walk(SimpleHypergraph &hg, unsigned hg1_root, unsigned hg2_root, int STEPS, double RESTART)  {
    unsigned e1, e2, i1, i2;
    unsigned hg1_curr_node, hg2_curr_node, hg1_next_node, hg2_next_node, hg1_next_edge, hg2_next_edge;
    float value(0.0);    
    vector<unsigned> hg1_incident_edges, hg2_incident_edges;
    string hg1_walk_seq, hg2_walk_seq;
   
    if (hg.node_labels[hg1_root] != hg.node_labels[hg2_root])  {
        return value;
    }

    hg1_walk_seq.push_back(hg.node_labels[hg1_root]);
    hg2_walk_seq.push_back(hg.node_labels[hg2_root]);
    hg1_curr_node = hg1_root;
    hg2_curr_node = hg2_root;
    int step(1);
    while(step < STEPS)  {
        hg1_incident_edges = hg.get_incident_edges(hg1_curr_node);
        hg2_incident_edges = hg.get_incident_edges(hg2_curr_node);
        if (hg1_incident_edges.size() == 0 || hg2_incident_edges.size() == 0)  {
            return value;
        }
        e1 = randint(hg1_incident_edges.size());
        e2 = randint(hg2_incident_edges.size());
        hg1_next_edge = hg.edge_set[hg1_curr_node][e1];
        hg2_next_edge = hg.edge_set[hg2_curr_node][e2];
        if (hg.vertex_set[hg1_next_edge].size() == 0 || hg.vertex_set[hg2_next_edge].size() == 0)  {
            return value;
        }
        i1 = randint(hg.vertex_set[hg1_next_edge].size());
        i2 = randint(hg.vertex_set[hg2_next_edge].size());
        hg1_next_node = hg.vertex_set[hg1_next_edge][i1];
        hg2_next_node = hg.vertex_set[hg2_next_edge][i2];
		hg1_walk_seq.push_back(hg.edge_labels[hg1_next_edge]);
        hg2_walk_seq.push_back(hg.edge_labels[hg2_next_edge]);
        hg1_walk_seq.push_back(hg.node_labels[hg1_next_node]);
        hg2_walk_seq.push_back(hg.node_labels[hg2_next_node]);
        double prob = randdouble();
        // Restart random walk
        if(prob < RESTART)  {                        
            if (hg1_walk_seq.compare(hg2_walk_seq) == 0)  {
                value = value + 1.0;
            }
            hg1_walk_seq.clear();
            hg2_walk_seq.clear();

            hg1_walk_seq.push_back(hg.node_labels[hg1_root]);
            hg2_walk_seq.push_back(hg.node_labels[hg2_root]);
            hg1_curr_node = hg1_root;
            hg2_curr_node = hg2_root;
        }
        // Continue random walk
        else  {
            hg1_curr_node = hg1_next_node;
            hg2_curr_node = hg2_next_node;
        }
        step += 1;
    }

    return value;
}

void HyperKernels::insert_induced_hypergraphlets(vector<map<Key,MismatchInfo> > &hash, char root, char a, vector<char> e1, bool found_ri)  {
	vector<vector<Key> > mismatches;
	vector<Key> keys;
    vector<char> ZERO_VECTOR;
    
    if (HYPERGRAPHLETS_2)  {
    	if (found_ri)  {
    		//E1={R,A}
    		keys = generate_labels(mismatches, root, a, ZERO_CHAR, ZERO_CHAR, 1, e1, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
        	increment_match_hash(hash[1], keys, mismatches);
    	}
    }
}

void HyperKernels::insert_induced_hypergraphlets(vector<map<Key,MismatchInfo> > &hash, char root, char a, char b, vector<char> e1, vector<char> e2, vector<char> e3, vector<char> e4, bool found_rij, bool found_ri, bool found_rj, bool found_ij)  {
	vector<vector<Key> > mismatches;
	vector<Key> keys;
    vector<char> ZERO_VECTOR;

	if (HYPERGRAPHLETS_3)  {
		if (found_rij)  {
			if (found_ri)  {
				if (found_rj)  {
					if (found_ij)  {
						//E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B}
						keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 10, e1, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
						increment_match_hash(hash[10], keys, mismatches);
					}
					else  {
						//E1={R,A,B}, E2={R,A}, E3={R,B}
						keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 9, e1, e2, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
						increment_match_hash(hash[9], keys, mismatches);
					}
				}
				else  {
					if (found_ij)  {
						//E1={R,A,B}, E2={R,A}, E4={A,B}
						keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 8, e1, e2, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
						increment_match_hash(hash[8], keys, mismatches);
					}
					else  {
						//E1={R,A,B}, E2={R,A}
						keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 5, e1, e2, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
						increment_match_hash(hash[5], keys, mismatches);
					}
				}
			}
			else  {
				if (found_rj)  {
					if (found_ij)  {
						//E1={R,A,B}, E3={R,B}, E4={A,B}
						keys = generate_labels(mismatches, root, b, a, ZERO_CHAR, 8, e1, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
						increment_match_hash(hash[8], keys, mismatches);
					}
					else  {
						//E1={R,A,B}, E3={R,B}
						keys = generate_labels(mismatches, root, b, a, ZERO_CHAR, 5, e1, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
						increment_match_hash(hash[5], keys, mismatches);
					}
				}
				else  {
					if (found_ij)  {
						//E1={R,A,B}, E4={A,B}
						keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 6, e1, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
						increment_match_hash(hash[6], keys, mismatches);
					}
					else  {
						//E1={R,A,B}
						keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 2, e1, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
						increment_match_hash(hash[2], keys, mismatches);
					}
				}			
			}
		}
		else  {
			if (found_ri)  {
				if (found_rj)  {
					if (found_ij)  {
						//E2={R,A}, E3={R,B}, E4={A,B}
						keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 7, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
						increment_match_hash(hash[7], keys, mismatches);
					}
					else  {
						//E2={R,A}, E3={R,B}
						keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 4, e2, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
						increment_match_hash(hash[4], keys, mismatches);
					}
				}
				else  {
					if (found_ij)  {
						//E2={R,A}, E4={A,B}
						keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 3, e2, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
						increment_match_hash(hash[3], keys, mismatches);
					}
				}
			}
			else  {
				if (found_rj)  {
					if (found_ij)  {
						//E3={R,B}, E4={A,B}
						keys = generate_labels(mismatches, root, b, a, ZERO_CHAR, 3, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
						increment_match_hash(hash[3], keys, mismatches);
					}
				}
			}
		}
	}
}

void HyperKernels::insert_induced_hypergraphlets(vector<map<Key,MismatchInfo> > &hash, char root, char a, char b, char c, vector<char> e1, vector<char> e2, vector<char> e3, vector<char> e4, vector<char> e5, vector<char> e6, vector<char> e7, vector<char> e8, vector<char> e9, vector<char> e10, vector<char> e11, bool found_rijk, bool found_rij, bool found_rik, bool found_rjk, bool found_ijk, bool found_ri, bool found_rj, bool found_rk, bool found_ij, bool found_ik, bool found_jk)  {
	vector<vector<Key> > mismatches;
	vector<Key> keys;
    vector<char> ZERO_VECTOR;

	if (HYPERGRAPHLETS_4)  {
		if (found_rijk)  {
			if (found_rij)  {
				if (found_rik)  {
					if (found_rjk)  {
						if (found_ijk)  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 471, e1, e2, e3, e4, e6, e7, e8, e5, e9, e10, e11);
													increment_match_hash(hash[471], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 469, e1, e2, e3, e4, e6, e7, e8, e5, e9, e10, ZERO_VECTOR);
													increment_match_hash(hash[469], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 469, e1, e2, e4, e3, e7, e6, e8, e5, e9, e11, ZERO_VECTOR);
													increment_match_hash(hash[469], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B} 
													keys = generate_labels(mismatches, root, a, b, c, 458, e1, e2, e3, e4, e6, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[458], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 469, e1, e3, e4, e2, e8, e6, e7, e5, e10, e11, ZERO_VECTOR);
													increment_match_hash(hash[469], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C} 
													keys = generate_labels(mismatches, root, a, c, b, 458, e1, e3, e2, e4, e6, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[458], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 458, e1, e4, e2, e3, e7, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[458], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 424, e1, e2, e3, e4, e6, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[424], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 470, e1, e2, e3, e4, e6, e7, e5, e9, e10, e11, ZERO_VECTOR);
													increment_match_hash(hash[470], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 463, e1, e2, e3, e4, e6, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[463], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 463, e1, e2, e4, e3, e7, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[463], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 437, e1, e2, e3, e4, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[437], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 464, e1, e2, e3, e4, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[464], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C} 
													keys = generate_labels(mismatches, root, a, b, c, 442, e1, e2, e3, e4, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[442], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 442, e1, e2, e4, e3, e7, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[442], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, a, b, c, 386, e1, e2, e3, e4, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[386], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 470, e1, e3, e2, e4, e6, e8, e5, e10, e9, e11, ZERO_VECTOR);
													increment_match_hash(hash[470], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C} 
													keys = generate_labels(mismatches, root, a, c, b, 463, e1, e3, e2, e4, e6, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[463], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 464, e1, e3, e2, e4, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[464], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 442, e1, e3, e2, e4, e6, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[442], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 463, e1, e3, e4, e2, e8, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[463], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 437, e1, e3, e2, e4, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[437], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 442, e1, e3, e4, e2, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[442], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 386, e1, e3, e2, e4, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[386], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 465, e1, e2, e3, e4, e6, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[465], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 447, e1, e2, e3, e4, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[447], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 448, e1, e2, e3, e4, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[448], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 403, e1, e2, e3, e4, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[403], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 448, e1, e3, e2, e4, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[448], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 403, e1, e3, e2, e4, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[403], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 404, e1, e2, e3, e4, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[404], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A} 
													keys = generate_labels(mismatches, root, a, b, c, 323, e1, e2, e3, e4, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[323], keys, mismatches);
												}
											}
										}
									}
								}
							} 
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 470, e1, e4, e2, e3, e7, e8, e5, e11, e9, e10, ZERO_VECTOR);
													increment_match_hash(hash[470], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 464, e1, e4, e2, e3, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[464], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 463, e1, e4, e2, e3, e7, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[463], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B} 
													keys = generate_labels(mismatches, root, b, c, a, 442, e1, e4, e2, e3, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[442], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 463, e1, e4, e3, e2, e8, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[463], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 442, e1, e4, e3, e2, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[442], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 437, e1, e4, e2, e3, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[437], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 386, e1, e4, e2, e3, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[386], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 465, e1, e2, e4, e3, e7, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[465], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 448, e1, e2, e4, e3, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[448], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B} E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 447, e1, e2, e4, e3, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[447], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 403, e1, e2, e4, e3, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[403], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 448, e1, e4, e2, e3, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[448], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 404, e1, e2, e4, e3, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[404], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 403, e1, e4, e2, e3, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[403], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, b, a, c, 323, e1, e2, e4, e3, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[323], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 465, e1, e3, e4, e2, e8, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[465], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 448, e1, e3, e4, e2, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[448], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 448, e1, e4, e3, e2, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[448], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 404, e1, e3, e4, e2, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[404], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 447, e1, e3, e4, e2, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[447], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 403, e1, e3, e4, e2, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[403], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 403, e1, e4, e3, e2, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[403], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 323, e1, e3, e4, e2, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[323], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 449, e1, e2, e3, e4, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[449], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 408, e1, e2, e3, e4, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[408], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 408, e1, e2, e4, e3, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[408], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 332, e1, e2, e3, e4, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[332], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 408, e1, e4, e3, e2, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[408], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 332, e1, e3, e2, e4, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[332], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 332, e1, e4, e2, e3, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[332], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}
													keys = generate_labels(mismatches, root, a, b, c, 231, e1, e2, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[231], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
						else  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 467, e1, e2, e3, e4, e6, e7, e8, e9, e10, e11, ZERO_VECTOR);
													increment_match_hash(hash[467], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 455, e1, e2, e3, e4, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[455], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 455, e1, e2, e4, e3, e7, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[455], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 421, e1, e2, e3, e4, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[421], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 455, e1, e3, e4, e2, e8, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[455], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 421, e1, e3, e2, e4, e6, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[421], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 421, e1, e4, e2, e3, e7, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[421], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 351, e1, e2, e3, e4, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[351], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 460, e1, e2, e3, e4, e6, e7, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[460], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 433, e1, e2, e3, e4, e6, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[433], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 433, e1, e2, e4, e3, e7, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[433], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 371, e1, e2, e3, e4, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[371], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 439, e1, e2, e3, e4, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[439], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 382, e1, e2, e3, e4, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[382], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 382, e1, e2, e4, e3, e7, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[382], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, a, b, c, 287, e1, e2, e3, e4, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[287], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 460, e1, e3, e2, e4, e6, e8, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[460], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 433, e1, e3, e2, e4, e6, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[433], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 439, e1, e3, e2, e4, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[439], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 382, e1, e3, e2, e4, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[382], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 433, e1, e3, e4, e2, e8, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[433], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 371, e1, e3, e2, e4, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[371], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 382, e1, e3, e4, e2, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[382], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C} 
													keys = generate_labels(mismatches, root, a, c, b, 287, e1, e3, e2, e4, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[287], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 444, e1, e2, e3, e4, e6, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[444], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 395, e1, e2, e3, e4, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[395], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 399, e1, e2, e3, e4, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[399], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 315, e1, e2, e3, e4, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[315], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 399, e1, e3, e2, e4, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[399], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 315, e1, e3, e2, e4, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[315], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 320, e1, e2, e3, e4, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[320], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A} 
													keys = generate_labels(mismatches, root, a, b, c, 213, e1, e2, e3, e4, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[213], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 460, e1, e4, e2, e3, e7, e8, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[460], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 439, e1, e4, e2, e3, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[439], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 433, e1, e4, e2, e3, e7, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[433], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 382, e1, e4, e2, e3, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[382], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 433, e1, e4, e3, e2, e8, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[433], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 382, e1, e4, e3, e2, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[382], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 371, e1, e4, e2, e3, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[371], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C} 
													keys = generate_labels(mismatches, root, b, c, a, 287, e1, e4, e2, e3, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[287], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 444, e1, e2, e4, e3, e7, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[444], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 399, e1, e2, e4, e3, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[399], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 395, e1, e2, e4, e3, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[395], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 315, e1, e2, e4, e3, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[315], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 399, e1, e4, e2, e3, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[399], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 320, e1, e2, e4, e3, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[320], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 315, e1, e4, e2, e3, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[315], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, b, a, c, 213, e1, e2, e4, e3, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[213], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 444, e1, e3, e4, e2, e8, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[444], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 399, e1, e3, e4, e2, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[399], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 399, e1, e4, e3, e2, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[399], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 320, e1, e3, e4, e2, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[320], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 395, e1, e3, e4, e2, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[395], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 315, e1, e3, e4, e2, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[315], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 315, e1, e4, e3, e2, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[315], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 213, e1, e3, e4, e2, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[213], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 406, e1, e2, e3, e4, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[406], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 329, e1, e2, e3, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[329], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 329, e1, e2, e4, e3, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[329], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 228, e1, e2, e3, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[228], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 329, e1, e3, e4, e2, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[329], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 228, e1, e3, e2, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[228], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 228, e1, e4, e2, e3, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[228], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}
													keys = generate_labels(mismatches, root, a, b, c, 129, e1, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[129], keys, mismatches);
												}
											}
										}
									}
								}
							}
						} 
					} 
					else  {
						if (found_ijk)  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 468, e1, e2, e3, e6, e7, e8, e5, e9, e10, e11, ZERO_VECTOR);
													increment_match_hash(hash[468], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 456, e1, e2, e3, e6, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[456], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 457, e1, e2, e3, e6, e7, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[457], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 422, e1, e2, e3, e6, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[422], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 457, e1, e2, e3, e6, e8, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[457], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 422, e1, e2, e3, e6, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[422], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 423, e1, e2, e3, e6, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[423], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C} 
													keys = generate_labels(mismatches, root, a, b, c, 352, e1, e2, e3, e6, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[352], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 461, e1, e2, e3, e6, e7, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[461], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 434, e1, e2, e3, e6, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[434], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 435, e1, e2, e3, e6, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[435], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 372, e1, e2, e3, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[372], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 440, e1, e2, e3, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[440], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 383, e1, e2, e3, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													 increment_match_hash(hash[383], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 384, e1, e2, e3, e6, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[384], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, a, b, c, 288, e1, e2, e3, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[288], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 461, e1, e3, e2, e6, e8, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[461], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 434, e1, e3, e2, e6, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[434], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 440, e1, e3, e2, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[440], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 383, e1, e3, e2, e6, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[383], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 435, e1, e3, e2, e6, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[435], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 372, e1, e3, e2, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[372], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 384, e1, e3, e2, e6, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[384], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 288, e1, e3, e2, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[288], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 445, e1, e2, e3, e6, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[445], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 396, e1, e2, e3, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[396], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 400, e1, e2, e3, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[400], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 316, e1, e2, e3, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[316], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 400, e1, e3, e2, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[400], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 316, e1, e3, e2, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[316], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 321, e1, e2, e3, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[321], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, a, b, c, 214, e1, e2, e3, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[214], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 462, e1, e2, e3, e7, e8, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[462], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 441, e1, e2, e3, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[441], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 436, e1, e2, e3, e7, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[436], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 385, e1, e2, e3, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[385], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 436, e1, e3, e2, e8, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[436], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 385, e1, e3, e2, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[385], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 373, e1, e2, e3, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[373], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 289, e1, e2, e3, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[289], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 446, e1, e2, e3, e7, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[446], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 401, e1, e2, e3, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[401], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 397, e1, e2, e3, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[397], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 317, e1, e2, e3, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[317], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 402, e1, e2, e3, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[402], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 322, e1, e2, e3, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[322], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 318, e1, e2, e3, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[318], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, a, b, c, 215, e1, e2, e3, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[215], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 446, e1, e3, e2, e8, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[446], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 401, e1, e3, e2, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[401], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 402, e1, e3, e2, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[402], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 322, e1, e3, e2, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[322], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 397, e1, e3, e2, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[397], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 317, e1, e3, e2, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[317], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 318, e1, e3, e2, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[318], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 215, e1, e3, e2, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[215], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 407, e1, e2, e3, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[407], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 330, e1, e2, e3, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[330], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 331, e1, e2, e3, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[331], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 229, e1, e2, e3, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[229], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 331, e1, e3, e2, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[331], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 229, e1, e3, e2, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[229], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 230, e1, e2, e3, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[230], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}
													keys = generate_labels(mismatches, root, a, b, c, 130, e1, e2, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[130], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
						else  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 452, e1, e2, e3, e6, e7, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[452], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 415, e1, e2, e3, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[415], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 417, e1, e2, e3, e6, e7, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[417], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 345, e1, e2, e3, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[345], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 417, e1, e3, e2, e6, e8, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[417], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 345, e1, e3, e2, e6, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[345], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 348, e1, e2, e3, e6, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[348], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 246, e1, e2, e3, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[246], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 427, e1, e2, e3, e6, e7, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[427], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 362, e1, e2, e3, e6, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[362], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 364, e1, e2, e3, e6, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[364], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 264, e1, e2, e3, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[264], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 376, e1, e2, e3, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[376], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 278, e1, e2, e3, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[278], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 280, e1, e2, e3, e6, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[280], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, a, b, c, 169, e1, e2, e3, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[169], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 427, e1, e3, e2, e6, e8, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[427], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 362, e1, e3, e2, e6, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[362], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 376, e1, e3, e2, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[376], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 278, e1, e3, e2, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[278], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 364, e1, e3, e2, e6, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[364], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 264, e1, e3, e2, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[264], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 280, e1, e3, e2, e6, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[280], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 169, e1, e3, e2, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[169], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 389, e1, e2, e3, e6, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[389], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 299, e1, e2, e3, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[299], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 306, e1, e2, e3, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[306], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 197, e1, e2, e3, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[197], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 306, e1, e3, e2, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[306], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 197, e1, e3, e2, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[197], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 207, e1, e2, e3, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[207], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}
													keys = generate_labels(mismatches, root, a, b, c, 107, e1, e2, e3, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[107], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 430, e1, e2, e3, e7, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[430], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 379, e1, e2, e3, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[379], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 367, e1, e2, e3, e7, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[367], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 283, e1, e2, e3, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[283], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 367, e1, e3, e2, e8, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[367], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 283, e1, e3, e2, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[283], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 267, e1, e2, e3, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[267], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 172, e1, e2, e3, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[172], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 391, e1, e2, e3, e7, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[391], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 308, e1, e2, e3, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[308], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 301, e1, e2, e3, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[301], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 199, e1, e2, e3, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[199], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 311, e1, e2, e3, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[311], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 209, e1, e2, e3, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[209], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 202, e1, e2, e3, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[202], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}
													keys = generate_labels(mismatches, root, a, b, c, 109, e1, e2, e3, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[109], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 391, e1, e3, e2, e8, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[391], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 308, e1, e3, e2, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[308], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 311, e1, e3, e2, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[311], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 209, e1, e3, e2, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[209], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 301, e1, e3, e2, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[301], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 199, e1, e3, e2, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[199], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 202, e1, e3, e2, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[202], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 109, e1, e3, e2, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[109], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 326, e1, e2, e3, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[326], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 222, e1, e2, e3, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[222], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 224, e1, e2, e3, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[224], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 123, e1, e2, e3, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[123], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 224, e1, e3, e2, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[224], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 123, e1, e3, e2, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[123], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 126, e1, e2, e3, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[126], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C} 
													keys = generate_labels(mismatches, root, a, b, c, 55, e1, e2, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[55], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
					}
				} 
				else  {
					if (found_rjk)  {
						if (found_ijk)  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 468, e1, e2, e4, e7, e6, e8, e5, e9, e11, e10, ZERO_VECTOR);
													increment_match_hash(hash[468], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 457, e1, e2, e4, e7, e6, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[457], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 456, e1, e2, e4, e7, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[456], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 422, e1, e2, e4, e7, e6, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[422], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 457, e1, e4, e2, e7, e8, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[457], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 423, e1, e2, e4, e7, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[423], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {                                                                        
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 422, e1, e4, e2, e7, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[422], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, a, c, 352, e1, e2, e4, e7, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[352], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 461, e1, e2, e4, e7, e6, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[461], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 435, e1, e2, e4, e7, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[435], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 434, e1, e2, e4, e7, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[434], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 372, e1, e2, e4, e7, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[372], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 440, e1, e2, e4, e7, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[440], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 384, e1, e2, e4, e7, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[384], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 383, e1, e2, e4, e7, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[383], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, b, a, c, 288, e1, e2, e4, e7, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[288], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 462, e1, e2, e4, e6, e8, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[462], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 436, e1, e2, e4, e6, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[436], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 441, e1, e2, e4, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[441], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 385, e1, e2, e4, e6, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[385], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 436, e1, e4, e2, e8, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[436], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 373, e1, e2, e4, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[373], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 385, e1, e4, e2, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[385], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, b, a, c, 289, e1, e2, e4, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[289], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 446, e1, e2, e4, e6, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[446], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 397, e1, e2, e4, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[397], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 401, e1, e2, e4, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[401], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 317, e1, e2, e4, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[317], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 402, e1, e2, e4, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[402], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 318, e1, e2, e4, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[318], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 322, e1, e2, e4, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[322], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A} 
													keys = generate_labels(mismatches, root, b, a, c, 215, e1, e2, e4, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[215], keys, mismatches);
												}
											}
										}
									} 
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 461, e1, e4, e2, e7, e8, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[461], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 440, e1, e4, e2, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[440], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 434, e1, e4, e2, e7, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[434], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 383, e1, e4, e2, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[383], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 435, e1, e4, e2, e7, e8, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[435], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 384, e1, e4, e2, e7, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[384], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 372, e1, e4, e2, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[372], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 288, e1, e4, e2, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[288], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 445, e1, e2, e4, e7, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[445], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 400, e1, e2, e4, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[400], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 396, e1, e2, e4, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[396], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 316, e1, e2, e4, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[316], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 400, e1, e4, e2, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[400], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 321, e1, e2, e4, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[321], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 316, e1, e4, e2, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[316], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B} 
													keys = generate_labels(mismatches, root, b, a, c, 214, e1, e2, e4, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[214], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 446, e1, e4, e2, e8, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[446], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 402, e1, e4, e2, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[402], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 401, e1, e4, e2, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[401], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 322, e1, e4, e2, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[322], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 397, e1, e4, e2, e8, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[397], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 318, e1, e4, e2, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[318], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 317, e1, e4, e2, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[317], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 215, e1, e4, e2, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[215], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 407, e1, e2, e4, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[407], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 331, e1, e2, e4, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[331], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 330, e1, e2, e4, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[330], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 229, e1, e2, e4, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[229], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 331, e1, e4, e2, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[331], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 230, e1, e2, e4, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[230], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 229, e1, e4, e2, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[229], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C} 
													keys = generate_labels(mismatches, root, b, a, c, 130, e1, e2, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[130], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
						else  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 452, e1, e2, e4, e7, e6, e8, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[452], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 417, e1, e2, e4, e7, e6, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[417], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 415, e1, e2, e4, e7, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[415], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 345, e1, e2, e4, e7, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[345], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 417, e1, e4, e2, e7, e8, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[417], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 348, e1, e2, e4, e7, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[348], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 345, e1, e4, e2, e7, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[345], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, a, c, 246, e1, e2, e4, e7, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[246], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 427, e1, e2, e4, e7, e6, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[427], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 364, e1, e2, e4, e7, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[364], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 362, e1, e2, e4, e7, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[362], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 264, e1, e2, e4, e7, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[264], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 376, e1, e2, e4, e7, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[376], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 280, e1, e2, e4, e7, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[280], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 278, e1, e2, e4, e7, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[278], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, b, a, c, 169, e1, e2, e4, e7, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[169], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 430, e1, e2, e4, e6, e8, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[430], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 367, e1, e2, e4, e6, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[367], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 379, e1, e2, e4, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[379], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 283, e1, e2, e4, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[283], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 367, e1, e4, e2, e8, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[367], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 267, e1, e2, e4, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[267], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 283, e1, e4, e2, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[283], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, b, a, c, 172, e1, e2, e4, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[172], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 391, e1, e2, e4, e6, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[391], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 301, e1, e2, e4, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[301], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 308, e1, e2, e4, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[308], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 199, e1, e2, e4, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[199], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 311, e1, e2, e4, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[311], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 202, e1, e2, e4, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[202], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 209, e1, e2, e4, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[209], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, b, a, c, 109, e1, e2, e4, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[109], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 427, e1, e4, e2, e7, e8, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[427], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 376, e1, e4, e2, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[376], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 362, e1, e4, e2, e7, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[362], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 278, e1, e4, e2, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[278], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 364, e1, e4, e2, e7, e8, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[364], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 280, e1, e4, e2, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[280], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 264, e1, e4, e2, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[264], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 169, e1, e4, e2, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[169], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													 keys = generate_labels(mismatches, root, b, a, c, 389, e1, e2, e4, e7, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													 increment_match_hash(hash[389], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 306, e1, e2, e4, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[306], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 299, e1, e2, e4, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[299], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 197, e1, e2, e4, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[197], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 306, e1, e4, e2, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[306], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 207, e1, e2, e4, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[207], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 197, e1, e4, e2, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[197], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, b, a, c, 107, e1, e2, e4, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[107], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 391, e1, e4, e2, e8, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[391], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 311, e1, e4, e2, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[311], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 308, e1, e4, e2, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[308], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 209, e1, e4, e2, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[209], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 301, e1, e4, e2, e8, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[301], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 202, e1, e4, e2, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[202], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 199, e1, e4, e2, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[199], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 109, e1, e4, e2, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[109], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 326, e1, e2, e4, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[326], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 224, e1, e2, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[224], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 222, e1, e2, e4, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[222], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 123, e1, e2, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[123], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 224, e1, e4, e2, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[224], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 126, e1, e2, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[126], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 123, e1, e4, e2, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[123], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}
													keys = generate_labels(mismatches, root, b, a, c, 55, e1, e2, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[55], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
					}
					else  {
						if (found_ijk)  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 453, e1, e2, e6, e7, e8, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[453], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 418, e1, e2, e7, e6, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[418], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 418, e1, e2, e6, e7, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[418], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 346, e1, e2, e6, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[346], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 419, e1, e2, e6, e7, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[419], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 349, e1, e2, e7, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[349], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 349, e1, e2, e6, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[349], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 247, e1, e2, e6, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[247], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 428, e1, e2, e6, e7, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[428], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 365, e1, e2, e7, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[365], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 365, e1, e2, e6, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[365], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 265, e1, e2, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[265], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 377, e1, e2, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[377], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 281, e1, e2, e7, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[281], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 281, e1, e2, e6, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[281], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, a, b, c, 170, e1, e2, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[170], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 431, e1, e2, e6, e8, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[431], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 368, e1, e2, e6, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[368], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 380, e1, e2, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[380], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 284, e1, e2, e6, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[284], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 369, e1, e2, e6, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[369], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 268, e1, e2, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[268], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 285, e1, e2, e6, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[285], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 173, e1, e2, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[173], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 392, e1, e2, e6, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[392], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 302, e1, e2, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[302], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 309, e1, e2, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[309], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 200, e1, e2, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[200], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 312, e1, e2, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[312], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 203, e1, e2, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[203], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 210, e1, e2, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[210], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, a, b, c, 110, e1, e2, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[110], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 431, e1, e2, e7, e8, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[431], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 380, e1, e2, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[380], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 368, e1, e2, e7, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[368], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 284, e1, e2, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[284], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 369, e1, e2, e7, e8, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[369], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 285, e1, e2, e7, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[285], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 268, e1, e2, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[268], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, a, c, 173, e1, e2, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[173], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 392, e1, e2, e7, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[392], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 309, e1, e2, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[309], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 302, e1, e2, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[302], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 200, e1, e2, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[200], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 312, e1, e2, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[312], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 210, e1, e2, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[210], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 203, e1, e2, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[203], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, b, a, c, 110, e1, e2, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[110], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 393, e1, e2, e8, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[393], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 313, e1, e2, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[313], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 313, e1, e2, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[313], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 211, e1, e2, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[211], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 303, e1, e2, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[303], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 204, e1, e2, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[204], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 204, e1, e2, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[204], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 111, e1, e2, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[111], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 327, e1, e2, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[327], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 225, e1, e2, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[225], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 225, e1, e2, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[225], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 124, e1, e2, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[124], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 226, e1, e2, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[226], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 127, e1, e2, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[127], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 127, e1, e2, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[127], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}
													keys = generate_labels(mismatches, root, a, b, c, 56, e1, e2, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[56], keys, mismatches);
												}
											}
										}
									}
								}
							}
						} 
						else  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 411, e1, e2, e6, e7, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[411], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 339, e1, e2, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[339], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 339, e1, e2, e7, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[339], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 239, e1, e2, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[239], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 341, e1, e2, e6, e7, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[341], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 242, e1, e2, e6, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[242], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 242, e1, e2, e7, e6, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[242], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 138, e1, e2, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[138], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 355, e1, e2, e6, e7, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[355], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 255, e1, e2, e7, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[255], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 255, e1, e2, e6, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[255], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 148, e1, e1, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[148], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 271, e1, e2, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[271], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 160, e1, e2, e7, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[160], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 160, e1, e2, e6, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[160], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, a, b, c, 73, e1, e2, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[73], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 358, e1, e2, e6, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[358], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 258, e1, e2, e6, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[258], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 274, e1, e2, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[274], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 163, e1, e2, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[163], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 260, e1, e2, e6, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[260], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 151, e1, e2, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[151], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 165, e1, e2, e6, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[165], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 76, e1, e2, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[76], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 293, e1, e2, e6, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[293], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 181, e1, e2, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[181], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 188, e1, e2, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[188], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 91, e1, e2, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[91], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 191, e1, e2, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[191], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 94, e1, e2, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[94], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 101, e1, e2, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[101], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}
													keys = generate_labels(mismatches, root, a, b, c, 39, e1, e2, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[39], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 358, e1, e2, e7, e8, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[358], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 274, e1, e2, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[274], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 258, e1, e2, e7, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[258], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 163, e1, e2, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[163], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 260, e1, e2, e7, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[260], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 165, e1, e2, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[165], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 151, e1, e2, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[151], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, a, c, 76, e1, e2, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[76], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 293, e1, e2, e7, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[293], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 188, e1, e2, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[188], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 181, e1, e2, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[181], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 91, e1, e2, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[91], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 191, e1, e2, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[191], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 101, e1, e2, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[101], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 94, e1, e2, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[94], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}
													keys = generate_labels(mismatches, root, b, a, c, 39, e1, e2, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[39], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 295, e1, e2, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[295], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 193, e1, e2, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[193], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 193, e1, e2, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[193], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 103, e1, e2, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[103], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 183, e1, e2, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[183], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 96, e1, e2, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[96], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 96, e1, e2, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[96], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 41, e1, e2, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[41], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 218, e1, e2, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[218], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 117, e1, e2, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[117], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 117, e1, e2, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[117], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 48, e1, e2, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[48], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 119, e1, e2, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[119], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 51, e1, e2, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[51], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E2={R,A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 51, e1, e2, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[51], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E2={R,A,B}
													keys = generate_labels(mismatches, root, a, b, c, 19, e1, e2, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[19], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			} 
			else  {
				if (found_rik)  {
					if (found_rjk)  {
						if (found_ijk)  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 468, e1, e3, e4, e8, e6, e7, e5, e10, e11, e9, ZERO_VECTOR);
													increment_match_hash(hash[468], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 457, e1, e3, e4, e8, e6, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[457], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 457, e1, e4, e3, e8, e7, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[457], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 423, e1, e3, e4, e8, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[423], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 456, e1, e3, e4, e8, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[456], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 422, e1, e3, e4, e8, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[422], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 422, e1, e4, e3, e8, e7, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[422], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 352, e1, e3, e4, e8, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[352], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 462, e1, e3, e4, e6, e7, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[462], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 436, e1, e3, e4, e6, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[436], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 436, e1, e4, e3, e7, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[436], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 373, e1, e3, e4, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[373], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 441, e1, e3, e4, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[441], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 385, e1, e3, e4, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[385], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 385, e1, e4, e3, e7, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[385], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, c, a, b, 289, e1, e3, e4, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[289], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 461, e1, e3, e4, e8, e6, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[461], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 435, e1, e3, e4, e8, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[435], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 440, e1, e3, e4, e8, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[440], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 384, e1, e3, e4, e8, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[384], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 434, e1, e3, e4, e8, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[434], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 372, e1, e3, e4, e8, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[372], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 383, e1, e3, e4, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[383], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 288, e1, e3, e4, e8, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[288], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 446, e1, e3, e4, e6, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[446], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 397, e1, e3, e4, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[397], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 402, e1, e3, e4, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[402], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 318, e1, e3, e4, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[318], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 401, e1, e3, e4, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[401], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 317, e1, e3, e4, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[317], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 322, e1, e3, e4, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[322], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, c, a, b, 215, e1, e3, e4, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[215], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 461, e1, e4, e3, e8, e7, e5, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[461], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 440, e1, e4, e3, e8, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[440], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 435, e1, e4, e3, e8, e7, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[435], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 384, e1, e4, e3, e8, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[384], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 434, e1, e4, e3, e8, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[434], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 383, e1, e4, e3, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[383], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 372, e1, e4, e3, e8, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[372], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, c, b, a, 288, e1, e4, e3, e8, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[288], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 446, e1, e4, e3, e7, e5, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[446], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 402, e1, e4, e3, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[402], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 397, e1, e4, e3, e7, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[397], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 318, e1, e4, e3, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[318], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 401, e1, e4, e3, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[401], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 322, e1, e4, e3, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[322], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 317, e1, e4, e3, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[317], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, c, b, a, 215, e1, e4, e3, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[215], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 445, e1, e3, e4, e8, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[445], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 400, e1, e3, e4, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[400], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 400, e1, e4, e3, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[400], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 321, e1, e3, e4, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[321], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 396, e1, e3, e4, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[396], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 316, e1, e3, e4, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[316], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 316, e1, e4, e3, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[316], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 214, e1, e3, e4, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[214], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 407, e1, e3, e4, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[407], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 331, e1, e3, e4, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[331], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 331, e1, e4, e3, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[331], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 230, e1, e3, e4, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[230], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 330, e1, e3, e4, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[330], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 229, e1, e3, e4, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[229], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 229, e1, e4, e3, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[229], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}
													keys = generate_labels(mismatches, root, c, a, b, 130, e1, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[130], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
						else  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 452, e1, e3, e4, e8, e6, e7, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[452], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 417, e1, e3, e4, e8, e6, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[417], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 417, e1, e4, e3, e8, e7, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[417], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 348, e1, e3, e4, e8, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[348], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 415, e1, e3, e4, e8, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[415], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 345, e1, e3, e4, e8, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[345], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 345, e1, e4, e3, e8, e7, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[345], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 246, e1, e3, e4, e8, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[246], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 430, e1, e3, e4, e6, e7, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[430], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 367, e1, e3, e4, e6, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[367], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 367, e1, e4, e3, e7, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[367], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 267, e1, e3, e4, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[267], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 379, e1, e3, e4, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[379], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 283, e1, e3, e4, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[283], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 283, e1, e4, e3, e7, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[283], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, c, a, b, 172, e1, e3, e4, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[172], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 427, e1, e3, e4, e8, e6, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[427], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 364, e1, e3, e4, e8, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[364], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 376, e1, e3, e4, e8, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[376], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 280, e1, e3, e4, e8, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[280], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 362, e1, e3, e4, e8, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[362], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 264, e1, e3, e4, e8, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[264], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 278, e1, e3, e4, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[278], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 169, e1, e3, e4, e8, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[169], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 391, e1, e3, e4, e6, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[391], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 301, e1, e3, e4, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[301], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 311, e1, e3, e4, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[311], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 202, e1, e3, e4, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[202], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 308, e1, e3, e4, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[308], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 199, e1, e3, e4, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[199], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 209, e1, e3, e4, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[209], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, c, a, b, 109, e1, e3, e4, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[109], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 427, e1, e4, e3, e8, e7, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[427], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 376, e1, e4, e3, e8, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[376], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 364, e1, e4, e3, e8, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[364], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 280, e1, e4, e3, e8, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[280], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 362, e1, e4, e3, e8, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[362], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 278, e1, e4, e3, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[278], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 264, e1, e4, e3, e8, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[264], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, c, b, a, 169, e1, e4, e3, e8, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[169], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 391, e1, e4, e3, e7, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[391], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 311, e1, e4, e3, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[311], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 301, e1, e4, e3, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[301], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 202, e1, e4, e3, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[202], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 308, e1, e4, e3, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[308], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 209, e1, e4, e3, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[209], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 199, e1, e4, e3, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[199], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, c, b, a, 109, e1, e4, e3, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[109], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 389, e1, e3, e4, e8, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[389], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 306, e1, e3, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[306], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 306, e1, e4, e3, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[306], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 207, e1, e3, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[207], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 299, e1, e3, e4, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[299], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 197, e1, e3, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[197], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 197, e1, e4, e3, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[197], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E8={R,C} 
													keys = generate_labels(mismatches, root, c, a, b, 107, e1, e3, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[107], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 326, e1, e3, e4, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[326], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 224, e1, e3, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[224], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 224, e1, e4, e3, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[224], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 126, e1, e3, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[126], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 222, e1, e3, e4, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[222], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 123, e1, e3, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[123], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 123, e1, e4, e3, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[123], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}
													keys = generate_labels(mismatches, root, c, a, b, 55, e1, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[55], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
					}
					else  {
						if (found_ijk)  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 453, e1, e3, e6, e8, e7, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[453], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 418, e1, e3, e8, e6, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[418], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 419, e1, e3, e6, e8, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[419], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 349, e1, e3, e8, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[349], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 418, e1, e3, e6, e8, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[418], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 346, e1, e3, e6, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[346], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 349, e1, e3, e6, e8, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[349], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 247, e1, e3, e6, e8, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[247], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 431, e1, e3, e6, e7, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[431], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 368, e1, e3, e6, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[368], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 369, e1, e3, e6, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[369], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 268, e1, e3, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[268], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 380, e1, e3, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[380], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 284, e1, e3, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[284], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 285, e1, e3, e6, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[285], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, a, c, b, 173, e1, e3, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[173], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 428, e1, e3, e6, e8, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[428], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 365, e1, e3, e8, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[365], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 377, e1, e3, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[377], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 281, e1, e3, e8, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[281], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 365, e1, e3, e6, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[365], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 265, e1, e3, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[265], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 281, e1, e3, e6, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[281], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 170, e1, e3, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[170], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 392, e1, e3, e6, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[392], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 302, e1, e3, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[302], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 312, e1, e3, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[312], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 203, e1, e3, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[203], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 309, e1, e3, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[309], keys, mismatches);
												}
												else  { 
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 200, e1, e3, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[200], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 210, e1, e3, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[210], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, a, c, b, 110, e1, e3, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[110], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 431, e1, e3, e8, e7, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[431], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 380, e1, e3, e8, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[380], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 369, e1, e3, e8, e7, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[369], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 285, e1, e3, e8, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[285], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 368, e1, e3, e8, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[368], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 284, e1, e3, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[284], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 268, e1, e3, e8, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[268], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 173, e1, e3, e8, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[173], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 393, e1, e3, e7, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[393], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 313, e1, e3, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[313], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 303, e1, e3, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[303], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 204, e1, e3, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[204], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 313, e1, e3, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[313], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 211, e1, e3, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[211], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 204, e1, e3, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[204], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, a, c, b, 111, e1, e3, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[111], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 392, e1, e3, e8, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[392], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 309, e1, e3, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[309], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 312, e1, e3, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[312], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 210, e1, e3, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[210], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 302, e1, e3, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[302], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 200, e1, e3, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[200], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 203, e1, e3, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[203], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 110, e1, e3, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[110], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 327, e1, e3, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[327], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 225, e1, e3, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[225], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 226, e1, e3, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[226], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 127, e1, e3, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[127], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 225, e1, e3, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[225], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 124, e1, e3, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[124], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 127, e1, e3, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[127], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}
													keys = generate_labels(mismatches, root, a, c, b, 56, e1, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[56], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
						else  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 411, e1, e3, e6, e8, e7, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[411], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 339, e1, e3, e6, e8, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[339], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 341, e1, e3, e6, e8, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[341], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 242, e1, e3, e6, e8, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[242], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 339, e1, e3, e8, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[339], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 239, e1, e3, e6, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[239], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 242, e1, e3, e8, e6, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[242], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 138, e1, e3, e6, e8, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[138], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 358, e1, e3, e6, e7, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[358], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 258, e1, e3, e6, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[258], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 260, e1, e3, e6, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[260], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 151, e1, e3, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[151], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 274, e1, e3, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[274], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 163, e1, e3, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[163], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 165, e1, e3, e6, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[165], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, a, c, b, 76, e1, e3, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[76], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 355, e1, e3, e6, e8, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[355], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 255, e1, e3, e8, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[255], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 271, e1, e3, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[271], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 160, e1, e3, e8, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[160], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 255, e1, e3, e6, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[255], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 148, e1, e3, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[148], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 160, e1, e3, e6, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[160], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 73, e1, e3, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[73], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 293, e1, e3, e6, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[293], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 181, e1, e3, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[181], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 191, e1, e3, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[191], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 94, e1, e3, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[94], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 188, e1, e3, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[188], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 91, e1, e3, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[91], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 101, e1, e3, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[101], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}
													keys = generate_labels(mismatches, root, a, c, b, 39, e1, e3, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[39], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 358, e1, e3, e8, e7, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[358], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 274, e1, e3, e8, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[274], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 260, e1, e3, e8, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[260], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 165, e1, e3, e8, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[165], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 258, e1, e3, e8, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[258], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 163, e1, e3, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[163], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 151, e1, e3, e8, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[151], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 76, e1, e3, e8, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[76], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 295, e1, e3, e7, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[295], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 193, e1, e3, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[193], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 183, e1, e3, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[183], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 96, e1, e3, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[96], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 193, e1, e3, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[193], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 103, e1, e3, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[103], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 96, e1, e3, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[96], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}
													keys = generate_labels(mismatches, root, a, c, b, 41, e1, e3, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[41], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 293, e1, e3, e8, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[293], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 188, e1, e3, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[188], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 191, e1, e3, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[191], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 101, e1, e3, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[101], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 181, e1, e3, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[181], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 91, e1, e3, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[91], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 94, e1, e3, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[94], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 39, e1, e3, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[39], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 218, e1, e3, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[218], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 117, e1, e3, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[117], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 119, e1, e3, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[119], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 51, e1, e3, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[51], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 117, e1, e3, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[117], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 48, e1, e3, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[48], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E3={R,A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 51, e1, e3, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[51], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E3={R,A,C}
													keys = generate_labels(mismatches, root, a, c, b, 19, e1, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[19], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
					}
				}
				else  {
					if (found_rjk)  {
						if (found_ijk)  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 453, e1, e4, e7, e8, e6, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[453], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 419, e1, e4, e7, e8, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[419], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 418, e1, e4, e8, e7, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[418], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 349, e1, e4, e8, e7, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[349], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 418, e1, e4, e7, e8, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[418], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 349, e1, e4, e7, e8, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[349], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 346, e1, e4, e7, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[346], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 247, e1, e4, e7, e8, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[247], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 431, e1, e4, e7, e6, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[431], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 369, e1, e4, e7, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[369], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 368, e1, e4, e7, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[368], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 268, e1, e4, e7, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[268], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 380, e1, e4, e7, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[380], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 285, e1, e4, e7, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[285], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 284, e1, e4, e7, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[284], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, b, c, a, 173, e1, e4, e7, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[173], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 431, e1, e4, e8, e6, e5, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[431], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 369, e1, e4, e8, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[369], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 380, e1, e4, e8, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[380], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 285, e1, e4, e8, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[285], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 368, e1, e4, e8, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[368], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 268, e1, e4, e8, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[268], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 284, e1, e4, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[284], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, c, b, a, 173, e1, e4, e8, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[173], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 393, e1, e4, e6, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[393], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 303, e1, e4, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[303], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 313, e1, e4, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[313], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 204, e1, e4, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[204], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 313, e1, e4, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[313], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 204, e1, e4, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[204], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 211, e1, e4, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[211], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, b, c, a, 111, e1, e4, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[111], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 428, e1, e4, e7, e8, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[428], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 377, e1, e4, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[377], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 365, e1, e4, e8, e7, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[365], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 281, e1, e4, e8, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[281], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 365, e1, e4, e7, e8, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[365], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 281, e1, e4, e7, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[281], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 265, e1, e4, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[265], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 170, e1, e4, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[170], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 392, e1, e4, e7, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[392], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 312, e1, e4, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[312], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 302, e1, e4, e7, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[302], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 203, e1, e4, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[203], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 309, e1, e4, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[309], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 210, e1, e4, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[210], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 200, e1, e4, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[200], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, b, c, a, 110, e1, e4, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[110], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 392, e1, e4, e8, e5, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[392], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 312, e1, e4, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[312], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 309, e1, e4, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[309], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 210, e1, e4, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[210], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 302, e1, e4, e8, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[302], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 203, e1, e4, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[203], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 200, e1, e4, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[200], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, c, b, a, 110, e1, e4, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[110], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 327, e1, e4, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[327], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 226, e1, e4, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[226], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 225, e1, e4, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[225], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 127, e1, e4, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[127], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 225, e1, e4, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[225], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 127, e1, e4, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[127], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 124, e1, e4, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[124], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}
													keys = generate_labels(mismatches, root, b, c, a, 56, e1, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[56], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
						else  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 411, e1, e4, e7, e8, e6, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[411], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 341, e1, e4, e7, e8, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[341], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 339, e1, e4, e7, e8, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[339], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 242, e1, e4, e7, e8, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[242], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 339, e1, e4, e8, e7, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[339], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 242, e1, e4, e8, e7, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[242], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 239, e1, e4, e7, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[239], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 138, e1, e4, e7, e8, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[138], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 358, e1, e4, e7, e6, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[358], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 260, e1, e4, e7, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[260], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 258, e1, e4, e7, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[258], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 151, e1, e4, e7, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[151], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 274, e1, e4, e7, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[274], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 165, e1, e4, e7, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[165], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 163, e1, e4, e7, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[163], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, b, c, a, 76, e1, e4, e7, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[76], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 358, e1, e4, e8, e6, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[358], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 260, e1, e4, e8, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[260], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 274, e1, e4, e8, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[274], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 165, e1, e4, e8, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[165], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 258, e1, e4, e8, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[258], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 151, e1, e4, e8, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[151], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 163, e1, e4, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[163], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, c, b, a, 76, e1, e4, e8, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[76], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 295, e1, e4, e6, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[295], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 183, e1, e4, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[183], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 193, e1, e4, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[193], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 96, e1, e4, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[96], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 193, e1, e4, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[193], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 96, e1, e4, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[96], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 103, e1, e4, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[103], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, b, c, a, 41, e1, e4, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[41], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 355, e1, e4, e7, e8, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[355], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 271, e1, e4, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[271], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 255, e1, e4, e8, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[255], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 160, e1, e4, e8, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[160], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 255, e1, e4, e7, e8, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[255], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 160, e1, e4, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[160], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 148, e1, e4, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[148], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 73, e1, e4, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[73], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 293, e1, e4, e7, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[293], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 191, e1, e4, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[191], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 181, e1, e4, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[181], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 94, e1, e4, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[94], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 188, e1, e4, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[188], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 101, e1, e4, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[101], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 91, e1, e4, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[91], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, b, c, a, 39, e1, e4, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[39], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 293, e1, e4, e8, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[293], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 191, e1, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[191], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 188, e1, e4, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[188], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 101, e1, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[101], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 181, e1, e4, e8, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[181], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 94, e1, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[94], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 91, e1, e4, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[91], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, c, b, a, 39, e1, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[39], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 218, e1, e4, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[218], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 119, e1, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[119], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 117, e1, e4, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[117], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 51, e1, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[51], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 117, e1, e4, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[117], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 51, e1, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[51], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E4={R,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 48, e1, e4, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[48], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E4={R,B,C}
													keys = generate_labels(mismatches, root, b, c, a, 19, e1, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[19], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
					}
					else  {
						if (found_ijk)  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 412, e1, e6, e7, e8, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[412], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 342, e1, e6, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[342], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 342, e1, e7, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[342], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 243, e1, e6, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[243], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 342, e1, e8, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[342], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 243, e1, e6, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[243], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 243, e1, e7, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[243], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 139, e1, e6, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[139], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 359, e1, e6, e7, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[359], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 261, e1, e7, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[261], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 261, e1, e6, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[261], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 152, e1, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[152], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 275, e1, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[275], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 166, e1, e7, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[166], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 166, e1, e6, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[166], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, a, b, c, 77, e1, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[77], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 359, e1, e6, e8, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[359], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 261, e1, e8, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[261], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 275, e1, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[275], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 166, e1, e8, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[166], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 261, e1, e6, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[261], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 152, e1, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[152], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 166, e1, e6, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[166], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 77, e1, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[77], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 296, e1, e6, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[296], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 184, e1, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[184], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 194, e1, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[194], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 97, e1, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[97], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 194, e1, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[194], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 97, e1, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[97], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 104, e1, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[104], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, a, b, c, 42, e1, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[42], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 359, e1, e7, e8, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[359], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 275, e1, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[275], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 261, e1, e8, e7, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[261], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 166, e1, e8, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[166], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 261, e1, e7, e8, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[261], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 166, e1, e7, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[166], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 152, e1, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[152], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 77, e1, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[77], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 296, e1, e7, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[296], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 194, e1, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[194], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 184, e1, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[184], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 97, e1, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[97], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 194, e1, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[194], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 104, e1, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[104], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 97, e1, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[97], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, b, a, c, 42, e1, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[42], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 296, e1, e8, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[296], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 194, e1, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[194], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													 //E1={R,A,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													 keys = generate_labels(mismatches, root, c, b, a, 194, e1, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													 increment_match_hash(hash[194], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 104, e1, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[104], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 184, e1, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[184], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 97, e1, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[97], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 97, e1, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[97], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 42, e1, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[42], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 219, e1, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[219], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 120, e1, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[120], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 120, e1, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[120], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 52, e1, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[52], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 120, e1, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[120], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 52, e1, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[52], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E5={A,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 52, e1, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[52], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E5={A,B,C}
													keys = generate_labels(mismatches, root, a, b, c, 20, e1, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[20], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
						else  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 335, e1, e6, e7, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[335], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 236, e1, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[236], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 236, e1, e7, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[236], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 135, e1, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[135], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 236, e1, e8, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[236], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 135, e1, e6, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[135], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 135, e1, e7, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[135], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 60, e1, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[60], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 251, e1, e6, e7, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[251], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 145, e1, e7, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[145], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 145, e1, e6, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[145], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 64, e1, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[64], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 156, e1, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[156], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 70, e1, e7, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[70], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 70, e1, e6, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[70], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, a, b, c, 25, e1, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[25], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 251, e1, e6, e8, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[251], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 145, e1, e8, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[145], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 156, e1, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[156], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 70, e1, e8, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[70], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 145, e1, e6, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[145], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 64, e1, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[64], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 70, e1, e6, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[70], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 25, e1, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[25], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 177, e1, e6, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[177], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 82, e1, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[82], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 87, e1, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[87], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 31, e1, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[31], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 87, e1, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[87], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 31, e1, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[31], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 35, e1, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[35], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, a, b, c, 14, e1, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[14], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 251, e1, e7, e8, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[251], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 156, e1, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[156], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 145, e1, e8, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[145], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 70, e1, e8, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[70], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 145, e1, e7, e8, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[145], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 70, e1, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[70], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 64, e1, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[64], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 25, e1, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[25], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 177, e1, e7, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[177], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 87, e1, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[87], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 82, e1, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[82], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 31, e1, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[31], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 87, e1, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[87], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 35, e1, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[35], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 31, e1, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[31], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, b, a, c, 14, e1, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[14], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 177, e1, e8, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[177], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 87, e1, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[87], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 87, e1, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[87], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 35, e1, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[35], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 82, e1, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[82], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 31, e1, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[31], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 31, e1, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[31], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 14, e1, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[14], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 113, e1, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[113], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 45, e1, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[45], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 45, e1, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[45], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 16, e1, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[16], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E1={R,A,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 45, e1, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[45], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 16, e1, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[16], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E1={R,A,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 16, e1, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[16], keys, mismatches);
												}
												else  {
													//E1={R,A,B,C}
													keys = generate_labels(mismatches, root, a, b, c, 11, e1, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[11], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		else  {
			if (found_rij)  {
				if (found_rik)  {
					if (found_rjk)  {
						if (found_ijk)  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 466, e2, e3, e4, e6, e7, e8, e5, e9, e10, e11, ZERO_VECTOR);
													increment_match_hash(hash[466], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 454, e2, e3, e4, e6, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[454], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 454, e2, e4, e3, e7, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[454], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 420, e2, e3, e4, e6, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[420], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 454, e3, e4, e2, e8, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[454], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 420, e3, e2, e4, e6, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[420], keys, mismatches); 
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 420, e4, e2, e3, e7, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[420], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 350, e2, e3, e4, e6, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[350], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 459, e2, e3, e4, e6, e7, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[459], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 432, e2, e3, e4, e6, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[432], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 432, e2, e4, e3, e7, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[432], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 370, e2, e3, e4, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[370], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 438, e2, e3, e4, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[438], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C} 
													keys = generate_labels(mismatches, root, a, b, c, 381, e2, e3, e4, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[381], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 381, e2, e4, e3, e7, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[381], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, a, b, c, 286, e2, e3, e4, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[286], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 459, e3, e2, e4, e6, e8, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[459], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 432, e3, e2, e4, e6, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[432], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 438, e3, e2, e4, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[438], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 381, e3, e2, e4, e6, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[381], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 432, e3, e4, e2, e8, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[432], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 370, e3, e2, e4, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[370], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 381, e3, e4, e2, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[381], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 286, e3, e2, e4, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[286], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 443, e2, e3, e4, e6, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[443], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 394, e2, e3, e4, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[394], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 398, e2, e3, e4, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[398], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 314, e2, e3, e4, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[314], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 398, e3, e2, e4, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[398], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 314, e3, e2, e4, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[314], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 319, e2, e3, e4, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[319], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, a, b, c, 212, e2, e3, e4, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[212], keys, mismatches);
												}
											}
										}
									}
								}
							} 
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 459, e4, e2, e3, e7, e8, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[459], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 438, e4, e2, e3, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[438], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 432, e4, e2, e3, e7, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[432], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 381, e4, e2, e3, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[381], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 432, e4, e3, e2, e8, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[432], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 381, e4, e3, e2, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[381], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 370, e4, e2, e3, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[370], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 286, e4, e2, e3, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[286], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 443, e2, e4, e3, e7, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[443], keys, mismatches);

												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 398, e2, e4, e3, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[398], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B} E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 394, e2, e4, e3, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[394], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 314, e2, e4, e3, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[314], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 398, e4, e2, e3, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[398], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 319, e2, e4, e3, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[319], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 314, e4, e2, e3, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[314], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, b, a, c, 212, e2, e4, e3, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[212], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 443, e3, e4, e2, e8, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[443], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 398, e3, e4, e2, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[398], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 398, e4, e3, e2, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[398], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 319, e3, e4, e2, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[319], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 394, e3, e4, e2, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[394], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 314, e3, e4, e2, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[314], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 314, e4, e3, e2, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[314], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 212, e3, e4, e2, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[212], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 405, e2, e3, e4, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[405], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 328, e2, e3, e4, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[328], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 328, e2, e4, e3, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[328], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 227, e2, e3, e4, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[227], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 328, e3, e4, e2, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[328], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 227, e3, e2, e4, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[227], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 227, e4, e2, e3, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[227], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}
													keys = generate_labels(mismatches, root, a, b, c, 128, e2, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[128], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
						else  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 450, e2, e3, e4, e6, e7, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[450], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 413, e2, e3, e4, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[413], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 413, e2, e4, e3, e7, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[413], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 343, e2, e3, e4, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[343], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 413, e3, e4, e2, e8, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[413], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 343, e3, e2, e4, e6, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[343], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 343, e4, e2, e3, e7, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[343], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 244, e2, e3, e4, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[244], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 425, e2, e3, e4, e6, e7, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[425], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 360, e2, e3, e4, e6, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[360], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 360, e2, e4, e3, e7, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[360], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 262, e2, e3, e4, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[262], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 374, e2, e3, e4, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[374], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 276, e2, e3, e4, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[276], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 276, e2, e4, e3, e7, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[276], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, a, b, c, 167, e2, e3, e4, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[167], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 425, e3, e2, e4, e6, e8, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[425], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 360, e3, e2, e4, e6, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[360], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 374, e3, e2, e4, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[374], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 276, e3, e2, e4, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[276], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 360, e3, e4, e2, e8, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[360], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 262, e3, e2, e4, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[262], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 276, e3, e4, e2, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[276], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 167, e3, e2, e4, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[167], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 387, e2, e3, e4, e6, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[387], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 297, e2, e3, e4, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[297], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 304, e2, e3, e4, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[304], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 195, e2, e3, e4, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[195], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 304, e3, e2, e4, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[304], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 195, e3, e2, e4, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[195], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 205, e2, e3, e4, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[205], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, a, b, c, 105, e2, e3, e4, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[105], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 425, e4, e2, e3, e7, e8, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[425], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 374, e4, e2, e3, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[374], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 360, e4, e2, e3, e7, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[360], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 276, e4, e2, e3, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[276], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 360, e4, e3, e2, e8, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[360], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 276, e4, e3, e2, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[276], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 262, e4, e2, e3, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[262], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 167, e4, e2, e3, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[167], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 387, e2, e4, e3, e7, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[387], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 304, e2, e4, e3, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[304], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 297, e2, e4, e3, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[297], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 195, e2, e4, e3, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[195], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 304, e4, e2, e3, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[304], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 205, e2, e4, e3, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[205], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 195, e4, e2, e3, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[195], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, b, a, c, 105, e2, e4, e3, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[105], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 387, e3, e4, e2, e8, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[387], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 304, e3, e4, e2, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[304], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 304, e4, e3, e2, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[304], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 205, e3, e4, e2, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[205], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 297, e3, e4, e2, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[297], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 195, e3, e4, e2, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[195], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 195, e4, e3, e2, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[195], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 105, e3, e4, e2, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[105], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 324, e2, e3, e4, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[324], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 220, e2, e3, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[220], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 220, e2, e4, e3, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[220], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 121, e2, e3, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[121], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 220, e3, e4, e2, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[220], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 121, e3, e2, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[121], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 121, e4, e2, e3, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[121], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E4={R,B,C}
													keys = generate_labels(mismatches, root, a, b, c, 53, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[53], keys, mismatches);
												}
											}
										}
									}
								}
							}
						} 
					}
					else  {
						if (found_ijk)  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 451, e2, e3, e6, e7, e8, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[451], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 414, e2, e3, e6, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[414], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 416, e2, e3, e6, e7, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[416], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 344, e2, e3, e6, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[344], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 416, e3, e2, e6, e8, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[416], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 344, e3, e2, e6, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[344], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 347, e2, e3, e6, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[347], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 245, e2, e3, e6, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[245], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 426, e2, e3, e6, e7, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[426], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 361, e2, e3, e6, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[361], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 363, e2, e3, e6, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[363], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 263, e2, e3, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[263], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 375, e2, e3, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[375], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 277, e2, e3, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[277], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 279, e2, e3, e6, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[279], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, a, b, c, 168, e2, e3, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[168], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 426, e3, e2, e6, e8, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[426], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 361, e3, e2, e6, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[361], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 375, e3, e2, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[375], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 277, e3, e2, e6, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[277], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 363, e3, e2, e6, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[363], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 263, e3, e2, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[263], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 279, e3, e2, e6, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[279], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 168, e3, e2, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[168], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 388, e2, e3, e6, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[388], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 298, e2, e3, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[298], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 305, e2, e3, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[305], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 196, e2, e3, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[196], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 305, e3, e2, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[305], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 196, e3, e2, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[196], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 206, e2, e3, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[206], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, a, b, c, 106, e2, e3, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[106], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 429, e2, e3, e7, e8, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[429], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 378, e2, e3, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[378], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 366, e2, e3, e7, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[366], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 282, e2, e3, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[282], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 366, e3, e2, e8, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[366], keys, mismatches);

												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 282, e3, e2, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[282], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 266, e2, e3, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[266], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 171, e2, e3, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[171], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 390, e2, e3, e7, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[390], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 307, e2, e3, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[307], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 300, e2, e3, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[300], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 198, e2, e3, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[198], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 310, e2, e3, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[310], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 208, e2, e3, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[208], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 201, e2, e3, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[201], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, a, b, c, 108, e2, e3, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[108], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 390, e3, e2, e8, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[390], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 307, e3, e2, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[307], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 310, e3, e2, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[310], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 208, e3, e2, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[208], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 300, e3, e2, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[300], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 198, e3, e2, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[198], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 201, e3, e2, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[201], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 108, e3, e2, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[108], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 325, e2, e3, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[325], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 221, e2, e3, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[221], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 223, e2, e3, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[223], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 122, e2, e3, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[122], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 223, e3, e2, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[223], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 122, e3, e2, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[122], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 125, e2, e3, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[125], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E5={A,B,C}
													keys = generate_labels(mismatches, root, a, b, c, 54, e2, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[54], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
						else  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 409, e2, e3, e6, e7, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[409], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 336, e2, e3, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[336], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 337, e2, e3, e6, e7, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[337], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 237, e2, e3, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[237], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 337, e3, e2, e6, e8, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[337], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 237, e3, e2, e6, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[237], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 240, e2, e3, e6, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[240], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 136, e2, e3, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[136], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 353, e2, e3, e6, e7, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[353], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 252, e2, e3, e6, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[252], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 253, e2, e3, e6, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[253], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 146, e2, e3, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[146], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 269, e2, e3, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[269], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 157, e2, e3, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[157], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 158, e2, e3, e6, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[158], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, a, b, c, 71, e2, e3, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[71], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 353, e3, e2, e6, e8, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[353], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 252, e3, e2, e6, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[252], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 269, e3, e2, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[269], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 157, e3, e2, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[157], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 253, e3, e2, e6, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[253], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 146, e3, e2, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[146], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 158, e3, e2, e6, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[158], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 71, e3, e2, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[71], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 290, e2, e3, e6, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[290], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 178, e2, e3, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[178], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 185, e2, e3, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[185], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 88, e2, e3, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[88], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 185, e3, e2, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[185], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 88, e3, e2, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[88], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 98, e2, e3, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[98], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E6={R,A}
													keys = generate_labels(mismatches, root, a, b, c, 36, e2, e3, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[36], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 356, e2, e3, e7, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[356], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 272, e2, e3, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[272], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 256, e2, e3, e7, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[256], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 161, e2, e3, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[161], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 256, e3, e2, e8, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[256], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 161, e3, e2, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[161], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 149, e2, e3, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[149], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 74, e2, e3, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[74], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 291, e2, e3, e7, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[291], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 186, e2, e3, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[186], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 179, e2, e3, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[179], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 89, e2, e3, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[89], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 189, e2, e3, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[189], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 99, e2, e3, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[99], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 92, e2, e3, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[92], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E7={R,B}
													keys = generate_labels(mismatches, root, a, b, c, 37, e2, e3, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[37], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 291, e3, e2, e8, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[291], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 186, e3, e2, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[186], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 189, e3, e2, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[189], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 99, e3, e2, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[99], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 179, e3, e2, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[179], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 89, e3, e2, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[89], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 92, e3, e2, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[92], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 37, e3, e2, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[37], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 216, e2, e3, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[216], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 114, e2, e3, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[114], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 115, e2, e3, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[115], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 46, e2, e3, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[46], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 115, e3, e2, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[115], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 46, e3, e2, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[46], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E3={R,A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 49, e2, e3, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[49], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E3={R,A,C}
													keys = generate_labels(mismatches, root, a, b, c, 17, e2, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[17], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
					}
				} 
				else  {
					if (found_rjk)  {
						if (found_ijk)  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 451, e2, e4, e7, e6, e8, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[451], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 416, e2, e4, e7, e6, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[416], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 414, e2, e4, e7, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[414], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 344, e2, e4, e7, e6, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[344], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 416, e4, e2, e7, e8, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[416], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 347, e2, e4, e7, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[347], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {                                                                        
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 344, e4, e2, e7, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[344], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, a, c, 245, e2, e4, e7, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[245], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 426, e2, e4, e7, e6, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[426], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 363, e2, e4, e7, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[363], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 361, e2, e4, e7, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[361], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 263, e2, e4, e7, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[263], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 375, e2, e4, e7, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[375], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 279, e2, e4, e7, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[279], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 277, e2, e4, e7, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[277], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, b, a, c, 168, e2, e4, e7, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[168], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 429, e2, e4, e6, e8, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[429], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 366, e2, e4, e6, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[366], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 378, e2, e4, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[378], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 282, e2, e4, e6, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[282], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 366, e4, e2, e8, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[366], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 266, e2, e4, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[266], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 282, e4, e2, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[282], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, b, a, c, 171, e2, e4, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[171], keys, mismatches);

												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 390, e2, e4, e6, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[390], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 300, e2, e4, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[300], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 307, e2, e4, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[307], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 198, e2, e4, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[198], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 310, e2, e4, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[310], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 201, e2, e4, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[201], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 208, e2, e4, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[208], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, b, a, c, 108, e2, e4, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[108], keys, mismatches);
												}
											}
										}
									} 
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 426, e4, e2, e7, e8, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[426], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 375, e4, e2, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[375], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 361, e4, e2, e7, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[361], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 277, e4, e2, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[277], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 363, e4, e2, e7, e8, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[363], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 279, e4, e2, e7, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[279], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 263, e4, e2, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[263], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 168, e4, e2, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[168], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 388, e2, e4, e7, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[388], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 305, e2, e4, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[305], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 298, e2, e4, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[298], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 196, e2, e4, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[196], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 305, e4, e2, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[305], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 206, e2, e4, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[206], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 196, e4, e2, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[196], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, b, a, c, 106, e2, e4, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[106], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 390, e4, e2, e8, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[390], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 310, e4, e2, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[310], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 307, e4, e2, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[307], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 208, e4, e2, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[208], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 300, e4, e2, e8, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[300], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 201, e4, e2, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[201], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 198, e4, e2, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[198], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 108, e4, e2, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[108], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 325, e2, e4, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[325], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 223, e2, e4, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[223], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 221, e2, e4, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[221], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 122, e2, e4, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[122], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 223, e4, e2, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[223], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 125, e2, e4, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[125], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 122, e4, e2, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[122], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E5={A,B,C}
													keys = generate_labels(mismatches, root, b, a, c, 54, e2, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[54], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
						else  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 409, e2, e4, e7, e6, e8, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[409], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 337, e2, e4, e7, e6, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[337], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 336, e2, e4, e7, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[336], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 237, e2, e4, e7, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[237], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 337, e4, e2, e7, e8, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[337], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 240, e2, e4, e7, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[240], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 237, e4, e2, e7, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[237], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, a, c, 136, e2, e4, e7, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[136], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 353, e2, e4, e7, e6, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[353], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 253, e2, e4, e7, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[253], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 252, e2, e4, e7, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[252], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 146, e2, e4, e7, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[146], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 269, e2, e4, e7, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[269], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 158, e2, e4, e7, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[158], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 157, e2, e4, e7, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[157], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, b, a, c, 71, e2, e4, e7, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[71], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 356, e2, e4, e6, e8, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[356], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 256, e2, e4, e6, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[256], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 272, e2, e4, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[272], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 161, e2, e4, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[161], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 256, e4, e2, e8, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[256], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 149, e2, e4, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[149], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 161, e4, e2, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[161], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, b, a, c, 74, e2, e4, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[74], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 291, e2, e4, e6, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[291], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 179, e2, e4, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[179], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 186, e2, e4, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[186], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 89, e2, e4, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[89], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 189, e2, e4, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[189], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 92, e2, e4, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[92], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 99, e2, e4, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[99], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, b, a, c, 37, e2, e4, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[37], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 353, e4, e2, e7, e8, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[353], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 269, e4, e2, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[269], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 252, e4, e2, e7, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[252], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 157, e4, e2, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[157], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 253, e4, e2, e7, e8, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[253], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 158, e4, e2, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[158], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 146, e4, e2, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[146], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 71, e4, e2, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[71], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 290, e2, e4, e7, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[290], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 185, e2, e4, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[185], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 178, e2, e4, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[178], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 88, e2, e4, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[88], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 185, e4, e2, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[185], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 98, e2, e4, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[98], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 88, e4, e2, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[88], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, b, a, c, 36, e2, e4, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[36], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 291, e4, e2, e8, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[291], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 189, e4, e2, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[189], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 186, e4, e2, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[186], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 99, e4, e2, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[99], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 179, e4, e2, e8, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[179], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 92, e4, e2, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[92], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 89, e4, e2, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[89], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 37, e4, e2, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[37], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 216, e2, e4, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[216], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 115, e2, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[115], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 114, e2, e4, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[114], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 46, e2, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[46], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 115, e4, e2, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[115], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 49, e2, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[49], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E4={R,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 46, e4, e2, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[46], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E4={R,B,C}
													keys = generate_labels(mismatches, root, b, a, c, 17, e2, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[17], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
					}
					else  {
						if (found_ijk)  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 410, e2, e6, e7, e8, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[410], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 338, e2, e6, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[338], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 338, e2, e7, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[338], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 238, e2, e6, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[238], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 340, e2, e6, e7, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[340], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 241, e2, e6, e7, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[241], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 241, e2, e7, e6, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[241], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 137, e2, e6, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[137], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 354, e2, e6, e7, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[354], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 254, e2, e7, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[254], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 254, e2, e6, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[254], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 147, e2, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[147], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 270, e2, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[270], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 159, e2, e7, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[159], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 159, e2, e6, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[159], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, a, b, c, 72, e2, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[72], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 357, e2, e6, e8, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[357], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 257, e2, e6, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[257], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 273, e2, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[273], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 162, e2, e6, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[162], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 259, e2, e6, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[259], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 150, e2, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[150], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 164, e2, e6, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[164], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 75, e2, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[75], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 292, e2, e6, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[292], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 180, e2, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[180], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 187, e2, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[187], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 90, e2, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[90], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 190, e2, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[190], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 93, e2, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[93], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 100, e2, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[100], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, a, b, c, 38, e2, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[38], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 357, e2, e7, e8, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[357], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 273, e2, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[273], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 257, e2, e7, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[257], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 162, e2, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[162], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 259, e2, e7, e8, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[259], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 164, e2, e7, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[164], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 150, e2, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[150], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, a, c, 75, e2, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[75], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 292, e2, e7, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[292], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 187, e2, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[187], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 180, e2, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[180], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 90, e2, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[90], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 190, e2, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[190], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 100, e2, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[100], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 93, e2, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[93], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, b, a, c, 38, e2, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[38], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 294, e2, e8, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[294], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 192, e2, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[192], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 192, e2, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[192], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 102, e2, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[102], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 182, e2, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[182], keys, mismatches);

												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 95, e2, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[95], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 95, e2, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[95], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 40, e2, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[40], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 217, e2, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[217], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 116, e2, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[116], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 116, e2, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[116], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 47, e2, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[47], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 118, e2, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[118], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 50, e2, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[50], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E5={A,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 50, e2, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[50], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E5={A,B,C}
													keys = generate_labels(mismatches, root, a, b, c, 18, e2, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[18], keys, mismatches);
												}
											}
										}
									}
								}
							}
						} 
						else  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 333, e2, e6, e7, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[333], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 233, e2, e7, e6, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[233], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 233, e2, e6, e7, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[233], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 132, e2, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[132], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 234, e2, e6, e7, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[234], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 133, e2, e7, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[133], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 133, e2, e6, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[133], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 58, e2, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[58], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 248, e2, e6, e7, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[248], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 141, e2, e7, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[141], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
                                                    keys = generate_labels(mismatches, root, a, b, c, 141, e2, e6, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[141], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 153, e2, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[153], keys, mismatches);

												}
												else  {
													//E2={R,A,B}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 66, e2, e7, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[66], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E6={R,A}, E7={R,B}, E11={B,C}
                                                    keys = generate_labels(mismatches, root, a, b, c, 66, e2, e6, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[66], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 249, e2, e6, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[249], keys, mismatches);														
												}
												else  {
													//E2={R,A,B}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 142, e2, e6, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[142], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 154, e2, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[154], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 67, e2, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[67], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 143, e2, e6, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[143], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 62, e2, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[62], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 68, e2, e6, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[68], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 23, e2, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[23], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 174, e2, e6, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[174], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 79, e2, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[79], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E6={R,A}, E9={A,B}, E11={B,C}
                                                    keys = generate_labels(mismatches, root, a, b, c, 83, e2, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[83], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 84, e2, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[84], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 28, e2, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[28], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 32, e2, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[32], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 249, e2, e7, e8, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[249], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 154, e2, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[154], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 142, e2, e7, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[142], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 67, e2, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[67], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 143, e2, e7, e8, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[143], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 68, e2, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[68], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 62, e2, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[62], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, a, c, 23, e2, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[23], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 174, e2, e7, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[174], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 83, e2, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[83], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E7={R,B}, E9={A,B}, E11={B,C}
                                                    keys = generate_labels(mismatches, root, b, a, c, 79, e2, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[79], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 84, e2, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[84], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 32, e2, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[32], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 28, e2, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[28], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 175, e2, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[175], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 85, e2, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[85], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 85, e2, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[85], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 33, e2, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[33], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 80, e2, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[80], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 29, e2, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[29], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 29, e2, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[29], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 12, e2, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[12], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 112, e2, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[112], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 43, e2, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[43], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E9={A,B}, E11={B,C}
                                                    keys = generate_labels(mismatches, root, b, a, c, 43, e2, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[43], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E2={R,A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 44, e2, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[44], keys, mismatches);
												}
												else  {
													//E2={R,A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 15, e2, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[15], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E2={R,A,B}, E11={B,C}
                                    	            keys = generate_labels(mismatches, root, a, b, c, 15, e2, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[15], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			} 
			else  {
				if (found_rik)  {
					if (found_rjk)  {
						if (found_ijk)  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 451, e3, e4, e8, e6, e7, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[451], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 416, e3, e4, e8, e6, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[416], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 416, e4, e3, e8, e7, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[416], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 347, e3, e4, e8, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[347], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 414, e3, e4, e8, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[414], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 344, e3, e4, e8, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[344], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 344, e4, e3, e8, e7, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[344], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 245, e3, e4, e8, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[245], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 429, e3, e4, e6, e7, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[429], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 366, e3, e4, e6, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[366], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 366, e4, e3, e7, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[366], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 266, e3, e4, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[266], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 378, e3, e4, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[378], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 282, e3, e4, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[282], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 282, e4, e3, e7, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[282], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, c, a, b, 171, e3, e4, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[171], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 426, e3, e4, e8, e6, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[426], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 363, e3, e4, e8, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[363], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 375, e3, e4, e8, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[375], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 279, e3, e4, e8, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[279], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 361, e3, e4, e8, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[361], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 263, e3, e4, e8, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[263], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 277, e3, e4, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[277], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 168, e3, e4, e8, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[168], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 390, e3, e4, e6, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[390], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 300, e3, e4, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[300], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 310, e3, e4, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[310], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 201, e3, e4, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[201], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 307, e3, e4, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[307], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 198, e3, e4, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[198], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 208, e3, e4, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[208], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, c, a, b, 108, e3, e4, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[108], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 426, e4, e3, e8, e7, e5, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[426], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 375, e4, e3, e8, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[375], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 363, e4, e3, e8, e7, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[363], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 279, e4, e3, e8, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[279], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 361, e4, e3, e8, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[361], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 277, e4, e3, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[277], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 263, e4, e3, e8, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[263], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, c, b, a, 168, e4, e3, e8, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[168], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 390, e4, e3, e7, e5, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[390], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 310, e4, e3, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[310], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 300, e4, e3, e7, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[300], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 201, e4, e3, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[201], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 307, e4, e3, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[307], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 208, e4, e3, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[208], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 198, e4, e3, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[198], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, c, b, a, 108, e4, e3, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[108], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 388, e3, e4, e8, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[388], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 305, e3, e4, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[305], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 305, e4, e3, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[305], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 206, e3, e4, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[206], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 298, e3, e4, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[298], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 196, e3, e4, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[196], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 196, e4, e3, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[196], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 106, e3, e4, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[106], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 325, e3, e4, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[325], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 223, e3, e4, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[223], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 223, e4, e3, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[223], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 125, e3, e4, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[125], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 221, e3, e4, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[221], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 122, e3, e4, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[122], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 122, e4, e3, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[122], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E5={A,B,C}
													keys = generate_labels(mismatches, root, c, a, b, 54, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[54], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
						else  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 409, e3, e4, e8, e6, e7, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[409], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 337, e3, e4, e8, e6, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[337], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 337, e4, e3, e8, e7, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[337], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 240, e3, e4, e8, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[240], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 336, e3, e4, e8, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[336], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 237, e3, e4, e8, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[237], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 237, e4, e3, e8, e7, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[237], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 136, e3, e4, e8, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[136], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 356, e3, e4, e6, e7, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[356], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 256, e3, e4, e6, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[256], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 256, e4, e3, e7, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[256], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 149, e3, e4, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[149], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 272, e3, e4, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[272], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 161, e3, e4, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[161], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 161, e4, e3, e7, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[161], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, c, a, b, 74, e3, e4, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[74], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 353, e3, e4, e8, e6, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[353], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 253, e3, e4, e8, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[253], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 269, e3, e4, e8, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[269], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 158, e3, e4, e8, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[158], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 252, e3, e4, e8, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[252], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 146, e3, e4, e8, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[146], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 157, e3, e4, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[157], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 71, e3, e4, e8, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[71], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 291, e3, e4, e6, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[291], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 179, e3, e4, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[179], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 189, e3, e4, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[189], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 92, e3, e4, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[92], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 186, e3, e4, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[186], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 89, e3, e4, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[89], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 99, e3, e4, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[99], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, c, a, b, 37, e3, e4, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[37], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 353, e4, e3, e8, e7, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[353], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 269, e4, e3, e8, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[269], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 253, e4, e3, e8, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[253], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 158, e4, e3, e8, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[158], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 252, e4, e3, e8, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[252], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 157, e4, e3, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[157], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 146, e4, e3, e8, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[146], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, c, b, a, 71, e4, e3, e8, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[71], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 291, e4, e3, e7, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[291], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 189, e4, e3, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[189], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 179, e4, e3, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[179], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 92, e4, e3, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[92], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 186, e4, e3, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[186], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 99, e4, e3, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[99], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 89, e4, e3, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[89], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, c, b, a, 37, e4, e3, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[37], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 290, e3, e4, e8, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[290], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 185, e3, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[185], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 185, e4, e3, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[185], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 98, e3, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[98], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 178, e3, e4, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[178], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 88, e3, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[88], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 88, e4, e3, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[88], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 36, e3, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[36], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 216, e3, e4, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[216], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 115, e3, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[115], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 115, e4, e3, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[115], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 49, e3, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[49], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 114, e3, e4, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[114], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 46, e3, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[46], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E4={R,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 46, e4, e3, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[46], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E4={R,B,C}
													keys = generate_labels(mismatches, root, c, a, b, 17, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[17], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
					}
					else  {
						if (found_ijk)  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 410, e3, e6, e8, e7, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[410], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 338, e3, e6, e8, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[338], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 340, e3, e6, e8, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[340], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 241, e3, e6, e8, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[241], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 338, e3, e8, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[338], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 238, e3, e6, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[238], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 241, e3, e8, e6, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[241], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 137, e3, e6, e8, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[137], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 357, e3, e6, e7, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[357], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 257, e3, e6, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[257], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 259, e3, e6, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[259], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 150, e3, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[150], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 273, e3, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[273], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 162, e3, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[162], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 164, e3, e6, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[164], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, a, c, b, 75, e3, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[75], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 354, e3, e6, e8, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[354], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 254, e3, e8, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[254], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 270, e3, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[270], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 159, e3, e8, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[159], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 254, e3, e6, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[254], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 147, e3, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[147], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 159, e3, e6, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[159], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 72, e3, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[72], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 292, e3, e6, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[292], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 180, e3, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[180], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 190, e3, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[190], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 93, e3, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[93], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 187, e3, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[187], keys, mismatches);
												}
												else  { 
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 90, e3, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[90], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 100, e3, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[100], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, a, c, b, 38, e3, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[38], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 357, e3, e8, e7, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[357], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 273, e3, e8, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[273], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 259, e3, e8, e7, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[259], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 164, e3, e8, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[164], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 257, e3, e8, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[257], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 162, e3, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[162], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 150, e3, e8, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[150], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 75, e3, e8, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[75], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 294, e3, e7, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[294], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 192, e3, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[192], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 182, e3, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[182], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 95, e3, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[95], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 192, e3, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[192], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 102, e3, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[102], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 95, e3, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[95], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, a, c, b, 40, e4, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[40], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 292, e3, e8, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[292], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 187, e3, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[187], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 190, e3, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[190], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 100, e3, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[100], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 180, e3, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[180], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 90, e3, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[90], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 93, e3, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[93], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 38, e3, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[38], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 217, e3, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[217], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 116, e3, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[116], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 118, e3, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[118], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 50, e3, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[50], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 116, e3, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[116], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 47, e3, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[47], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E5={A,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 50, e3, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[50], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E5={A,B,C}
													keys = generate_labels(mismatches, root, a, c, b, 18, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[18], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
						else  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 333, e3, e6, e8, e7, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[333], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 233, e3, e8, e6, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[233], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 234, e3, e6, e8, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[234], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 133, e3, e8, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[133], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 233, e3, e6, e8, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[233], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 132, e3, e6, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[132], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 133, e3, e6, e8, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[133], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 58, e3, e6, e8, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[58], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 249, e3, e6, e7, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[249], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 142, e3, e6, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[142], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 143, e3, e6, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[143], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, c, b, 62, e3, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[62], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 154, e3, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[154], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 67, e3, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[67], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 68, e3, e6, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[68], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, a, c, b, 23, e3, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[23], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 248, e3, e6, e8, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[248], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 141, e3, e8, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[141], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 153, e3, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[153], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 66, e3, e8, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[66], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 141, e3, e6, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[141], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 66, e3, e6, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[66], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 174, e3, e6, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[174], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 79, e3, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[79], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 84, e3, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[84], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 28, e3, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[28], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 83, e3, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[83], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 32, e3, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[32], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 249, e3, e8, e7, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[249], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 154, e3, e8, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[154], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 143, e3, e8, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[143], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 68, e3, e8, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[68], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 142, e3, e8, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[142], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 67, e3, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[67], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 62, e3, e8, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[62], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 23, e3, e8, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[23], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 175, e3, e7, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[175], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 85, e3, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[85], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 80, e3, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[80], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 29, e3, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[29], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 85, e3, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[85], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 33, e3, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[33], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 29, e3, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[29], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E7={R,B}
													keys = generate_labels(mismatches, root, a, c, b, 12, e3, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[12], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 174, e3, e8, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[174], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 83, e3, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[83], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 84, e3, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[84], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 32, e3, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[32], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 79, e3, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[79], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 28, e3, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[28], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 112, e3, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[112], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 43, e3, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[43], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 44, e3, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[44], keys, mismatches);
												}
												else  {
													//E3={R,A,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 15, e3, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[15], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E3={R,A,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 43, e3, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[43], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E3={R,A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 15, e3, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[15], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
					}
				}
				else  {
					if (found_rjk)  {
						if (found_ijk)  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 410, e4, e7, e8, e6, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[410], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 340, e4, e7, e8, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[340], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 338, e4, e7, e8, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[338], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 241, e4, e7, e8, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[241], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 338, e4, e8, e7, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[338], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 241, e4, e8, e7, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[241], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 238, e4, e7, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[238], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 137, e4, e7, e8, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[137], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 357, e4, e7, e6, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[357], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 259, e4, e7, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[259], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 257, e4, e7, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[257], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 150, e4, e7, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[150], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 273, e4, e7, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[273], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 164, e4, e7, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[164], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 162, e4, e7, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[162], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, b, c, a, 75, e4, e7, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[75], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 357, e4, e8, e6, e5, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[357], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 259, e4, e8, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[259], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 273, e4, e8, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[273], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 164, e4, e8, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[164], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 257, e4, e8, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[257], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 150, e4, e8, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[150], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 162, e4, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[162], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, c, b, a, 75, e4, e8, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[75], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 294, e4, e6, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[294], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 182, e4, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[182], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 192, e4, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[192], keys, mismatches);

												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 95, e4, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[95], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 192, e4, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[192], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 95, e4, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[95], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 102, e4, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[102], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, b, c, a, 40, e4, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[40], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 354, e4, e7, e8, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[354], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 270, e4, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[270], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 254, e4, e8, e7, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[254], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 159, e4, e8, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[159], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 254, e4, e7, e8, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[254], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 159, e4, e7, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[159], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 147, e4, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[147], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 72, e4, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[72], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 292, e4, e7, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[292], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 190, e4, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[190], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 180, e4, e7, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[180], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 93, e4, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[93], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 187, e4, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[187], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 100, e4, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[100], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 90, e4, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[90], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, b, c, a, 38, e4, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[38], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 292, e4, e8, e5, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[292], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 190, e4, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[190], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 187, e4, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[187], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 100, e4, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[100], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 180, e4, e8, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[180], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 93, e4, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[93], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 90, e4, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[90], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, c, b, a, 38, e4, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[38], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 217, e4, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[217], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 118, e4, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[118], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 116, e4, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[116], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 50, e4, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[50], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 116, e4, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[116], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 50, e4, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[50], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E5={A,B,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 47, e4, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[47], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E5={A,B,C}
													keys = generate_labels(mismatches, root, b, c, a, 18, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[18], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
						else  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 333, e4, e7, e8, e6, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[333], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 234, e4, e7, e8, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[234], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 233, e4, e8, e7, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[233], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 133, e4, e8, e7, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[133], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 233, e4, e7, e8, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[233], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 133, e4, e7, e8, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[133], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 132, e4, e7, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[132], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 58, e4, e7, e8, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[58], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 249, e4, e7, e6, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[249], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 143, e4, e7, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[143], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 142, e4, e7, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[142], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, c, a, 62, e4, e7, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[62], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 154, e4, e7, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[154], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 68, e4, e7, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[68], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 67, e4, e7, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[67], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, b, c, a, 23, e4, e7, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[23], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 249, e4, e8, e6, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[249], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 143, e4, e8, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[143], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 154, e4, e8, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[154], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 68, e4, e8, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[68], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 142, e4, e8, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[142], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 62, e4, e8, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[62], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 67, e4, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[67], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, c, b, a, 23, e4, e8, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[23], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 175, e4, e6, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[175], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 80, e4, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[80], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 85, e4, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[85], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 29, e4, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[29], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 85, e4, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[85], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 29, e4, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[29], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 33, e4, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[33], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, b, c, a, 12, e4, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[12], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 248, e4, e7, e8, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[248], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 153, e4, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[153], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 141, e4, e8, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[141], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 66, e4, e8, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[66], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 141, e4, e7, e8, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[141], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 66, e4, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[66], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 174, e4, e7, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[174], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 84, e4, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[84], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 79, e4, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[79], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 28, e4, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[28], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 83, e4, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[83], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 32, e4, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[32], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 174, e4, e8, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[174], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, b, a, 84, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[84], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 83, e4, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[83], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 32, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[32], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 79, e4, e8, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[79], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 28, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[28], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 112, e4, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[112], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 44, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[44], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E4={R,B,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 43, e4, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[43], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 15, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[15], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E4={R,B,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 43, e4, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[43], keys, mismatches);
												}
												else  {
													//E4={R,B,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 15, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[15], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
					}
					else  {
						if (found_ijk)  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
                                                    keys = generate_labels(mismatches, root, a, b, c, 334, e6, e7, e8, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[334], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
                                                    keys = generate_labels(mismatches, root, a, b, c, 235, e6, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[235], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 235, e7, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[235], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 134, e6, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[134], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 235, e8, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[235], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 134, e6, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[134], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 134, e7, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[134], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 59, e6, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[59], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 250, e6, e7, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[250], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 144, e7, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[144], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 144, e6, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[144], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 63, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[63], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 155, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[155], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 69, e7, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[69], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 69, e6, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[69], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E6={R,A}, E7={R,B}
													keys = generate_labels(mismatches, root, a, b, c, 24, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[24], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 250, e6, e8, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[250], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 144, e8, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[144], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 155, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[155], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 69, e8, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[69], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 144, e6, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[144], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 63, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[63], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 69, e6, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[69], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E6={R,A}, E8={R,C}
													keys = generate_labels(mismatches, root, a, c, b, 24, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[24], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 176, e6, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[176], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 81, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[81], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 86, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[86], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E6={R,A}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 30, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[30], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 86, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[86], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E6={R,A}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 30, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[30], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E5={A,B,C}, E6={R,A}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 34, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[34], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E6={R,A}
													keys = generate_labels(mismatches, root, a, b, c, 13, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[13], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 250, e7, e8, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[250], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 155, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[155], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 144, e8, e7, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[144], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 69, e8, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[69], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 144, e7, e8, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[144], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 69, e7, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[69], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 63, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[63], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, b, c, a, 24, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[24], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 176, e7, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[176], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 86, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[86], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 81, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[81], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E7={R,B}, E9={A,B}
													keys = generate_labels(mismatches, root, b, a, c, 30, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[30], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 86, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[86], keys, mismatches);
												
												}
												else  {
													//E5={A,B,C}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 34, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[34], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E5={A,B,C}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 30, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[30], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E7={R,B}
													keys = generate_labels(mismatches, root, b, a, c, 13, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[13], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 176, e8, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[176], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 86, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[86], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													 //E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 86, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[86], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 34, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[34], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 81, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[81], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 30, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[30], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E5={A,B,C}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 30, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[30], keys, mismatches);
												}
												else  {
													//E5={A,B,C}, E8={R,C}
													keys = generate_labels(mismatches, root, c, a, b, 13, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[13], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
						else  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 232, e6, e7, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[232], keys, mismatches);
												}
												else  {
													//E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 131, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[131], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 131, e7, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[131], keys, mismatches);
												}
												else  {
													//E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, a, b, c, 57, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[57], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 131, e8, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[131], keys, mismatches);
												}
												else  {
													//E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, a, c, b, 57, e6, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[57], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 57, e7, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[57], keys, mismatches);
												}
												else  {
													//E6={R,A}, E7={R,B}, E8={R,C}
													keys = generate_labels(mismatches, root, a, b, c, 21, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[21], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 140, e6, e7, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[140], keys, mismatches);
												}
												else  {
													//E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 61, e7, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[61], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 61, e6, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[61], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 65, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[65], keys, mismatches);
												}
												else  {
													//E6={R,A}, E7={R,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 22, e7, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[22], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E6={R,A}, E7={R,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 22, e6, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[22], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 140, e6, e8, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[140], keys, mismatches);
												}
												else  {
													//E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 61, e8, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[61], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 65, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[65], keys, mismatches);
												}
												else  {
													//E6={R,A}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, a, b, 22, e8, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[22], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 61, e6, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[61], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E6={R,A}, E8={R,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 22, e6, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[22], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 78, e6, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[78], keys, mismatches);
												}
												else  {
													//E6={R,A}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, a, b, c, 26, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[26], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E6={R,A}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 27, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[27], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E6={R,A}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, a, c, b, 27, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[27], keys, mismatches);
												}
											}
										}
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 140, e7, e8, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[140], keys, mismatches);
												}
												else  {
													//E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 65, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[65], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 61, e8, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[61], keys, mismatches);
												}
												else  {
													//E7={R,B}, E8={R,C}, E9={A,B}
													keys = generate_labels(mismatches, root, c, b, a, 22, e8, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[22], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 61, e7, e8, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[61], keys, mismatches);
												}
												else  {
													//E7={R,B}, E8={R,C}, E10={A,C}
													keys = generate_labels(mismatches, root, b, c, a, 22, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[22], keys, mismatches);
												}
											}
										}
									}
									else  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 78, e7, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[78], keys, mismatches);
												}
												else  {
													//E7={R,B}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, b, a, c, 27, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[27], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E7={R,B}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, b, a, c, 26, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[26], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E7={R,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, b, c, a, 27, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[27], keys, mismatches);
												}
											}
										}
									}
								}
								else  {
									if (found_rk)  {
										if (found_ij)  {
											if (found_ik)  {
												if (found_jk)  {
													//E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 78, e8, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[78], keys, mismatches);
												}
												else  {
													//E8={R,C}, E9={A,B}, E10={A,C}
													keys = generate_labels(mismatches, root, c, a, b, 27, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[27], keys, mismatches);
												}
											}
											else  {
												if (found_jk)  {
													//E8={R,C}, E9={A,B}, E11={B,C}
													keys = generate_labels(mismatches, root, c, b, a, 27, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[27], keys, mismatches);
												}
											}
										}
										else  {
											if (found_ik)  {
												if (found_jk)  {
													//E8={R,C}, E10={A,C}, E11={B,C}
													keys = generate_labels(mismatches, root, c, a, b, 26, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[26], keys, mismatches);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	} // End of if (HYPERGRAPHLETS_4)
}

// Count induced vertex- and edge-labeled hypergraphlets for a given root.
vector<map<Key,MismatchInfo> > HyperKernels::get_induced_hypergraphlets_counts(SimpleHypergraph &hg, unsigned hg_root)  {
	map<Key,MismatchInfo> T;
    vector<map<Key,MismatchInfo> > hash(HYPERGRAPHLETS_TYPES, T);
    vector<set<unsigned> > neighbors = hg.get_neighbors();
	vector<vector<Key> > mismatches;
	vector<Key> keys;
	vector<unsigned> root_incident_edges, i_incident_edges, j_incident_edges, k_incident_edges;
	vector<bool> nodes_visited(hg.node_labels.size(), false);
   
   	bool found_r(false), found_i(false), found_j(false), found_k(false);
	bool found_ri(false), found_rj(false), found_rk(false), found_ij(false), found_ik(false), found_jk(false), found_rij(false), found_rik(false), found_rjk(false), found_ijk(false), found_rijk(false);
    unsigned i, j, k;
    char root, a, b, c;
	vector<char> e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11;
    vector<char> ZERO_VECTOR;
    set<unsigned> hyperedges;
    vector<unsigned>::iterator vit;
    set<unsigned>::iterator hit; 
 
    // Set root node R
    root = hg.node_labels[hg_root];
	root_incident_edges = hg.get_incident_edges(hg_root);
	nodes_visited[hg_root] = true;
    if (HYPERGRAPHLETS_1)  {
        //E1={R}
        keys = generate_labels(mismatches, root, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, 0, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
		increment_match_hash(hash[0], keys, mismatches);
    }
    for (set<unsigned>::iterator it_nr = neighbors[hg_root].begin(); it_nr != neighbors[hg_root].end(); it_nr++)  {
		i = *it_nr;
    	hyperedges.clear();
		e1.clear();
		a = hg.node_labels[i];
		i_incident_edges = hg.get_incident_edges(i);
		nodes_visited[i] = true;
		found_ri = false;
		vit = root_incident_edges.begin();
		hyperedges.insert(vit, vit + root_incident_edges.size());
		vit = i_incident_edges.begin();
		hyperedges.insert(vit, vit + i_incident_edges.size());
		
		for (hit = hyperedges.begin(); hit != hyperedges.end(); hit++)  {
			unsigned e0_ = *hit;
			found_r = false;
			found_i = false;
			for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
				if (hg.vertex_set[e0_][ii] == hg_root)  {
					found_r = true;
				}
				else if (hg.vertex_set[e0_][ii] == i)  {
					found_i = true;
				}
			}
			if (found_r && found_i)  {
				found_ri = true;
				insert_hyperedge_label(hg.edge_labels[e0_], e1);
			}
		}
		// Insert 2-hypergraphlets
		insert_induced_hypergraphlets(hash, root, a, e1, found_ri);
		
		vector<bool> nodes_visited_ext(nodes_visited);
        vector<unsigned> neighbors_ri;
        set_union(it_nr, neighbors[hg_root].end(), neighbors[i].begin(), neighbors[i].end(), std::back_inserter(neighbors_ri));
		
		for (vector<unsigned>::iterator it_nri = neighbors_ri.begin(); it_nri != neighbors_ri.end(); it_nri++)  {
			j = *it_nri;
			if (nodes_visited_ext[j])
				continue;
            else
            	nodes_visited_ext[j] = true;

			hyperedges.clear();
			e1.clear();
			e2.clear();
			e3.clear();
			e4.clear();
			b = hg.node_labels[j];
			j_incident_edges = hg.get_incident_edges(j);
			found_rij = false;
			found_ri = false;
			found_rj = false;
			found_ij = false;
			vit = root_incident_edges.begin();
  			hyperedges.insert(vit, vit + root_incident_edges.size());
			vit = i_incident_edges.begin();
  			hyperedges.insert(vit, vit + i_incident_edges.size());
			vit = j_incident_edges.begin();
  			hyperedges.insert(vit, vit + j_incident_edges.size());
  			
			for (hit = hyperedges.begin(); hit != hyperedges.end(); hit++)  {
				unsigned e0_ = *hit;
				found_r = false;
				found_i = false;
				found_j = false;
				for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
					if (hg.vertex_set[e0_][ii] == hg_root)  {
						found_r = true;
					}
					else if (hg.vertex_set[e0_][ii] == i)  {
						found_i = true;
					}
					else if (hg.vertex_set[e0_][ii] == j)  {
						found_j = true;
					}
				}
				if (found_r && found_i && found_j)  {
					found_rij = true;
					insert_hyperedge_label(hg.edge_labels[e0_], e1);
				}
				else if (found_r && found_i && !found_j)  {
					found_ri = true;
					insert_hyperedge_label(hg.edge_labels[e0_], e2);
				}
				else if (found_r && !found_i && found_j)  {
					found_rj = true;
					insert_hyperedge_label(hg.edge_labels[e0_], e3);
				}
				else if (!found_r && found_i && found_j)  {
					found_ij = true;
					insert_hyperedge_label(hg.edge_labels[e0_], e4);
				}
			}
			// Insert 3-hypergraphlets
			insert_induced_hypergraphlets(hash, root, a, b, e1, e2, e3, e4, found_rij, found_ri, found_rj, found_ij);

            std::vector<unsigned> neighbors_rij;
            std::set_union(it_nri, neighbors_ri.end(), neighbors[j].begin(), neighbors[j].end(), std::back_inserter(neighbors_rij));

            for ( vector<unsigned>::iterator it_nrij = neighbors_rij.begin(); it_nrij != neighbors_rij.end(); it_nrij++)  {
                k = *it_nrij;
                if (nodes_visited_ext[k])
                	continue;			

				hyperedges.clear();
				e1.clear();
				e2.clear();
				e3.clear();
				e4.clear();
				e5.clear();
				e6.clear();
				e7.clear();
				e8.clear();
				e9.clear();
				e10.clear();
				e11.clear();
				c = hg.node_labels[k];
				k_incident_edges = hg.get_incident_edges(k);
				found_rijk = false;
				found_rij = false;
				found_rik = false;
				found_rjk = false;
				found_ijk = false;
				found_ri = false;
				found_rj = false;
				found_rk = false;
				found_ij = false;
				found_ik = false;
				found_jk = false;
				vit = root_incident_edges.begin();
				hyperedges.insert(vit, vit + root_incident_edges.size());
				vit = i_incident_edges.begin();
				hyperedges.insert(vit, vit + i_incident_edges.size());
				vit = j_incident_edges.begin();
				hyperedges.insert(vit, vit + j_incident_edges.size());
				vit = k_incident_edges.begin();
				hyperedges.insert(vit, vit + k_incident_edges.size());
				
				for (hit = hyperedges.begin(); hit != hyperedges.end(); hit++)  {
					unsigned e0_ = *hit;
					found_r = false;
					found_i = false;
					found_j = false;
					found_k = false;
					for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
						if (hg.vertex_set[e0_][ii] == hg_root)  {
							found_r = true;
						}
						else if (hg.vertex_set[e0_][ii] == i)  {
							found_i = true;
						}
						else if (hg.vertex_set[e0_][ii] == j)  {
							found_j = true;
						}
						else if (hg.vertex_set[e0_][ii] == k)  {
							found_k = true;
						}
					}
					if (found_r && found_i && found_j && found_k)  {
						found_rijk = true;
						insert_hyperedge_label(hg.edge_labels[e0_], e1);
					}
					else if (found_r && found_i && found_j && !found_k)  {
						found_rij = true;
						insert_hyperedge_label(hg.edge_labels[e0_], e2);
					}
					else if (found_r && found_i && !found_j && found_k)  {
						found_rik = true;
						insert_hyperedge_label(hg.edge_labels[e0_], e3);
					}
					else if (found_r && !found_i && found_j && found_k)  {
						found_rjk = true;
						insert_hyperedge_label(hg.edge_labels[e0_], e4);
					}
					else if (found_r && found_i && !found_j && !found_k)  {
						found_ri = true;
						insert_hyperedge_label(hg.edge_labels[e0_], e6);
					}
					else if (found_r && !found_i && found_j && !found_k)  {
						found_rj = true;
						insert_hyperedge_label(hg.edge_labels[e0_], e7);
					}
					else if (found_r && !found_i && !found_j && found_k)  {
						found_rk = true;
						insert_hyperedge_label(hg.edge_labels[e0_], e8);
					}
					else if (!found_r && found_i && found_j && found_k)  {
						found_ijk = true;
						insert_hyperedge_label(hg.edge_labels[e0_], e5);
					}
					else if (!found_r && found_i && found_j && !found_k)  {
						found_ij = true;
						insert_hyperedge_label(hg.edge_labels[e0_], e9);
					}
					else if (!found_r && found_i && !found_j && found_k)  {
						found_ik = true;
						insert_hyperedge_label(hg.edge_labels[e0_], e10);
					}
					else if (!found_r && !found_i && found_j && found_k)  {
						found_jk = true;
						insert_hyperedge_label(hg.edge_labels[e0_], e11);
					}
				}
				// Insert 4-hypergraphlets
				insert_induced_hypergraphlets(hash, root, a, b, c, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, found_rijk, found_rij, found_rik, found_rjk, found_ijk, found_ri, found_rj, found_rk, found_ij, found_ik, found_jk);
    		}
		}
	}

    if (NORMALIZE)
        normalize_spectral(hash);

	return hash;
}

// Count vertex- and edge-labeled hypergraphlets starting from root.
vector<map<Key,MismatchInfo> > HyperKernels::get_hypergraphlets_counts(SimpleHypergraph &hg, unsigned hg_root)  {
	map<Key,MismatchInfo> T;
    vector<map<Key,MismatchInfo> > hash(HYPERGRAPHLETS_TYPES, T);
    vector<unsigned> dist = hg.breadth_first_sort(hg_root);
	vector<vector<Key> > mismatches;
	vector<Key> keys;
    vector<unsigned> root_incident_edges, i_incident_edges, j_incident_edges, k_incident_edges;
   
    bool found_ri(false), found_rj(false), found_rk(false), found_ij(false), found_ik(false), found_jk(false), found_rij(false), found_rik(false), found_rjk(false), found_ijk(false), found_rijk(false);
    bool found_ri_(false), found_rj_(false), found_rk_(false), found_rij_(false), found_rik_(false), found_rjk_(false);
    unsigned i, j, k;
    char root, a, b, c;
	vector<char> e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11;
    vector<char> ZERO_VECTOR;
    
    // Set root node R
    root = hg.node_labels[hg_root];

    if (HYPERGRAPHLETS_1)  {
        //E1={R}
        keys = generate_labels(mismatches, root, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, 0, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
		increment_match_hash(hash[0], keys, mismatches);
    }

	root_incident_edges = hg.get_incident_edges(hg_root);
    for (unsigned edge_index0=0; edge_index0 < root_incident_edges.size(); edge_index0++)  {
    	unsigned e0_ = root_incident_edges[edge_index0];
    	for (unsigned i_=0; i_<hg.vertex_set[e0_].size(); i_++)  {
        	if (hg.vertex_set[e0_].size() == 2)  {
                i = hg.vertex_set[e0_][i_];
				if (i == hg_root)
					continue;
				e1.clear();
				e2.clear();
				e3.clear();
				e4.clear();
				e5.clear();
				e6.clear();
				e7.clear();
				e8.clear();
				e9.clear();
				e10.clear();
				e11.clear();
				a = hg.node_labels[i];
				insert_hyperedge_label(hg.edge_labels[e0_], e1);

				#if ENABLE_INDUCED_HYPERGRAPHLETS == 1 //JLM: Add check to avoid double counting edge e={hg_root, i}
				for (unsigned edge_index1=0; edge_index1 < root_incident_edges.size(); edge_index1++)  {
					unsigned e1_ = root_incident_edges[edge_index1];
					for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
						if (hg.vertex_set[e1_].size() > 2 && hg.vertex_set[e1_][ii] == i)  {
							insert_hyperedge_label(hg.edge_labels[e1_], e1);
						}
					}
				}
				#endif
                if (HYPERGRAPHLETS_2)  {
                	//E1={R,A}
                	keys = generate_labels(mismatches, root, a, ZERO_CHAR, ZERO_CHAR, 1, e1, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                	increment_match_hash(hash[1], keys, mismatches);
                }
                
                // Case 011, Type 1
                for (unsigned edge_index1=0; edge_index1 < edge_index0; edge_index1++)  {
                    unsigned e1_ = root_incident_edges[edge_index1];
                    for (unsigned ii_=0; ii_<hg.vertex_set[e1_].size(); ii_++)  {
                        if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii_] != hg_root)  {
                            j = hg.vertex_set[e1_][ii_];
                            if (j == i)
								continue;
							e2.clear();
							e5.clear();
							b = hg.node_labels[j];
							insert_hyperedge_label(hg.edge_labels[e1_], e2);
                            
                            found_ij = false;
                            found_rij_ = false;
                            i_incident_edges = hg.get_incident_edges(i);
                            j_incident_edges = hg.get_incident_edges(j);
                            #if ENABLE_INDUCED_HYPERGRAPHLETS == 1 //JLM: Add check to avoid double counting edge e={hg_root, j}
							for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  { 
								unsigned e2_ = root_incident_edges[edge_index2];
								for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
									if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
										insert_hyperedge_label(hg.edge_labels[e2_], e2);
									}
								}
							}
							#endif
                            if (i_incident_edges.size() < j_incident_edges.size())  {
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
										#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
										#endif
									}
                                }
                            }
                            else  {
                                for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = j_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == i)  {
                                            found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == i)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
										#endif
                                    }
								}
							}
                        	for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rij_); edge_index2++)  {
								unsigned e2_ = root_incident_edges[edge_index2];
								for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rij_); ii++)  {
                                    #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                    if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == i)
                                    #else
                                    if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == i)
                                    #endif
                                    {
                                        for (unsigned iii=0; (iii<hg.vertex_set[e2_].size() && !found_rij_); iii++)  {
                                            if (hg.vertex_set[e2_][iii] == j)  {
												found_rij_ = true;
											}
										}
									}
								}
							}
							if (found_rij_)
                            	continue;
                            if (HYPERGRAPHLETS_3)  {
                                if (!found_rij_)  {
                                    if (found_ij)  {
                                        //E1={R,A}, E2={R,B}, E5={A,B}
                                        keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 7, e1, e2, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                        increment_match_hash(hash[7], keys, mismatches);
                                    }
                                    else  {
                                        //E1={R,A}, E2={R,B}
                                        keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 4, e1, e2, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                        increment_match_hash(hash[4], keys, mismatches);
                                    }
                                }
                            }
                            // Case 0111
                            for (unsigned edge_index2=0; edge_index2 < edge_index1; edge_index2++)  {
                            	unsigned e2_ = root_incident_edges[edge_index2];
                                for (unsigned iii_=0; iii_<hg.vertex_set[e2_].size(); iii_++)  {
                                    if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][iii_] != hg_root)  {
										k = hg.vertex_set[e2_][iii_];
										if (k == i || k == j)
											continue;
										e3.clear();
										e4.clear();
										e5.clear();	
										e6.clear();
										e7.clear();
										c = hg.node_labels[k];
										insert_hyperedge_label(hg.edge_labels[e2_], e3);

										found_ij = false;
                                        found_ik = false;
                                        found_jk = false;
                                        found_rik_ = false;
                                        found_rjk_ = false;
                                        found_ijk = false;
                                        found_rijk = false;
                                    	k_incident_edges = hg.get_incident_edges(k);
                                    	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1 //JLM: Add check to avoid double counting edge e={hg_root, k}
										for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  { 
											unsigned e3_ = root_incident_edges[edge_index3];
											for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
												if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == k)  {
													insert_hyperedge_label(hg.edge_labels[e3_], e3);
												}
											}
										}
										#endif
                                        for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
                                        	unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                            	if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == j)  {
													found_ij = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e5);
												}
                                        		#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == j)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < k_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = k_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_ij = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e5); 
                                                }
                                                #endif
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                                if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)  {
													found_ik = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e6);
                                                }
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < j_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = j_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_ik = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e6);
                                                }
                                                #endif
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = j_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                                if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)  {
													found_jk = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e7);
                                                }
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < i_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = i_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_jk = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e7);
                                                }
                                                #endif
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rik_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rik_); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == i)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 3 && hg.vertex_set[e3_][ii] == i)
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rik_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rjk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rjk_); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 3 && hg.vertex_set[e3_][ii] == j)
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rjk_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
										for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                bool valid_hyperedge_decomposition(true);
                                                for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                    unsigned e4_ = root_incident_edges[edge_index4];
                                                    if (e3_ == e4_)  {
                                                        valid_hyperedge_decomposition = false;
                                                        break;
                                                    }
                                                }
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j && valid_hyperedge_decomposition)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 3 && hg.vertex_set[e3_][ii] == j)
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_ijk = true;
															insert_hyperedge_label(hg.edge_labels[e3_], e4);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rijk); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rijk); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 4 && hg.vertex_set[e3_][ii] == i)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 4 && hg.vertex_set[e3_][ii] == i)
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == j)  {
                                                            for (unsigned iiii=0; iiii<hg.vertex_set[e3_].size(); iiii++)  {
																if (hg.vertex_set[e3_][iiii] == k)  {
																	found_rijk = true;
																}
															}
														}
													}
                                                }
                                            }
                                        }
                                        // Case 0111, Type 1
                                        if (HYPERGRAPHLETS_4)  {
                                            if (!found_rijk && !found_rij_ && !found_rik_ && !found_rjk_)  {
                                                if (found_ijk) {
                                                    if (found_ij)  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 334, e1, e2, e3, e4, e5, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[334], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 235, e1, e2, e3, e4, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[235], keys, mismatches);
                                                            }
                                                        }
                                                        else  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, b, a, c, 235, e2, e1, e3, e4, e5, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[235], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E5={A,B}
                                                                keys = generate_labels(mismatches, root, a, b, c, 134, e1, e2, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[134], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                    else  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E6={A,C}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, c, a, b, 235, e3, e1, e2, e4, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[235], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E6={A,C}
                                                                keys = generate_labels(mismatches, root, a, c, b, 134, e1, e3, e2, e4, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[134], keys, mismatches);
                                                            }
                                                        }
                                                        else  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, b, c, a, 134, e2, e3, e1, e4, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[134], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 59, e1, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[59], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                }
                                                else  {
                                                    if (found_ij)  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E5={A,B}, E6={A,C}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 232, e1, e2, e3, e5, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[232], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E5={A,B}, E6={A,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 131, e1, e2, e3, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[131], keys, mismatches);
                                                            }
                                                        }
                                                        else  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E5={A,B}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, b, a, c, 131, e2, e1, e3, e5, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[131], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E5={A,B}
                                                                keys = generate_labels(mismatches, root, a, b, c, 57, e1, e2, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[57], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                    else  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E6={A,C}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, c, a, b, 131, e3, e1, e2, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[131], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E6={A,C}
                                                                keys = generate_labels(mismatches, root, a, c, b, 57, e1, e3, e2, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[57], keys, mismatches);
                                                            }
                                                        }
                                                        else  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, b, c, a, 57, e2, e3, e1, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[57], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 21, e1, e2, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[21], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
									}
								}
							}
						}
					}
				}
				
                // Case 011, Type 2
                for (unsigned edge_index1=0; edge_index1 < root_incident_edges.size(); edge_index1++)  {
                    unsigned e1_ = root_incident_edges[edge_index1];
                    for (unsigned ii_=0; ii_<hg.vertex_set[e1_].size(); ii_++)  {
                        if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii_] != hg_root)  {
							j = hg.vertex_set[e1_][ii_];
							if (j == i)
								continue;
                            e2.clear();
							b = hg.node_labels[j];
							insert_hyperedge_label(hg.edge_labels[e1_], e2);

							found_ij = false;
                            found_rij_ = false;
                            #if ENABLE_INDUCED_HYPERGRAPHLETS == 1 //JLM: Add check to avoid double counting edge e={hg_root, j}
							for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  { 
								unsigned e2_ = root_incident_edges[edge_index2];
								for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
									if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
										insert_hyperedge_label(hg.edge_labels[e2_], e2);
									}
								}
							}
							#endif
                            for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rij_); edge_index2++)  {
                                unsigned e2_ = root_incident_edges[edge_index2];
                                for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rij_); ii++)  {
									#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == i)
                                    #else
                                    if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == i)
                                    #endif
                                    {
                                        for (unsigned iii=0; (iii<hg.vertex_set[e2_].size() && !found_rij_); iii++)  {
                                            if (hg.vertex_set[e2_][iii] == j)  {
												found_rij_ = true;
											}
										}
									}
								}
							}
							if (found_rij_)
								continue;
                            // Case 0112
                            i_incident_edges = hg.get_incident_edges(i); 
                            for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                                unsigned e2_ = i_incident_edges[edge_index2];
								bool valid = true;
								for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
									unsigned e3_ = root_incident_edges[edge_index3];
									if (e2_ == e3_)
										valid = false;
								}
								if (!valid)
									continue;
                                for (unsigned iii_=0; iii_<hg.vertex_set[e2_].size(); iii_++)  {
                                    #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                    if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][iii_] != i)
                                    #else
                                    if ((hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_].size() <= 3) && hg.vertex_set[e2_][iii_] != i)
                                    #endif
                                    {
										k = hg.vertex_set[e2_][iii_];
                                        if (k == hg_root || k == j)
                                            continue;
                                        e3.clear();
                                        e4.clear();
                                        e5.clear();
                                        e6.clear();
										c = hg.node_labels[k];

                                        unsigned e_ijk(UINT_MAX), e_ik(UINT_MAX);
                                        found_rk_ = false;
                                        found_ij = false;
                                        found_ik = false;
                                        found_jk = false;
                                        found_rik_ = false;
                                        found_rjk_ = false;
                                        found_ijk = false;
                                        found_rijk = false;
                                        j_incident_edges = hg.get_incident_edges(j);
                                        k_incident_edges = hg.get_incident_edges(k);
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rk_); ii++)  {
                                            	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == k)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)
                                                #endif
                                                {
                                                    found_rk_ = true;
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
                                        	unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                            	if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == j)  {
													found_ij = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e4);
												}
                                        		#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == j)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < k_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = k_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_ij = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e4);
                                                }
                                                #endif
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
												if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)  {
													found_ik = true;
                                                    e_ik = edge_index3;
													insert_hyperedge_label(hg.edge_labels[e3_], e5);
                                                }
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < j_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = j_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_ik = true;
													e_ik = edge_index3;
													insert_hyperedge_label(hg.edge_labels[e3_], e5);
                                                }
                                                #endif
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = j_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
												if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)  {
												    found_jk = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e6);
                                                }
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < i_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = i_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_jk = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e6);
                                                }
                                                #endif
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rik_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rik_); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == i)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 3 && hg.vertex_set[e3_][ii] == i)
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rik_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rjk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rjk_); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 3 && hg.vertex_set[e3_][ii] == j)
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rjk_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
											unsigned e3_ = i_incident_edges[edge_index3];
											for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                bool valid_hyperedge_decomposition(true);
                                                for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                    unsigned e4_ = root_incident_edges[edge_index4];
                                                    if (e3_ == e4_)  {
                                                        valid_hyperedge_decomposition = false;
                                                        break;
                                                    }
                                                }
												if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j && valid_hyperedge_decomposition)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 3 && hg.vertex_set[e3_][ii] == j)
                                                #endif
                                                {
													for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
														if (hg.vertex_set[e3_][iii] == k)  {
															found_ijk = true;
                                                            e_ijk = edge_index3;
															insert_hyperedge_label(hg.edge_labels[e3_], e3);
														}
													}
												}
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rijk); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rijk); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 4 && hg.vertex_set[e3_][ii] == i) 
                                                #else
                                                if (hg.vertex_set[e3_].size() == 4 && hg.vertex_set[e3_][ii] == i) 
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == j)  {
                                                            for (unsigned iiii=0; iiii<hg.vertex_set[e3_].size(); iiii++)  {
																if (hg.vertex_set[e3_][iiii] == k)  {
																	found_rijk = true;
																}
															}
														}
													}
                                                }
                                            }
                                        }
                                        if (HYPERGRAPHLETS_4)  {
                                            if (!found_rijk && !found_rij_ && !found_rik_ && !found_rjk_ && !found_rk_ && (edge_index2 == e_ijk || edge_index2 == e_ik))  {
                                                if (found_ijk)  {
                                                    if (found_ij)  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                if (edge_index0 > edge_index1 && edge_index2 == e_ijk)  {
                                                                    //E1={R,A}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={B,C}
                                                                    keys = generate_labels(mismatches, root, a, b, c, 250, e1, e2, e3, e4, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[250], keys, mismatches);
                                                                }
                                                            }
                                                            else  {
                                                                if (edge_index0 > edge_index1 && edge_index2 == e_ijk)  {
                                                                    //E1={R,A}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={A,C}
                                                                    keys = generate_labels(mismatches, root, b, a, c, 144, e2, e1, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                	increment_match_hash(hash[144], keys, mismatches);
                                                                }
                                                            }
                                                        }
                                                        else  {
                                                            if (found_jk)  {
                                                                if (edge_index0 > edge_index1)  {
                                                                    //E1={R,A}, E2={R,B}, E3={A,B,C}, E4={A,B}, E6={B,C}
                                                                    keys = generate_labels(mismatches, root, a, b, c, 144, e1, e2, e3, e4, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[144], keys, mismatches);
                                                                }
                                                            }
                                                            else  {
                                                                if (edge_index0 > edge_index1)  {
                                                                    //E1={R,A}, E2={R,B}, E3={A,B,C}, E4={A,B}
                                                                    keys = generate_labels(mismatches, root, a, b, c, 63, e1, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[63], keys, mismatches);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                if (edge_index0 > edge_index1 && edge_index2 == e_ijk)  {
                                                                    //E1={R,A}, E2={R,B}, E3={A,B,C}, E5={A,C}, E6={B,C}
                                                                    keys = generate_labels(mismatches, root, a, b, c, 155, e1, e2, e3, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[155], keys, mismatches);
                                                                }
                                                            }
                                                            else  {
                                                                if (edge_index0 > edge_index1 && edge_index2 == e_ijk)  {
                                                                    //E1={R,A}, E2={R,B}, E3={A,B,C}, E5={A,C}
                                                                    keys = generate_labels(mismatches, root, b, a, c, 69, e2, e1, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[69], keys, mismatches);
                                                                }
                                                            }
                                                        }
                                                        else  {
                                                            if (found_jk)  {
                                                                if (edge_index0 > edge_index1)  {
                                                                    //E1={R,A}, E2={R,B}, E3={A,B,C}, E6={B,C}
                                                                    keys = generate_labels(mismatches, root, a, b, c, 69, e1, e2, e3, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[69], keys, mismatches);
                                                                }
                                                            }
                                                            else  {
                                                                if (edge_index0 > edge_index1)  {
                                                                    //E1={R,A}, E2={R,B}, E3={A,B,C}
                                                                    keys = generate_labels(mismatches, root, a, b, c, 24, e1, e2, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[24], keys, mismatches);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else  {
                                                    if (found_ij)  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                if (edge_index0 > edge_index1)  {
                                                                    //E1={R,A}, E2={R,B}, E4={A,B}, E5={A,C}, E6={B,C}
                                                                    keys = generate_labels(mismatches, root, a, b, c, 140, e1, e2, e4, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[140], keys, mismatches);
                                                                }
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E4={A,B}, E5={A,C}
                                                                keys = generate_labels(mismatches, root, b, a, c, 61, e2, e1, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[61], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                    else  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                if (edge_index0 > edge_index1)  {
                                                                    //E1={R,A}, E2={R,B}, E5={A,C}, E6={B,C}
                                                                    keys = generate_labels(mismatches, root, a, b, c, 65, e1, e2, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[65], keys, mismatches);
                                                                }
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E5={A,C}                                                                
                                                                keys = generate_labels(mismatches, root, b, a, c, 22, e2, e1, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[22], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
									}
                                }
                            }
						}
					}
				}
				
                // Case 012, Type 1
                i_incident_edges = hg.get_incident_edges(i);
                for (unsigned edge_index1=0; edge_index1 < i_incident_edges.size(); edge_index1++)  {
                	unsigned e1_ = i_incident_edges[edge_index1];
                    for (unsigned ii_=0; ii_<hg.vertex_set[e1_].size(); ii_++)  {
                        if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii_] != i)  {
							j = hg.vertex_set[e1_][ii_];
                            if (j == hg_root)
								continue;
							e3.clear();
                            b = hg.node_labels[j];
							insert_hyperedge_label(hg.edge_labels[e1_], e3);

                            found_rj_ = false;
                            found_rij_ = false;
                            j_incident_edges = hg.get_incident_edges(j); 
                            for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rj_); edge_index2++)  {
                                unsigned e2_ = root_incident_edges[edge_index2];
                                for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rj_); ii++)  {
                                	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                    if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][ii] == j)
                                    #else
                                    if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)
                                    #endif
                                    {
                                        found_rj_ = true;
                                    }
                                }
                            }
                            for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rij_); edge_index2++)  {
                                unsigned e2_ = root_incident_edges[edge_index2];
                                for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rij_); ii++)  {
                                    #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                    if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == i)
                                    #else
                                    if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == i)
                                    #endif
                                    {
                                        for (unsigned iii=0; (iii<hg.vertex_set[e2_].size() && !found_rij_); iii++)  {
                                            if (hg.vertex_set[e2_][iii] == j)  {
												found_rij_ = true;
											}
										}
									}
								}
							}
							if (found_rij_)
								continue;
                            if (HYPERGRAPHLETS_3)  {
                                if (!found_rij_ && !found_rj_)  {
                                    //E1={R,A}, E3={A,B}
                                    keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 3, e1, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                    increment_match_hash(hash[3], keys, mismatches);
                                }
                            }
                            
							// Case 0122, Type 1
							for (unsigned edge_index2=0; edge_index2 < edge_index1; edge_index2++)  {
                                unsigned e2_ = i_incident_edges[edge_index2];
                                for (unsigned iii_=0; iii_<hg.vertex_set[e2_].size(); iii_++)  {
                                    if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][iii_] != i)  {
										k = hg.vertex_set[e2_][iii_];
										if (k == hg_root || k == j)
											continue;
                                        e2.clear(); 
                                        e4.clear();
                                        e5.clear();
                                        c = hg.node_labels[k];
                                        insert_hyperedge_label(hg.edge_labels[e2_], e4);
                                        
                                        found_rk_ = false;
                                        found_jk = false;
                                        found_rik_ = false;
                                        found_rjk_ = false;
                                        found_ijk = false;
                                        found_rijk = false;
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rk_); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == k) 
                                                #else
                                                if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)
                                                #endif
                                                {
                                                    found_rk_ = true;
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = j_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                                if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)  {
													found_jk = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e5);
												}
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < i_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = i_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_jk = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e5);
												}
                                                #endif
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rik_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rik_); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == i)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 3 && hg.vertex_set[e3_][ii] == i)
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rik_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rjk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rjk_); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 3 && hg.vertex_set[e3_][ii] == j)
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rjk_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                bool valid_hyperedge_decomposition(true);
                                                for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                    unsigned e4_ = root_incident_edges[edge_index4];
                                                    if (e3_ == e4_)  {
                                                        valid_hyperedge_decomposition = false;
                                                        break;   
                                                    }
                                                }
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j && valid_hyperedge_decomposition)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 3 && hg.vertex_set[e3_][ii] == j)
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_ijk = true;
															insert_hyperedge_label(hg.edge_labels[e3_], e2);
														}
													}
												}
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rijk); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rijk); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 4 && hg.vertex_set[e3_][ii] == i)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 4 && hg.vertex_set[e3_][ii] == i)
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == j)  {
                                                            for (unsigned iiii=0; iiii<hg.vertex_set[e3_].size(); iiii++)  {
																if (hg.vertex_set[e3_][iiii] == k)  {
																	found_rijk = true;
																}
															}
														}
													}
                                                }
                                            }
                                        }
                                        if (HYPERGRAPHLETS_4)  {
                                        	if (!found_rijk && !found_rij_ && !found_rik_ && !found_rjk_ && !found_rj_ && !found_rk_)  {
                                                if (found_ijk)  {
													if (found_jk)  {
														//E1={R,A}, E2={A,B,C}, E3={A,B}, E4={A,C}, E5={B,C}
														keys = generate_labels(mismatches, root, a, b, c, 176, e1, e2, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[176], keys, mismatches);
													}
													else  {
														//E1={R,A}, E2={A,B,C}, E3={A,B}, E4={A,C}
														keys = generate_labels(mismatches, root, a, b, c, 81, e1, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[81], keys, mismatches);
													}
												}
                                                else  {
													if (found_jk)  {
														//E1={R,A}, E3={A,B}, E4={A,C}, E5={B,C}
														keys = generate_labels(mismatches, root, a, b, c, 78, e1, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[78], keys, mismatches);
													}
													else  {
														//E1={R,A}, E3={A,B}, E4={A,C}
														keys = generate_labels(mismatches, root, a, b, c, 26, e1, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[26], keys, mismatches);
													}
                                                }
                                            }
                                        }
								    }
							    }
                            }
                            
                            // Case 0123, Type 1
                            j_incident_edges = hg.get_incident_edges(j);
                            for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                unsigned e2_ = j_incident_edges[edge_index2];
                                bool valid = true;
								for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
									unsigned e3_ = root_incident_edges[edge_index3];
									if (e2_ == e3_)
										valid = false;
								}
								for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
									unsigned e3_ = i_incident_edges[edge_index3];
									if (e2_ == e3_)
										valid = false;
								}
								if (!valid)
									continue;
                                for (unsigned iii_=0; iii_<hg.vertex_set[e2_].size(); iii_++)  {
                                    #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                    if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][iii_] != j)
                                    #else
                                    if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][iii_] != j)
                                    #endif
                                    {
										k = hg.vertex_set[e2_][iii_];
										if (k == hg_root || k == i)
											continue;
                                        e5.clear();
                                        c = hg.node_labels[k];
                                        insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        
                                        found_rk_ = false;
                                        found_ik = false;
                                        found_jk = true;
                                        found_rik_ = false;
                                        found_rjk_ = false;
										found_ijk = false;
                                        found_rijk = false;
                                        k_incident_edges = hg.get_incident_edges(k);
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rk_); ii++)  {
                                            	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == k)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)
                                                #endif
                                                {
                                                    found_rk_ = true;
                                                }
                                            }
                                        }
                                        if (i_incident_edges.size() < k_incident_edges.size())  {
                                            for (unsigned edge_index3=0; (edge_index3 < i_incident_edges.size() && !found_ik); edge_index3++)  {
                                                unsigned e3_ = i_incident_edges[edge_index3];
                                                for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_ik); ii++)  {
                                                	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                	if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == k)
                                                	#else
                                                    if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)
                                                    #endif
                                                    {
														found_ik = true;
													}
												}
											}
										}
                                        else  {
                                            for (unsigned edge_index3=0; (edge_index3 < k_incident_edges.size() && !found_ik); edge_index3++)  {
                                                unsigned e3_ = k_incident_edges[edge_index3];
                                                for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_ik); ii++)  {
                                                	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                	if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == i)
                                                	#else
                                                    if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == i)
                                                    #endif
                                                    {
														found_ik = true;
													}
												} 
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rik_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rik_); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 3 && hg.vertex_set[e3_][ii] == i)
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rik_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rjk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rjk_); ii++)  {
                                            	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 3 && hg.vertex_set[e3_][ii] == j)
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rjk_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < i_incident_edges.size() && !found_ijk); edge_index3++)  {
                                            unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_ijk); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                bool valid_hyperedge_decomposition(true);
                                                for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                    unsigned e4_ = root_incident_edges[edge_index4];
                                                    if (e3_ == e4_)  {
                                                        valid_hyperedge_decomposition = false;
                                                        break;
                                                    }
                                                }
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j && valid_hyperedge_decomposition)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 3 && hg.vertex_set[e3_][ii] == j)
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
														if (hg.vertex_set[e3_][iii] == k)  {
															found_ijk = true;
														}
													}
												}
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rijk); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rijk); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 4 && hg.vertex_set[e3_][ii] == i)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 4 && hg.vertex_set[e3_][ii] == i)
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == j)  {
                                                            for (unsigned iiii=0; iiii<hg.vertex_set[e3_].size(); iiii++)  {
																if (hg.vertex_set[e3_][iiii] == k)  {
																	found_rijk = true;
																}
															}
														}
													}
                                                }
                                            }
                                        }
                                        if (HYPERGRAPHLETS_4)  {
                                            if (!found_rijk && !found_rij_ && !found_rik_ && !found_rjk_ && !found_rj_ && !found_rk_ && !found_ik && !found_ijk && found_jk)  {
                                                //E1={R,A}, E3={A,B}, E5={B,C}
                                                keys = generate_labels(mismatches, root, a, b, c, 27, e1, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                increment_match_hash(hash[27], keys, mismatches);
                                            }
                                        }
                                    }
								}
							}
						}
					}
				}
				
                // Case 012, Type 2
                i_incident_edges = hg.get_incident_edges(i); 
                for (unsigned edge_index1=0; edge_index1 < i_incident_edges.size(); edge_index1++)  {
                    unsigned e1_ = i_incident_edges[edge_index1];
                    for (unsigned ii_=0; ii_<hg.vertex_set[e1_].size(); ii_++)  {
                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                        bool valid_hyperedge_decomposition(true);
                        for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                        	unsigned e2_ = root_incident_edges[edge_index2];
                            if (e1_ == e2_)  {
                            	valid_hyperedge_decomposition = false;
                                break;
                            }
                        }
                        if (hg.vertex_set[e1_].size() >= 3 && hg.vertex_set[e1_][ii_] != i && valid_hyperedge_decomposition)
                        #else
                        if (hg.vertex_set[e1_].size() == 3 && hg.vertex_set[e1_][ii_] != i)
                        #endif
                        {
							j = hg.vertex_set[e1_][ii_];
                            if (j == hg_root)
								continue;
							e2.clear(); 
                            b = hg.node_labels[j];
							insert_hyperedge_label(hg.edge_labels[e1_], e2);

							found_rj_ = false;
                            found_rij_ = false;
                            j_incident_edges = hg.get_incident_edges(j); 
                            for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rj_); edge_index2++)  {
                                unsigned e2_ = root_incident_edges[edge_index2];
                                for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rj_); ii++)  {
                                	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                    if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][ii] == j)
                                    #else
                                    if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)
                                    #endif
                                    {
                                        found_rj_ = true;
                                    }
                                }
                            }
                            for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rij_); edge_index2++)  {
                                unsigned e2_ = root_incident_edges[edge_index2];
                                for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rij_); ii++)  {
                                	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                    if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == i)
                                    #else
                                    if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == i)
                                    #endif
                                    {
                                        for (unsigned iii=0; (iii<hg.vertex_set[e2_].size() && !found_rij_); iii++)  {
                                            if (hg.vertex_set[e2_][iii] == j)  {
												found_rij_ = true;
											}
										}
									}
								}
							}
							if (found_rij_)
								continue;
							#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
							if (HYPERGRAPHLETS_3)  {
                                if (!found_rij_ && !found_rj_)  {
                                    //E1={R,A}, E2={A,B} (by decomposing E2={A,B,C} to E2={A,B})
                                    keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 3, e1, e2, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                    increment_match_hash(hash[3], keys, mismatches);
                                }
                            }
							#endif
							
							// Case 0122, Type 2
							for (unsigned iii_=0; iii_<ii_; iii_++)  {
								k = hg.vertex_set[e1_][iii_];
								if (k == hg_root || k == i || k == j)
									continue;
								e3.clear();		
								e4.clear();
                            	e5.clear();
								c = hg.node_labels[k];

								found_rk_ = false;
								found_ij = false;
								found_ik = false;
								found_jk = false;
								found_rik_ = false;
								found_rjk_ = false;
								found_ijk = true;
								found_rijk = false;
								k_incident_edges = hg.get_incident_edges(k);
								for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rk_); edge_index2++)  {
									unsigned e2_ = root_incident_edges[edge_index2];
									for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rk_); ii++)  {
										#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][ii] == k)
										#else
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)
										#endif
										{
											found_rk_ = true;
										}
									} 
								}
								for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
											found_ij = true;
                                            insert_hyperedge_label(hg.edge_labels[e2_], e3);
										}
									}
								}
								for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
											found_ik = true;
                                            insert_hyperedge_label(hg.edge_labels[e2_], e4);
										}
									}
								}
								#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
								if (found_ij && found_ik)  
								{
									vector<char> e3_temp(e3), e4_temp(e4);
									e3.clear();
									e4.clear();
									found_ij = false;
									found_ik = false;
									for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = i_incident_edges[edge_index2];
										for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
											bool valid_hyperedge_decomposition(false);
											if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
												valid_hyperedge_decomposition = true;
												if (e1_ == e2_)
                            						valid_hyperedge_decomposition = false;
												for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
													unsigned e3_ = root_incident_edges[edge_index3];
													if (e2_ == e3_)  {
														valid_hyperedge_decomposition = false;
														break;
													}
												}
												for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
													unsigned e3_ = k_incident_edges[edge_index3];
													if (e2_ == e3_)  {
														valid_hyperedge_decomposition = false;
														break;
													}
												}
											}
											if (valid_hyperedge_decomposition)  {
												bool found = search_hyperedge_label(hg.edge_labels[e2_], e3_temp);
												if (!found || DISABLE_MULTIPLICITY == 0)  {
													found_ij = true;
													insert_hyperedge_label(hg.edge_labels[e2_], e3);
												}
											}
										}
									}	
									for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = i_incident_edges[edge_index2];
										for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
											bool valid_hyperedge_decomposition(false);
											if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
												valid_hyperedge_decomposition = true;
												if (e1_ == e2_)
                            						valid_hyperedge_decomposition = false;
												for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
													unsigned e3_ = root_incident_edges[edge_index3];
													if (e2_ == e3_)  {
														valid_hyperedge_decomposition = false;
														break;
													}
												}
												for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
													unsigned e3_ = j_incident_edges[edge_index3];
													if (e2_ == e3_)  {
														valid_hyperedge_decomposition = false;
														break;
													}
												}
											}
											if (valid_hyperedge_decomposition)  {
												bool found = search_hyperedge_label(hg.edge_labels[e2_], e4_temp);
												if (!found || DISABLE_MULTIPLICITY == 0)  {
													found_ik = true;
													insert_hyperedge_label(hg.edge_labels[e2_], e4);
												}
											}
										}
									}
								}
								#else
								if (found_ij && found_ik)
									continue; 
								#endif
								for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = j_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
											found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
										#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											if (e1_ == e2_)
                            					valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
										#endif
									}
								}
								for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rik_); edge_index2++)  {
									unsigned e2_ = root_incident_edges[edge_index2];
									for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rik_); ii++)  {
										#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == i)
										#else
										if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == i)
										#endif
										{
											for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
												if (hg.vertex_set[e2_][iii] == k)  {
													found_rik_ = true;
												}
											}
										}
									}
								}
								for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rjk_); edge_index2++)  {
									unsigned e2_ = root_incident_edges[edge_index2];
									for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rjk_); ii++)  {
										#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == j)
										#else
										if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == j)
										#endif
										{
											for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
												if (hg.vertex_set[e2_][iii] == k)  {
													found_rjk_ = true;
												}
											}
										}
									}
								}
								for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rijk); edge_index2++)  {
									unsigned e2_ = root_incident_edges[edge_index2];
									for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rijk); ii++)  {
										#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        if (hg.vertex_set[e2_].size() >= 4 && hg.vertex_set[e2_][ii] == i)
                                        #else
                                        if (hg.vertex_set[e2_].size() == 4 && hg.vertex_set[e2_][ii] == i)
                                        #endif
                                        {
											for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
												if (hg.vertex_set[e2_][iii] == j)  {
													for (unsigned iiii=0; iiii<hg.vertex_set[e2_].size(); iiii++)  {
														if (hg.vertex_set[e2_][iiii] == k)  {
															found_rijk = true;
														}
													}
												}
											}
										}
									}
								}
								if (HYPERGRAPHLETS_4)  {
									if (!found_rijk && !found_rij_ && !found_rik_ && !found_rjk_ && !found_rj_ && !found_rk_)  {
										if (found_ij)  {
                                            if (found_ik)  {
											    if (found_jk)  {
                                                    //E1={R,A}, E2={A,B,C}, E3={A,B}, E4={A,C}, E5={B,C}
												    keys = generate_labels(mismatches, root, a, b, c, 176, e1, e2, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[176], keys, mismatches);
												}
											    else  {
                                                    //E1={R,A}, E2={A,B,C}, E3={A,B}, E4={A,C}
                                                    keys = generate_labels(mismatches, root, a, b, c, 81, e1, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[81], keys, mismatches);
                                                }
                                            }
                                            else  {
                                                if (found_jk)  {
                                                    //E1={R,A}, E2={A,B,C}, E3={A,B}, E5={B,C}
                                                    keys = generate_labels(mismatches, root, a, b, c, 86, e1, e2, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[86], keys, mismatches);
                                                }
                                                else  {
												    //E1={R,A}, E2={A,B,C}, E3={A,B}
												    keys = generate_labels(mismatches, root, a, b, c, 30, e1, e2, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
												    increment_match_hash(hash[30], keys, mismatches);
                                                }
                                            }
										}
										else  {
                                            if (found_ik)  {
                                                if (found_jk)  {
                                                    //E1={R,A}, E2={A,B,C}, E4={A,C}, E5={B,C}
                                                    keys = generate_labels(mismatches, root, a, c, b, 86, e1, e2, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[86], keys, mismatches);

                                                }
                                                else  {
												    //E1={R,A}, E2={A,B,C}, E4={A,C}
												    keys = generate_labels(mismatches, root, a, c, b, 30, e1, e2, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
												    increment_match_hash(hash[30], keys, mismatches);
                                                }
                                            }
                                            else  {
											    if (found_jk)  {
												    //E1={R,A}, E2={A,B,C}, E5={B,C}
												    keys = generate_labels(mismatches, root, a, b, c, 34, e1, e2, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
												    increment_match_hash(hash[34], keys, mismatches);
											    }
											    else  {
												    //E1={R,A}, E2={A,B,C}
												    keys = generate_labels(mismatches, root, a, b, c, 13, e1, e2, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
												    increment_match_hash(hash[13], keys, mismatches);
											    }
                                            }
										}
									}
								}
							}
							
							// Case 0123, Type 2
                            j_incident_edges = hg.get_incident_edges(j);
                            for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                unsigned e2_ = j_incident_edges[edge_index2];
                                bool valid = true;
								for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
									unsigned e3_ = root_incident_edges[edge_index3];
									if (e2_ == e3_)
										valid = false;
								}
								for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
									unsigned e3_ = i_incident_edges[edge_index3];
									if (e2_ == e3_)
										valid = false;
								}
								if (!valid)
									continue;
                                for (unsigned iii_=0; iii_<hg.vertex_set[e2_].size(); iii_++)  {
                                    #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                    if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][iii_] != j)
                                    #else
                                    if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][iii_] != j)
                                    #endif
                                    {
										k = hg.vertex_set[e2_][iii_];
										if (k == hg_root || k == i)
											continue;
                                        e5.clear();
                                        c = hg.node_labels[k];
                                        insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        
                                        found_rk_ = false;
                                        found_ik = false;
                                        found_jk = true;
                                        found_rik_ = false;
                                        found_rjk_ = false;
										found_ijk = false;
                                        found_rijk = false;
                                        k_incident_edges = hg.get_incident_edges(k);
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rk_); ii++)  {
                                            	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == k)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)
                                                #endif
                                                {
                                                    found_rk_ = true;
                                                }
                                            }
                                        }
                                        if (i_incident_edges.size() < k_incident_edges.size())  {
                                            for (unsigned edge_index3=0; (edge_index3 < i_incident_edges.size() && !found_ik); edge_index3++)  {
                                                unsigned e3_ = i_incident_edges[edge_index3];
                                                for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_ik); ii++)  {
                                                	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                	if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == k)
                                                	#else
                                                    if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)
                                                    #endif
                                                    {
														found_ik = true;
													}
												}
											}
										}
                                        else  {
                                            for (unsigned edge_index3=0; (edge_index3 < k_incident_edges.size() && !found_ik); edge_index3++)  {
                                                unsigned e3_ = k_incident_edges[edge_index3];
                                                for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_ik); ii++)  {
                                                	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                	if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == i)
                                                	#else
                                                    if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == i)
                                                    #endif
                                                    {
														found_ik = true;
													}
												} 
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rik_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rik_); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 3 && hg.vertex_set[e3_][ii] == i)
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rik_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rjk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rjk_); ii++)  {
                                            	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 3 && hg.vertex_set[e3_][ii] == j)
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rjk_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < i_incident_edges.size() && !found_ijk); edge_index3++)  {
                                            unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_ijk); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                bool valid_hyperedge_decomposition(true);
                                                for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                    unsigned e4_ = root_incident_edges[edge_index4];
                                                    if (e3_ == e4_)  {
                                                        valid_hyperedge_decomposition = false;
                                                        break;
                                                    }
                                                }
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j && valid_hyperedge_decomposition)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 3 && hg.vertex_set[e3_][ii] == j)
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
														if (hg.vertex_set[e3_][iii] == k)  {
															found_ijk = true;
														}
													}
												}
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rijk); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rijk); ii++)  {
                                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                                if (hg.vertex_set[e3_].size() >= 4 && hg.vertex_set[e3_][ii] == i)
                                                #else
                                                if (hg.vertex_set[e3_].size() == 4 && hg.vertex_set[e3_][ii] == i)
                                                #endif
                                                {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == j)  {
                                                            for (unsigned iiii=0; iiii<hg.vertex_set[e3_].size(); iiii++)  {
																if (hg.vertex_set[e3_][iiii] == k)  {
																	found_rijk = true;
																}
															}
														}
													}
                                                }
                                            }
                                        }
                                        if (HYPERGRAPHLETS_4)  {
                                            if (!found_rijk && !found_rij_ && !found_rik_ && !found_rjk_ && !found_rj_ && !found_rk_ && !found_ik && !found_ijk && found_jk)  {
                                                //E1={R,A}, E2={A,B}, E5={B,C}
                                                keys = generate_labels(mismatches, root, a, b, c, 27, e1, e2, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                increment_match_hash(hash[27], keys, mismatches);
                                            }
                                        }
                                    }
								}
							}
						}
					}
                }
			}
            else if (hg.vertex_set[e0_].size() == 3)  {
				i = hg.vertex_set[e0_][i_];
				if (i == hg_root)
					continue;
				e1.clear();
				e2.clear();
				e3.clear();
				e4.clear();
				e5.clear();
				e6.clear();
				e7.clear();
				e8.clear();
				e9.clear();
				e10.clear();
				a = hg.node_labels[i];
				insert_hyperedge_label(hg.edge_labels[e0_], e1);
				
				#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
				found_ri_ = false;
				for (unsigned edge_index1=0; (edge_index1 < root_incident_edges.size() && !found_ri_); edge_index1++)  {
					unsigned e1_ = root_incident_edges[edge_index1];
					for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
						if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii] == i)  {
							found_ri_ = true;
//							bool found = search_hyperedge_label(hg.edge_labels[e1_], e1);
//							if (!found || DISABLE_MULTIPLICITY == 0)  {
//								found_ri_ = false;
//							}
						}
					}
				}
                // Case 01 by decomposing E1={R,A,B} to E1={R,A}
                if (HYPERGRAPHLETS_2)  {
                    if (!found_ri_)  {
                        //E1={R,A}
                        keys = generate_labels(mismatches, root, a, ZERO_CHAR, ZERO_CHAR, 1, e1, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                        increment_match_hash(hash[1], keys, mismatches);
                    }
                }

                // Case 011, Type 1 by decomposing E1={R,A,B} to E1={R,A}
                for (unsigned edge_index1=0; (edge_index1 < root_incident_edges.size() && !found_ri_); edge_index1++)  {
                    unsigned e1_ = root_incident_edges[edge_index1];
                    if (e0_ == e1_)
                    	continue;
                    for (unsigned ii_=0; ii_<hg.vertex_set[e1_].size(); ii_++)  {
                        if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii_] != hg_root)  {
                            j = hg.vertex_set[e1_][ii_];
                            if (j == i)
								continue;
							bool valid = true;
							for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
                            	if (hg.vertex_set[e0_][ii] == j)
                            		valid = false;
                            }
                            if (!valid)
                            	continue;
							e2.clear();
							e5.clear();
							b = hg.node_labels[j];
							insert_hyperedge_label(hg.edge_labels[e1_], e2);
							
                            found_ij = false;
                            found_rij_ = false;
                            i_incident_edges = hg.get_incident_edges(i);
                            j_incident_edges = hg.get_incident_edges(j);
                            //JLM: Add check to avoid double counting edge e={hg_root, i, j}
							for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
								unsigned e2_ = root_incident_edges[edge_index2];
								for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
									if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
										insert_hyperedge_label(hg.edge_labels[e2_], e2);
									}
								}
							}
                            if (i_incident_edges.size() < j_incident_edges.size())  {
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
                                    }
                                }
                            }
                            else  {
                                for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = j_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == i)  {
                                            found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        }
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == i)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5); 
										}
                                    }
								}
							}
                        	for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rij_); edge_index2++)  {
								unsigned e2_ = root_incident_edges[edge_index2];
								for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rij_); ii++)  {
                                    if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == i)  {
                                        for (unsigned iii=0; (iii<hg.vertex_set[e2_].size() && !found_rij_); iii++)  {
                                            if (hg.vertex_set[e2_][iii] == j)  {
												found_rij_ = true;
											}
										}
									}
								}
							}
							if (found_rij_)
								continue;
							// Case 011 by decomposing E1={R,A,B} to E1={R,A}
                            if (HYPERGRAPHLETS_3)  {
                                if (!found_rij_)  {
                                    if (found_ij)  {
                                        //E1={R,A}, E2={R,B}, E5={A,B}
                                        keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 7, e1, e2, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                        increment_match_hash(hash[7], keys, mismatches);
                                    }
                                    else  {
                                        //E1={R,A}, E2={R,B}
                                        keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 4, e1, e2, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                        increment_match_hash(hash[4], keys, mismatches);
                                    }
                                }
                            }

                            // Case 0111
                            for (unsigned edge_index2=0; edge_index2 < edge_index1; edge_index2++)  {
                            	unsigned e2_ = root_incident_edges[edge_index2];
                            	if (e0_ == e2_)
                            		continue;
                                for (unsigned iii_=0; iii_<hg.vertex_set[e2_].size(); iii_++)  {
                                	if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][iii_] != hg_root)  {
										k = hg.vertex_set[e2_][iii_];
										if (k == i || k == j)
											continue;
										bool valid = true;
										for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
                            				if (hg.vertex_set[e0_][ii] == k)
                            					valid = false;
                            			}
                            			if (!valid)
                            				continue;
										e3.clear();
										e4.clear();
										e5.clear();	
										e6.clear();
										e7.clear();
										c = hg.node_labels[k];
										insert_hyperedge_label(hg.edge_labels[e2_], e3);

										found_ij = false;
                                        found_ik = false;
                                        found_jk = false;
                                        found_rik_ = false;
                                        found_rjk_ = false;
                                        found_ijk = false;
                                        found_rijk = false;
                                    	k_incident_edges = hg.get_incident_edges(k);
                                    	//JLM: Add check to avoid double counting 
                                    	for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  { 
											unsigned e3_ = root_incident_edges[edge_index3];
											for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
												if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == k)  {
													insert_hyperedge_label(hg.edge_labels[e3_], e3);
												}
											}
										}
                                        for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
                                        	unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                            	if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == j)  {
													found_ij = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e5);
												}
                                        		bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == j)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < k_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = k_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_ij = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e5); 
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                                if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)  {
													found_ik = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e6);
                                                }
                                                bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < j_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = j_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_ik = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e6); 
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = j_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                                if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)  {
													found_jk = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e7);
                                                }
                                                bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < i_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = i_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_jk = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e7);
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rik_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rik_); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == i)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rik_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rjk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rjk_); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rjk_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
										for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                                bool valid_hyperedge_decomposition(true);
                                                for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                    unsigned e4_ = root_incident_edges[edge_index4];
                                                    if (e3_ == e4_)  {
                                                        valid_hyperedge_decomposition = false;
                                                        break;
                                                    }
                                                }
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j && valid_hyperedge_decomposition)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_ijk = true;
															insert_hyperedge_label(hg.edge_labels[e3_], e4);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rijk); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rijk); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 4 && hg.vertex_set[e3_][ii] == i)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == j)  {
                                                            for (unsigned iiii=0; iiii<hg.vertex_set[e3_].size(); iiii++)  {
																if (hg.vertex_set[e3_][iiii] == k)  {
																	found_rijk = true;
																}
															}
														}
													}
                                                }
                                            }
                                        }
                                        // Case 0111, Type 1
                                        if (HYPERGRAPHLETS_4)  { 
                                            if (!found_rijk && !found_rij_ && !found_rik_ && !found_rjk_)  {
                                                if (found_ijk) {
                                                    if (found_ij)  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 334, e1, e2, e3, e4, e5, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[334], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 235, e1, e2, e3, e4, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[235], keys, mismatches);
                                                            }
                                                        }
                                                        else  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, b, a, c, 235, e2, e1, e3, e4, e5, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[235], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E5={A,B}
                                                                keys = generate_labels(mismatches, root, a, b, c, 134, e1, e2, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[134], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                    else  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E6={A,C}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, c, a, b, 235, e3, e1, e2, e4, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[235], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E6={A,C}
                                                                keys = generate_labels(mismatches, root, a, c, b, 134, e1, e3, e2, e4, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[134], keys, mismatches);
                                                            }
                                                        }
                                                        else  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, b, c, a, 134, e2, e3, e1, e4, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[134], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 59, e1, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[59], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                }
                                                else  {
                                                    if (found_ij)  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E5={A,B}, E6={A,C}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 232, e1, e2, e3, e5, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[232], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E5={A,B}, E6={A,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 131, e1, e2, e3, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[131], keys, mismatches);
                                                            }
                                                        }
                                                        else  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E5={A,B}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, b, a, c, 131, e2, e1, e3, e5, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[131], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E5={A,B}
                                                                keys = generate_labels(mismatches, root, a, b, c, 57, e1, e2, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[57], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                    else  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E6={A,C}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, c, a, b, 131, e3, e1, e2, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[131], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E6={A,C}
                                                                keys = generate_labels(mismatches, root, a, c, b, 57, e1, e3, e2, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[57], keys, mismatches);
                                                            }
                                                        }
                                                        else  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, b, c, a, 57, e2, e3, e1, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[57], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 21, e1, e2, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[21], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
									}
								}
							}
						}
					}
				}

                // Case 011, Type 2 by decomposing E1={R,A,B} to E1={R,A}
                for (unsigned edge_index1=0; (edge_index1 < root_incident_edges.size() && !found_ri_); edge_index1++)  {
                    unsigned e1_ = root_incident_edges[edge_index1];
                    for (unsigned ii_=0; ii_<hg.vertex_set[e1_].size(); ii_++)  {
                        if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii_] != hg_root)  {
							j = hg.vertex_set[e1_][ii_];
							if (j == i)
								continue;
							bool valid = true;
							for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
                            	if (hg.vertex_set[e0_][ii] == j)
                            		valid = false;
                            }
                            if (!valid)
                            	continue;
                            e2.clear();
                            b = hg.node_labels[j];
							insert_hyperedge_label(hg.edge_labels[e1_], e2);

							found_ij = false;
                            found_rij_ = false;
                            //JLM: Add check to avoid double counting 
                            for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  { 
								unsigned e2_ = root_incident_edges[edge_index2];
								for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
									if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
										insert_hyperedge_label(hg.edge_labels[e2_], e2);
									}
								}
							}
                            for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rij_); edge_index2++)  {
                                unsigned e2_ = root_incident_edges[edge_index2];
                                for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rij_); ii++)  {
									if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == i)  {
                                        for (unsigned iii=0; (iii<hg.vertex_set[e2_].size() && !found_rij_); iii++)  {
                                            if (hg.vertex_set[e2_][iii] == j)  {
												found_rij_ = true;
											}
										}
									}
								}
							}
							if (found_rij_)
								continue;
                            // Case 0112
                            i_incident_edges = hg.get_incident_edges(i); 
                            for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                                unsigned e2_ = i_incident_edges[edge_index2];
								bool valid = true;
								for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
									unsigned e3_ = root_incident_edges[edge_index3];
									if (e2_ == e3_)
										valid = false;
								}
								if (!valid)
									continue;
                                for (unsigned iii_=0; iii_<hg.vertex_set[e2_].size(); iii_++)  {
                                    if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][iii_] != i)  {
										k = hg.vertex_set[e2_][iii_];
                                        if (k == hg_root || k == j)
                                            continue;
                                        bool valid = true;
										for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
                            				if (hg.vertex_set[e0_][ii] == k)
                            					valid = false;
                            			}
                        				if (!valid)
                        					continue;
                                        e3.clear();
                                        e4.clear();
                                        e5.clear();
                                        e6.clear();
										c = hg.node_labels[k];

                                        unsigned e_ijk(UINT_MAX), e_ik(UINT_MAX);
                                        found_rk_ = false;
                                        found_ij = false;
                                        found_ik = false;
                                        found_jk = false;
                                        found_rik_ = false;
                                        found_rjk_ = false;
                                        found_ijk = false;
                                        found_rijk = false;
                                        j_incident_edges = hg.get_incident_edges(j);
                                        k_incident_edges = hg.get_incident_edges(k);
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rk_); ii++)  {
                                            	if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    found_rk_ = true;
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
                                        	unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                            	if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == j)  {
													found_ij = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e4);
												}
                                        		bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == j)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < k_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = k_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_ij = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e4); 
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
												if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)  {
													found_ik = true;
                                                    e_ik = edge_index3;
													insert_hyperedge_label(hg.edge_labels[e3_], e5);
                                                }
                                                bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < j_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = j_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_ik = true;
													e_ik = edge_index3;
													insert_hyperedge_label(hg.edge_labels[e3_], e5);
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = j_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
												if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)  {
												    found_jk = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e6);
                                                }
                                                bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < i_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = i_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_jk = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e6);
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rik_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rik_); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == i)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rik_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rjk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rjk_); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rjk_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
											unsigned e3_ = i_incident_edges[edge_index3];
											for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                                bool valid_hyperedge_decomposition(true);
                                                for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                    unsigned e4_ = root_incident_edges[edge_index4];
                                                    if (e3_ == e4_)  {
                                                        valid_hyperedge_decomposition = false;
                                                        break;
                                                    }
                                                }
												if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j && valid_hyperedge_decomposition)  {
													for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
														if (hg.vertex_set[e3_][iii] == k)  {
															found_ijk = true;
                                                            e_ijk = edge_index3;
															insert_hyperedge_label(hg.edge_labels[e3_], e3);
														}
													}
												}
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rijk); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rijk); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 4 && hg.vertex_set[e3_][ii] == i)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == j)  {
                                                            for (unsigned iiii=0; iiii<hg.vertex_set[e3_].size(); iiii++)  {
																if (hg.vertex_set[e3_][iiii] == k)  {
																	found_rijk = true;
																}
															}
														}
													}
                                                }
                                            }
                                        }
                                        if (HYPERGRAPHLETS_4)  {
                                            if (!found_rijk && !found_rij_ && !found_rik_ && !found_rjk_ && !found_rk_ && (edge_index2 == e_ijk || edge_index2 == e_ik))  {
                                                if (found_ijk)  {
                                                    if (found_ij)  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                if (edge_index2 == e_ijk)  {
                                                                    //E1={R,A}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={B,C}
                                                                    keys = generate_labels(mismatches, root, a, b, c, 250, e1, e2, e3, e4, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[250], keys, mismatches);
                                                                }
                                                            }
                                                            else  {
                                                                if (edge_index2 == e_ijk)  {
                                                                    //E1={R,A}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={A,C}
                                                                    keys = generate_labels(mismatches, root, b, a, c, 144, e2, e1, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                	increment_match_hash(hash[144], keys, mismatches);
                                                                }
                                                            }
                                                        }
                                                        else  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={A,B,C}, E4={A,B}, E6={B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 144, e1, e2, e3, e4, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[144], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={A,B,C}, E4={A,B}
                                                                keys = generate_labels(mismatches, root, a, b, c, 63, e1, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[63], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                    else  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                if (edge_index2 == e_ijk)  {
                                                                    //E1={R,A}, E2={R,B}, E3={A,B,C}, E5={A,C}, E6={B,C}
                                                                    keys = generate_labels(mismatches, root, a, b, c, 155, e1, e2, e3, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[155], keys, mismatches);
                                                                }
                                                            }
                                                            else  {
                                                                if (edge_index2 == e_ijk)  {
                                                                    //E1={R,A}, E2={R,B}, E3={A,B,C}, E5={A,C}
                                                                    keys = generate_labels(mismatches, root, b, a, c, 69, e2, e1, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[69], keys, mismatches);
                                                                }
                                                            }
                                                        }
                                                        else  {
                                                            if (found_jk)  {
                                                            	//E1={R,A}, E2={R,B}, E3={A,B,C}, E6={B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 69, e1, e2, e3, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[69], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={A,B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 24, e1, e2, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[24], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                }
                                                else  {
                                                    if (found_ij)  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E4={A,B}, E5={A,C}, E6={B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 140, e1, e2, e4, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[140], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E4={A,B}, E5={A,C}
                                                                keys = generate_labels(mismatches, root, b, a, c, 61, e2, e1, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[61], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                    else  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E5={A,C}, E6={B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 65, e1, e2, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[65], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E5={A,C}                                                                
                                                                keys = generate_labels(mismatches, root, b, a, c, 22, e2, e1, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[22], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
									}
                                }
                            }
                        }
                    }
                }
                
                // Case 012, Type 1 by decomposing E1={R,A,B} to E1={R,A}
                i_incident_edges = hg.get_incident_edges(i);
                for (unsigned edge_index1=0; (edge_index1 < i_incident_edges.size() && !found_ri_); edge_index1++)  {
                	unsigned e1_ = i_incident_edges[edge_index1];
                    for (unsigned ii_=0; ii_<hg.vertex_set[e1_].size(); ii_++)  {
                        if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii_] != i)  {
							j = hg.vertex_set[e1_][ii_];
                            if (j == hg_root)
								continue;
							bool valid = true;
							for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
                            	if (hg.vertex_set[e0_][ii] == j)
                            		valid = false;
                            }
                            if (!valid)
                            	continue;
							e3.clear();
                            b = hg.node_labels[j];
							insert_hyperedge_label(hg.edge_labels[e1_], e3);

                            found_rj_ = false;
                            found_rij_ = false;
                            j_incident_edges = hg.get_incident_edges(j); 
                            for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rj_); edge_index2++)  {
                                unsigned e2_ = root_incident_edges[edge_index2];
                                for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rj_); ii++)  {
                                	if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][ii] == j)  {
                                        found_rj_ = true;
                                    }
                                }
                            }
                            for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rij_); edge_index2++)  {
                                unsigned e2_ = root_incident_edges[edge_index2];
                                for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rij_); ii++)  {
                                    if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == i)  {
                                        for (unsigned iii=0; (iii<hg.vertex_set[e2_].size() && !found_rij_); iii++)  {
                                            if (hg.vertex_set[e2_][iii] == j)  {
												found_rij_ = true;
											}
										}
									}
								}
							}
							if (found_rij_)
								continue;
							if (HYPERGRAPHLETS_3)  {
                                if (!found_rij_ && !found_rj_)  {
                                    //E1={R,A}, E3={A,B}
                                    keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 3, e1, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                    increment_match_hash(hash[3], keys, mismatches);
                                }
                            }
                            
							// Case 0122, Type 1
							for (unsigned edge_index2=0; edge_index2 < edge_index1; edge_index2++)  {
                                unsigned e2_ = i_incident_edges[edge_index2];
                                for (unsigned iii_=0; iii_<hg.vertex_set[e2_].size(); iii_++)  {
                                    if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][iii_] != i)  {
										k = hg.vertex_set[e2_][iii_];
										if (k == hg_root || k == j)
											continue;
										bool valid = true;
										for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
                            				if (hg.vertex_set[e0_][ii] == k)
                            					valid = false;
                            			}
                            			if (!valid)
                            				continue;
                                        e2.clear(); 
                                        e4.clear();
                                        e5.clear();
                                        c = hg.node_labels[k];
                                        insert_hyperedge_label(hg.edge_labels[e2_], e4);
                                        
                                        found_rk_ = false;
                                        found_jk = false;
                                        found_rik_ = false;
                                        found_rjk_ = false;
                                        found_ijk = false;
                                        found_rijk = false;
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rk_); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    found_rk_ = true;
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = j_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                                if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)  {
													found_jk = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e5);
												}
                                                bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < i_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = i_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_jk = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e5);
												}
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rik_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rik_); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == i)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rik_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rjk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rjk_); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rjk_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                                bool valid_hyperedge_decomposition(true);
                                                for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                    unsigned e4_ = root_incident_edges[edge_index4];
                                                    if (e3_ == e4_)  {
                                                        valid_hyperedge_decomposition = false;
                                                        break;   
                                                    }
                                                }
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j && valid_hyperedge_decomposition)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_ijk = true;
															insert_hyperedge_label(hg.edge_labels[e3_], e2);
														}
													}
												}
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rijk); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rijk); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 4 && hg.vertex_set[e3_][ii] == i)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == j)  {
                                                            for (unsigned iiii=0; iiii<hg.vertex_set[e3_].size(); iiii++)  {
																if (hg.vertex_set[e3_][iiii] == k)  {
																	found_rijk = true;
																}
															}
														}
													}
                                                }
                                            }
                                        }
                                        if (HYPERGRAPHLETS_4)  {
                                        	if (!found_rijk && !found_rij_ && !found_rik_ && !found_rjk_ && !found_rj_ && !found_rk_)  {
                                                if (found_ijk)  {
													if (found_jk)  {
														//E1={R,A}, E2={A,B,C}, E3={A,B}, E4={A,C}, E5={B,C}
														keys = generate_labels(mismatches, root, a, b, c, 176, e1, e2, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[176], keys, mismatches);
													}
													else  {
														//E1={R,A}, E2={A,B,C}, E3={A,B}, E4={A,C}
														keys = generate_labels(mismatches, root, a, b, c, 81, e1, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[81], keys, mismatches);
													}
												}
                                                else  {
													if (found_jk)  {
														//E1={R,A}, E3={A,B}, E4={A,C}, E5={B,C}
														keys = generate_labels(mismatches, root, a, b, c, 78, e1, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[78], keys, mismatches);
													}
													else  {
														//E1={R,A}, E3={A,B}, E4={A,C}
														keys = generate_labels(mismatches, root, a, b, c, 26, e1, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[26], keys, mismatches);
													}
                                                }
                                            }
                                        }
								    }
							    }
                            }
                            
                            // Case 0123, Type 1
                            j_incident_edges = hg.get_incident_edges(j);
                            for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                unsigned e2_ = j_incident_edges[edge_index2];
                                bool valid = true;
								for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
									unsigned e3_ = root_incident_edges[edge_index3];
									if (e2_ == e3_)
										valid = false;
								}
								for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
									unsigned e3_ = i_incident_edges[edge_index3];
									if (e2_ == e3_)
										valid = false;
								}
								if (!valid)
									continue;
                                for (unsigned iii_=0; iii_<hg.vertex_set[e2_].size(); iii_++)  {
                                    if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][iii_] != j)  {
										k = hg.vertex_set[e2_][iii_];
										if (k == hg_root || k == i)
											continue;
										bool valid = true;
										for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
                            				if (hg.vertex_set[e0_][ii] == k)
                            					valid = false;
                            			}
                            			if (!valid)
                            				continue;
                                        e5.clear();
                                        c = hg.node_labels[k];
                                        insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        
                                        found_rk_ = false;
                                        found_ik = false;
                                        found_jk = true;
                                        found_rik_ = false;
                                        found_rjk_ = false;
										found_ijk = false;
                                        found_rijk = false;
                                        k_incident_edges = hg.get_incident_edges(k);
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rk_); ii++)  {
                                            	if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    found_rk_ = true;
                                                }
                                            }
                                        }
                                        if (i_incident_edges.size() < k_incident_edges.size())  {
                                            for (unsigned edge_index3=0; (edge_index3 < i_incident_edges.size() && !found_ik); edge_index3++)  {
                                                unsigned e3_ = i_incident_edges[edge_index3];
                                                for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_ik); ii++)  {
                                                	if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == k)  {
														found_ik = true;
													}
												}
											}
										}
                                        else  {
                                            for (unsigned edge_index3=0; (edge_index3 < k_incident_edges.size() && !found_ik); edge_index3++)  {
                                                unsigned e3_ = k_incident_edges[edge_index3];
                                                for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_ik); ii++)  {
                                                	if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == i)  {
														found_ik = true;
													}
												} 
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rik_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rik_); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rik_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rjk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rjk_); ii++)  {
                                            	if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rjk_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < i_incident_edges.size() && !found_ijk); edge_index3++)  {
                                            unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_ijk); ii++)  {
                                                bool valid_hyperedge_decomposition(true);
                                                for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                    unsigned e4_ = root_incident_edges[edge_index4];
                                                    if (e3_ == e4_)  {
                                                        valid_hyperedge_decomposition = false;
                                                        break;
                                                    }
                                                }
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j && valid_hyperedge_decomposition)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
														if (hg.vertex_set[e3_][iii] == k)  {
															found_ijk = true;
														}
													}
												}
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rijk); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rijk); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 4 && hg.vertex_set[e3_][ii] == i)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == j)  {
                                                            for (unsigned iiii=0; iiii<hg.vertex_set[e3_].size(); iiii++)  {
																if (hg.vertex_set[e3_][iiii] == k)  {
																	found_rijk = true;
																}
															}
														}
													}
                                                }
                                            }
                                        }
                                        if (HYPERGRAPHLETS_4)  {
                                            if (!found_rijk && !found_rij_ && !found_rik_ && !found_rjk_ && !found_rj_ && !found_rk_ && !found_ik && !found_ijk && found_jk)  {
                                                //E1={R,A}, E3={A,B}, E5={B,C}
                                                keys = generate_labels(mismatches, root, a, b, c, 27, e1, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                increment_match_hash(hash[27], keys, mismatches);
                                            }
                                        }
                                    }
								}
							}
						}
					}
				}

                // Case 012, Type 2 by decomposing E1={R,A,B} to E1={R,A}
                i_incident_edges = hg.get_incident_edges(i); 
                for (unsigned edge_index1=0; (edge_index1 < i_incident_edges.size() && !found_ri_); edge_index1++)  {
                    unsigned e1_ = i_incident_edges[edge_index1];
                    for (unsigned ii_=0; ii_<hg.vertex_set[e1_].size(); ii_++)  {
                        bool valid_hyperedge_decomposition(true);
                        for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                        	unsigned e2_ = root_incident_edges[edge_index2];
                            if (e1_ == e2_)  {
                            	valid_hyperedge_decomposition = false;
                                break;
                            }
                        }
                        if (hg.vertex_set[e1_].size() >= 3 && hg.vertex_set[e1_][ii_] != i && valid_hyperedge_decomposition)  {
							j = hg.vertex_set[e1_][ii_];
                            if (j == hg_root)
								continue;
							bool valid = true;
							for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
                            	if (hg.vertex_set[e0_][ii] == j)
                            		valid = false;
                            }
                            if (!valid)
                            	continue;
							e2.clear(); 
                            b = hg.node_labels[j];
							insert_hyperedge_label(hg.edge_labels[e1_], e2);

							found_rj_ = false;
                            found_rij_ = false;
                            j_incident_edges = hg.get_incident_edges(j); 
                            for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rj_); edge_index2++)  {
                                unsigned e2_ = root_incident_edges[edge_index2];
                                for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rj_); ii++)  {
                                	if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][ii] == j)  {
                                        found_rj_ = true;
                                    }
                                }
                            }
                            for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rij_); edge_index2++)  {
                                unsigned e2_ = root_incident_edges[edge_index2];
                                for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rij_); ii++)  {
                                	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == i)  {
                                        for (unsigned iii=0; (iii<hg.vertex_set[e2_].size() && !found_rij_); iii++)  {
                                            if (hg.vertex_set[e2_][iii] == j)  {
												found_rij_ = true;
											}
										}
									}
								}
							}
							if (found_rij_)
								continue;
							if (HYPERGRAPHLETS_3)  {
                                if (!found_rij_ && !found_rj_)  {
                                    //E1={R,A}, E2={A,B} (by decomposing E2={A,B,C} to E2={A,B})
                                    keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 3, e1, e2, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                    increment_match_hash(hash[3], keys, mismatches);
                                }
                            }
                            
							// Case 0122, Type 2
							for (unsigned iii_=0; iii_<ii_; iii_++)  {
								k = hg.vertex_set[e1_][iii_];
								if (k == hg_root || k == i || k == j)
									continue;
								bool valid = true;
								for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
									if (hg.vertex_set[e0_][ii] == k)
										valid = false;
								}
								if (!valid)
									continue;
								e3.clear();		
								e4.clear();
                            	e5.clear();
								c = hg.node_labels[k];

								found_rk_ = false;
								found_ij = false;
								found_ik = false;
								found_jk = false;
								found_rik_ = false;
								found_rjk_ = false;
								found_ijk = true;
								found_rijk = false;
								k_incident_edges = hg.get_incident_edges(k);
								for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rk_); edge_index2++)  {
									unsigned e2_ = root_incident_edges[edge_index2];
									for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rk_); ii++)  {
										if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][ii] == k)  {
											found_rk_ = true;
										}
									} 
								}
								for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
											found_ij = true;
                                            insert_hyperedge_label(hg.edge_labels[e2_], e3);
										}
									}
								}
								for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
											found_ik = true;
                                            insert_hyperedge_label(hg.edge_labels[e2_], e4);
										}
									}
								}
								if (found_ij && found_ik)  {
									vector<char> e3_temp(e3), e4_temp(e4);
									e3.clear();
									e4.clear();
									found_ij = false;
									found_ik = false;
									for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = i_incident_edges[edge_index2];
										for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
											bool valid_hyperedge_decomposition(false);
											if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
												valid_hyperedge_decomposition = true;
												if (e1_ == e2_)
                            						valid_hyperedge_decomposition = false;
												for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
													unsigned e3_ = root_incident_edges[edge_index3];
													if (e2_ == e3_)  {
														valid_hyperedge_decomposition = false;
														break;
													}
												}
												for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
													unsigned e3_ = k_incident_edges[edge_index3];
													if (e2_ == e3_)  {
														valid_hyperedge_decomposition = false;
														break;
													}
												}
											}
											if (valid_hyperedge_decomposition)  {
												bool found = search_hyperedge_label(hg.edge_labels[e2_], e3_temp);
												if (!found || DISABLE_MULTIPLICITY == 0)  {
													found_ij = true;
													insert_hyperedge_label(hg.edge_labels[e2_], e3);
												}
											}
										}
									}	
									for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = i_incident_edges[edge_index2];
										for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
											bool valid_hyperedge_decomposition(false);
											if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
												valid_hyperedge_decomposition = true;
												if (e1_ == e2_)
                            						valid_hyperedge_decomposition = false;
												for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
													unsigned e3_ = root_incident_edges[edge_index3];
													if (e2_ == e3_)  {
														valid_hyperedge_decomposition = false;
														break;
													}
												}
												for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
													unsigned e3_ = j_incident_edges[edge_index3];
													if (e2_ == e3_)  {
														valid_hyperedge_decomposition = false;
														break;
													}
												}
											}
											if (valid_hyperedge_decomposition)  {
												bool found = search_hyperedge_label(hg.edge_labels[e2_], e4_temp);
												if (!found || DISABLE_MULTIPLICITY == 0)  {
													found_ik = true;
													insert_hyperedge_label(hg.edge_labels[e2_], e4);
												}
											}
										}
									}
								}
								for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = j_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
											found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											if (e1_ == e2_)
                            					valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
									}
								}
								for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rik_); edge_index2++)  {
									unsigned e2_ = root_incident_edges[edge_index2];
									for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rik_); ii++)  {
										if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == i)  {
											for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
												if (hg.vertex_set[e2_][iii] == k)  {
													found_rik_ = true;
												}
											}
										}
									}
								}
								for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rjk_); edge_index2++)  {
									unsigned e2_ = root_incident_edges[edge_index2];
									for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rjk_); ii++)  {
										if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == j)  {
											for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
												if (hg.vertex_set[e2_][iii] == k)  {
													found_rjk_ = true;
												}
											}
										}
									}
								}
								for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rijk); edge_index2++)  {
									unsigned e2_ = root_incident_edges[edge_index2];
									for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rijk); ii++)  {
										if (hg.vertex_set[e2_].size() >= 4 && hg.vertex_set[e2_][ii] == i)  {
											for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
												if (hg.vertex_set[e2_][iii] == j)  {
													for (unsigned iiii=0; iiii<hg.vertex_set[e2_].size(); iiii++)  {
														if (hg.vertex_set[e2_][iiii] == k)  {
															found_rijk = true;
														}
													}
												}
											}
										}
									}
								}
								if (HYPERGRAPHLETS_4)  {
									if (!found_rijk && !found_rij_ && !found_rik_ && !found_rjk_ && !found_rj_ && !found_rk_)  {
										if (found_ij)  {
                                            if (found_ik)  {
											    if (found_jk)  {
                                                    //E1={R,A}, E2={A,B,C}, E3={A,B}, E4={A,C}, E5={B,C}
												    keys = generate_labels(mismatches, root, a, b, c, 176, e1, e2, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[176], keys, mismatches);
												}
											    else  {
                                                    //E1={R,A}, E2={A,B,C}, E3={A,B}, E4={A,C}
                                                    keys = generate_labels(mismatches, root, a, b, c, 81, e1, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[81], keys, mismatches);
                                                }
                                            }
                                            else  {
                                                if (found_jk)  {
                                                    //E1={R,A}, E2={A,B,C}, E3={A,B}, E5={B,C}
                                                    keys = generate_labels(mismatches, root, a, b, c, 86, e1, e2, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[86], keys, mismatches);
                                                }
                                                else  {
												    //E1={R,A}, E2={A,B,C}, E3={A,B}
												    keys = generate_labels(mismatches, root, a, b, c, 30, e1, e2, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
												    increment_match_hash(hash[30], keys, mismatches);
                                                }
                                            }
										}
										else  {
                                            if (found_ik)  {
                                                if (found_jk)  {
                                                    //E1={R,A}, E2={A,B,C}, E4={A,C}, E5={B,C}
                                                    keys = generate_labels(mismatches, root, a, c, b, 86, e1, e2, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[86], keys, mismatches);

                                                }
                                                else  {
												    //E1={R,A}, E2={A,B,C}, E4={A,C}
												    keys = generate_labels(mismatches, root, a, c, b, 30, e1, e2, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
												    increment_match_hash(hash[30], keys, mismatches);
                                                }
                                            }
                                            else  {
											    if (found_jk)  {
												    //E1={R,A}, E2={A,B,C}, E5={B,C}
												    keys = generate_labels(mismatches, root, a, b, c, 34, e1, e2, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
												    increment_match_hash(hash[34], keys, mismatches);
											    }
											    else  {
												    //E1={R,A}, E2={A,B,C}
												    keys = generate_labels(mismatches, root, a, b, c, 13, e1, e2, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
												    increment_match_hash(hash[13], keys, mismatches);
											    }
                                            }
										}
									}
								}
							}
							
							// Case 0123, Type 2
                            j_incident_edges = hg.get_incident_edges(j);
                            for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                unsigned e2_ = j_incident_edges[edge_index2];
                                bool valid = true;
								for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
									unsigned e3_ = root_incident_edges[edge_index3];
									if (e2_ == e3_)
										valid = false;
								}
								for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
									unsigned e3_ = i_incident_edges[edge_index3];
									if (e2_ == e3_)
										valid = false;
								}
								if (!valid)
									continue;
                                for (unsigned iii_=0; iii_<hg.vertex_set[e2_].size(); iii_++)  {
                                    if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][iii_] != j)  {
										k = hg.vertex_set[e2_][iii_];
										if (k == hg_root || k == i)
											continue;
										bool valid = true;
										for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
                            				if (hg.vertex_set[e0_][ii] == k)
                            					valid = false;
                            			}
                            			if (!valid)
                            				continue;
                                        e5.clear();
                                        c = hg.node_labels[k];
                                        insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        
                                        found_rk_ = false;
                                        found_ik = false;
                                        found_jk = true;
                                        found_rik_ = false;
                                        found_rjk_ = false;
										found_ijk = false;
                                        found_rijk = false;
                                        k_incident_edges = hg.get_incident_edges(k);
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rk_); ii++)  {
                                            	if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    found_rk_ = true;
                                                }
                                            }
                                        }
                                        if (i_incident_edges.size() < k_incident_edges.size())  {
                                            for (unsigned edge_index3=0; (edge_index3 < i_incident_edges.size() && !found_ik); edge_index3++)  {
                                                unsigned e3_ = i_incident_edges[edge_index3];
                                                for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_ik); ii++)  {
                                                	if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == k)  {
														found_ik = true;
													}
												}
											}
										}
                                        else  {
                                            for (unsigned edge_index3=0; (edge_index3 < k_incident_edges.size() && !found_ik); edge_index3++)  {
                                                unsigned e3_ = k_incident_edges[edge_index3];
                                                for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_ik); ii++)  {
                                                	if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == i)  {
														found_ik = true;
													}
												} 
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rik_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rik_); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rik_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rjk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rjk_); ii++)  {
                                            	if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rjk_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < i_incident_edges.size() && !found_ijk); edge_index3++)  {
                                            unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_ijk); ii++)  {
                                                bool valid_hyperedge_decomposition(true);
                                                for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                    unsigned e4_ = root_incident_edges[edge_index4];
                                                    if (e3_ == e4_)  {
                                                        valid_hyperedge_decomposition = false;
                                                        break;
                                                    }
                                                }
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j && valid_hyperedge_decomposition)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
														if (hg.vertex_set[e3_][iii] == k)  {
															found_ijk = true;
														}
													}
												}
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rijk); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rijk); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 4 && hg.vertex_set[e3_][ii] == i)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == j)  {
                                                            for (unsigned iiii=0; iiii<hg.vertex_set[e3_].size(); iiii++)  {
																if (hg.vertex_set[e3_][iiii] == k)  {
																	found_rijk = true;
																}
															}
														}
													}
                                                }
                                            }
                                        }
                                        if (HYPERGRAPHLETS_4)  {
                                            if (!found_rijk && !found_rij_ && !found_rik_ && !found_rjk_ && !found_rj_ && !found_rk_ && !found_ik && !found_ijk && found_jk)  {
                                                //E1={R,A}, E2={A,B}, E5={B,C}
                                                keys = generate_labels(mismatches, root, a, b, c, 27, e1, e2, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                increment_match_hash(hash[27], keys, mismatches);
                                            }
                                        }
                                    }
								}
							}
						}
					}
				}
				#endif
	
                // Case 011, Type 3
                for (unsigned ii_=0; ii_<i_; ii_++)  {
					j = hg.vertex_set[e0_][ii_];
					if (j == hg_root || j == i)
						continue;
					e2.clear();
					e3.clear();
					e4.clear();
					e5.clear();
					e6.clear();
					e7.clear();
					e8.clear();
					e9.clear();
					e10.clear();
					b = hg.node_labels[j];

					found_ri = false;
					found_rj = false;
					found_ij = false;
					found_rij_ = false;
					i_incident_edges = hg.get_incident_edges(i);
					j_incident_edges = hg.get_incident_edges(j);
					for (unsigned edge_index1=0; edge_index1 < root_incident_edges.size(); edge_index1++)  {
						unsigned e1_ = root_incident_edges[edge_index1];
						for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
                            if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii] == i)  {
                                found_ri = true;
								insert_hyperedge_label(hg.edge_labels[e1_], e5);
                            }
                            #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
							bool valid_hyperedge_decomposition(false);
							if (hg.vertex_set[e1_].size() > 2 && hg.vertex_set[e1_][ii] == i)  {
								valid_hyperedge_decomposition = true;
								for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = j_incident_edges[edge_index2];
									if (e1_ == e2_)  {
										valid_hyperedge_decomposition = false;
										break;
									}
								}
							}
							if (valid_hyperedge_decomposition)  {
								found_ij = true;
								insert_hyperedge_label(hg.edge_labels[e1_], e5); 
							}
							#endif
                        }
                    }
                    for (unsigned edge_index1=0; edge_index1 < root_incident_edges.size(); edge_index1++)  {
						unsigned e1_ = root_incident_edges[edge_index1];
						for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
                            if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii] == j)  {
                                found_rj = true;
								insert_hyperedge_label(hg.edge_labels[e1_], e6);
                            }
                            #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
							bool valid_hyperedge_decomposition(false);
							if (hg.vertex_set[e1_].size() > 2 && hg.vertex_set[e1_][ii] == j)  {
								valid_hyperedge_decomposition = true;
								for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									if (e1_ == e2_)  {
										valid_hyperedge_decomposition = false;
										break;
									}
								}
							}
							if (valid_hyperedge_decomposition)  {
								found_ij = true;
								insert_hyperedge_label(hg.edge_labels[e1_], e6);
							}
							#endif
						}
					}
					if (i_incident_edges.size() < j_incident_edges.size())  {
						for (unsigned edge_index1=0; edge_index1 < i_incident_edges.size(); edge_index1++)  {
							unsigned e1_ = i_incident_edges[edge_index1];
							for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
								if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii] == j)  {
									found_ij = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e8);
								}
								#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
								bool valid_hyperedge_decomposition(false);
								if (hg.vertex_set[e1_].size() > 2 && hg.vertex_set[e1_][ii] == j)  {
									valid_hyperedge_decomposition = true;
									for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = root_incident_edges[edge_index2];
										if (e1_ == e2_)  {
											valid_hyperedge_decomposition = false;
											break;
										}
									}
								}
								if (valid_hyperedge_decomposition)  {
									found_ij = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e8);
								}
								#endif
							}
						}
					}
					else  {
						for (unsigned edge_index1=0; edge_index1 < j_incident_edges.size(); edge_index1++)  {
							unsigned e1_ = j_incident_edges[edge_index1];
							for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
								if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii] == i)  {
									found_ij = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e8);
								}
								#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
								bool valid_hyperedge_decomposition(false);
								if (hg.vertex_set[e1_].size() > 2 && hg.vertex_set[e1_][ii] == i)  {
									valid_hyperedge_decomposition = true;
									for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = root_incident_edges[edge_index2];
										if (e1_ == e2_)  {
											valid_hyperedge_decomposition = false;
											break;
										}
									}
								}
								if (valid_hyperedge_decomposition)  {
									found_ij = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e8);
								}
								#endif
							}
						}
					}
					#if ENABLE_INDUCED_HYPERGRAPHLETS == 1 //JLM: Add check to avoid double counting 
					for (unsigned edge_index1=0; edge_index1 < root_incident_edges.size(); edge_index1++)  {
						unsigned e1_ = root_incident_edges[edge_index1];
						for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
							if (hg.vertex_set[e1_].size() > 3 && hg.vertex_set[e1_][ii] == i)  {
								for (unsigned iii=0; iii<hg.vertex_set[e1_].size(); iii++)  {
									if (hg.vertex_set[e1_][iii] == j)  {
										insert_hyperedge_label(hg.edge_labels[e1_], e1);
									}
								}
							}
						}
					}
					#endif
					if (HYPERGRAPHLETS_3)  {
						if (found_ri)  {
							if (found_rj)  {
								if (found_ij)  {
									//E1={R,A,B}, E5={R,A}, E3={R,B}, E4={A,B}
									keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 10, e1, e5, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
									increment_match_hash(hash[10], keys, mismatches);
								}
								else  {
									//E1={R,A,B}, E5={R,A}, E6={R,B}
									keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 9, e1, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
									increment_match_hash(hash[9], keys, mismatches);
								}
							}
							else  {
								if (found_ij)  {
									//E1={R,A,B}, E5={R,A}, E8={A,B}
									keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 8, e1, e5, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
									increment_match_hash(hash[8], keys, mismatches);
								}
								else  {
									//E1={R,A,B}, E5={R,A}
									keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 5, e1, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
									increment_match_hash(hash[5], keys, mismatches);
								}
							}
						}
						else  {
							if (found_rj)  {
								if (found_ij)  {
									//E1={R,A,B}, E6={R,B}, E8={A,B}
									keys = generate_labels(mismatches, root, b, a, ZERO_CHAR, 8, e1, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
									increment_match_hash(hash[8], keys, mismatches);
								}
								else  {
									//E1={R,A,B}, E6={R,B}
									keys = generate_labels(mismatches, root, b, a, ZERO_CHAR, 5, e1, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
									increment_match_hash(hash[5], keys, mismatches);
								}
							}
							else  {
								if (found_ij)  {
									//E1={R,A,B}, E8={A,B}
									keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 6, e1, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
									increment_match_hash(hash[6], keys, mismatches);
								}
								else  {
									//E1={R,A,B}
									keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 2, e1, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
									increment_match_hash(hash[2], keys, mismatches);
								}
							}
						}
					}

                    // Case 0111, Type 1
                    for (unsigned edge_index1=0; edge_index1 < root_incident_edges.size(); edge_index1++)  {
                        unsigned e1_ = root_incident_edges[edge_index1];
                        bool valid = false;
                        for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                            unsigned e2_ = j_incident_edges[edge_index2];
                            if (e1_ == e2_)
                                valid = true;
                        }
                        for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                            unsigned e2_ = i_incident_edges[edge_index2];
                            if (e1_ == e2_)
                                valid = false;
                        }
                        if (e1_ == e0_ || !valid)
                        	continue;
                        for (unsigned iii_=0; iii_<hg.vertex_set[e1_].size(); iii_++)   {
                        	if (hg.vertex_set[e1_].size() == 3 && hg.vertex_set[e1_][iii_] != j)   {
                                k = hg.vertex_set[e1_][iii_];
                                if (k == hg_root || k == i || dist[k] > 1)
                                    continue;
                                e2.clear();
                                e3.clear();
                                e4.clear();
                                e5.clear();
                                e6.clear();
                                e7.clear();
                                e8.clear();
								e9.clear();
								e10.clear();
								c = hg.node_labels[k];
								insert_hyperedge_label(hg.edge_labels[e1_], e3);

                                unsigned e_rik(UINT_MAX);
                                found_ri = false;
                                found_rj = false;
                                found_rk = false;
                                found_ij = false;
                                found_ik = false;
                                found_jk = false;
                                found_rik = false;
                                found_rjk = true;
                                found_ijk = false;
                                found_rijk = false;
                                k_incident_edges = hg.get_incident_edges(k);
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == i)  {
                                            found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == i)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_ || e1_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
										#endif
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_ || e1_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
										}
										#endif
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_rk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e7);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_ || e1_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e7);
										}
										#endif
                                    }
                                }
								for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8);
                                        }
										#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8);
										}
										#endif
									}
								}
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_ik = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e9);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ik = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e9);
										}
                                        #endif
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = j_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
										}
                                        #endif
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == k)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == i)  {
                                                    found_rik = true;
                                                    e_rik = edge_index2;
													insert_hyperedge_label(hg.edge_labels[e2_], e2);
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        bool valid_hyperedge_decomposition(true);
                                        for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            if (e2_ == e3_)  {
                                                valid_hyperedge_decomposition = false;
                                                break;
                                            }
                                        }
                                        if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == j && valid_hyperedge_decomposition)
                                        #else
                                        if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == j)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == k)  {
                                                    found_ijk = true;
													insert_hyperedge_label(hg.edge_labels[e2_], e4);
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rijk); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rijk); ii++)  {
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        if (hg.vertex_set[e2_].size() >= 4 && hg.vertex_set[e2_][ii] == i)
                                        #else
                                        if (hg.vertex_set[e2_].size() == 4 && hg.vertex_set[e2_][ii] == i)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    for (unsigned iiii=0; iiii<hg.vertex_set[e2_].size(); iiii++)  {
                                                        if (hg.vertex_set[e2_][iiii] == k)  {
                                                        	found_rijk = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (HYPERGRAPHLETS_4)  {
                                    if (!found_rijk && found_rjk)  {
                                        if (found_rik)  {
											if (found_ijk)  {
												if (found_ri)  {
													if (found_rj)  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 466, e1, e2, e3, e5, e6, e7, e4, e8, e9, e10, ZERO_VECTOR);
																			increment_match_hash(hash[466], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 454, e1, e2, e3, e5, e6, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[454], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 454, e1, e3, e2, e6, e5, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[454], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, b, c, 420, e1, e2, e3, e5, e6, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[420], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 454, e2, e3, e1, e7, e5, e6, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[454], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 420, e2, e1, e3, e5, e7, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[420], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 420, e3, e1, e2, e6, e7, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[420], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}
																			keys = generate_labels(mismatches, root, a, b, c, 350, e1, e2, e3, e5, e6, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[350], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 459, e1, e2, e3, e5, e6, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[459], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 432, e1, e2, e3, e5, e6, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[432], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 432, e1, e3, e2, e6, e5, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[432], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, b, c, 370, e1, e2, e3, e5, e6, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[370], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 438, e1, e2, e3, e5, e6, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[438], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 381, e1, e2, e3, e5, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[381], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 381, e1, e3, e2, e6, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[381], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}
																			keys = generate_labels(mismatches, root, a, b, c, 286, e1, e2, e3, e5, e6, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[286], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
													else  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, c, b, 459, e2, e1, e3, e5, e7, e4, e9, e8, e10, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[459], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 432, e2, e1, e3, e5, e7, e4, e9, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[432], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, c, b, 438, e2, e1, e3, e5, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[438], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, c, b, 381, e2, e1, e3, e5, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[381], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 432, e2, e3, e1, e7, e5, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[432], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 370, e2, e1, e3, e5, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[370], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 381, e2, e3, e1, e7, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[381], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}
																			keys = generate_labels(mismatches, root, a, c, b, 286, e2, e1, e3, e5, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[286], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 443, e1, e2, e3, e5, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[443], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 394, e1, e2, e3, e5, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[394], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 398, e1, e2, e3, e5, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[398], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, b, c, 314, e1, e2, e3, e5, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[314], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, c, b, 398, e2, e1, e3, e5, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[398], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 314, e2, e1, e3, e5, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[314], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 319, e1, e2, e3, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[319], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}
																			keys = generate_labels(mismatches, root, a, b, c, 212, e1, e2, e3, e5, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[212], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
												}
												else  {
													if (found_rj)  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 459, e3, e1, e2, e6, e7, e4, e10, e8, e9, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[459], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 438, e3, e1, e2, e6, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[438], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 432, e3, e1, e2, e6, e7, e4, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[432], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, c, a, 381, e3, e1, e2, e6, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[381], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, b, a, 432, e3, e2, e1, e7, e6, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[432], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, c, b, a, 381, e3, e2, e1, e7, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[381], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 370, e3, e1, e2, e6, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[370], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}
																			keys = generate_labels(mismatches, root, b, c, a, 286, e3, e1, e2, e6, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[286], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 443, e1, e3, e2, e6, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[443], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 398, e1, e3, e2, e6, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[398], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 394, e1, e3, e2, e6, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[394], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 314, e1, e3, e2, e6, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[314], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 398, e3, e1, e2, e6, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[398], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 319, e1, e3, e2, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[319], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 314, e3, e1, e2, e6, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[314], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B} 
																			keys = generate_labels(mismatches, root, b, a, c, 212, e1, e3, e2, e6, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[212], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
													else  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 443, e2, e3, e1, e7, e4, e9, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[443], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, c, a, b, 398, e2, e3, e1, e7, e4, e9, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[398], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, b, a, 398, e3, e2, e1, e7, e4, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[398], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, c, a, b, 319, e2, e3, e1, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[319], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 394, e2, e3, e1, e7, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[394], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, c, a, b, 314, e2, e3, e1, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[314], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, b, a, 314, e3, e2, e1, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[314], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E7={R,C}
																			keys = generate_labels(mismatches, root, c, a, b, 212, e2, e3, e1, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[212], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 405, e1, e2, e3, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[405], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 328, e1, e2, e3, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[328], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 328, e1, e3, e2, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[328], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, b, c, 227, e1, e2, e3, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[227], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 328, e2, e3, e1, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[328], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 227, e2, e1, e3, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[227], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 227, e3, e1, e2, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[227], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 128, e1, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[128], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
												}
											}
											else  {
												if (found_ri)  {
													if (found_rj)  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 450, e1, e2, e3, e5, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[450], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 413, e1, e2, e3, e5, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[413], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 413, e1, e3, e2, e6, e5, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[413], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, b, c, 343, e1, e2, e3, e5, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[343], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 413, e2, e3, e1, e7, e5, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[413], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 343, e2, e1, e3, e5, e7, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[343], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 343, e3, e1, e2, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[343], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}
																			keys = generate_labels(mismatches, root, a, b, c, 244, e1, e2, e3, e5, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[244], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 425, e1, e2, e3, e5, e6, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[425], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 360, e1, e2, e3, e5, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[360], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 360, e1, e3, e2, e6, e5, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[360], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, b, c, 262, e1, e2, e3, e5, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[262], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 374, e1, e2, e3, e5, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[374], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 276, e1, e2, e3, e5, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[276], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 276, e1, e3, e2, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[276], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}
																			keys = generate_labels(mismatches, root, a, b, c, 167, e1, e2, e3, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[167], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
													else  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, c, b, 425, e2, e1, e3, e5, e7, e9, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[425], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 360, e2, e1, e3, e5, e7, e9, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[360], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, c, b, 374, e2, e1, e3, e5, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[374], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, c, b, 276, e2, e1, e3, e5, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[276], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 360, e2, e3, e1, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[360], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 262, e2, e1, e3, e5, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[262], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 276, e2, e3, e1, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[276], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E7={R,C}
																			keys = generate_labels(mismatches, root, a, c, b, 167, e2, e1, e3, e5, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[167], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 387, e1, e2, e3, e5, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[387], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 297, e1, e2, e3, e5, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[297], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 304, e1, e2, e3, e5, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[304], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, b, c, 195, e1, e2, e3, e5, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[195], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, c, b, 304, e2, e1, e3, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[304], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 195, e2, e1, e3, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[195], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 205, e1, e2, e3, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[205], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}
																			keys = generate_labels(mismatches, root, a, b, c, 105, e1, e2, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[105], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
												}
												else  {
													if (found_rj)  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 425, e3, e1, e2, e6, e7, e10, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[425], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 374, e3, e1, e2, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[374], keys, mismatches);
																		}
																	}
																}
																else  {                                                                        
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 360, e3, e1, e2, e6, e7, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[360], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, c, a, 276, e3, e1, e2, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[276], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, b, a, 360, e3, e2, e1, e7, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[360], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, c, b, a, 276, e3, e2, e1, e7, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[276], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 262, e3, e1, e2, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[262], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E7={R,C} 
																			keys = generate_labels(mismatches, root, b, c, a, 167, e3, e1, e2, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[167], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 387, e1, e3, e2, e6, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[387], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 304, e1, e3, e2, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[304], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 297, e1, e3, e2, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[297], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 195, e1, e3, e2, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[195], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 304, e3, e1, e2, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[304], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 205, e1, e3, e2, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[205], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 195, e3, e1, e2, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[195], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}
																			keys = generate_labels(mismatches, root, b, a, c, 105, e1, e3, e2, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[105], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
													else  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 387, e2, e3, e1, e7, e9, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[387], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, c, a, b, 304, e2, e3, e1, e7, e9, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[304], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, b, a, 304, e3, e2, e1, e7, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[304], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, c, a, b, 205, e2, e3, e1, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[205], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 297, e2, e3, e1, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[297], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, c, a, b, 195, e2, e3, e1, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[195], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, b, a, 195, e3, e2, e1, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[195], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E7={R,C} 
																			keys = generate_labels(mismatches, root, c, a, b, 105, e2, e3, e1, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[105], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 324, e1, e2, e3, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[324], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 220, e1, e2, e3, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[220], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 220, e1, e3, e2, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[220], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, b, c, 121, e1, e2, e3, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[121], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 220, e2, e3, e1, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[220], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 121, e2, e1, e3, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[121], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 121, e3, e1, e2, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[121], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1 && edge_index0 > e_rik)  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 53, e1, e2, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[53], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
												}
											}
                                        }
										else  {
											if (found_ijk)  {
												if (found_ri)  {
													if (found_rj)  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1) {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 451, e1, e3, e6, e5, e7, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[451], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 416, e1, e3, e6, e5, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[416], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 414, e1, e3, e6, e5, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[414], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 344, e1, e3, e6, e5, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[344], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 416, e3, e1, e6, e7, e5, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[416], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 347, e1, e3, e6, e5, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[347], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 344, e3, e1, e6, e7, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[344], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}
																			keys = generate_labels(mismatches, root, b, a, c, 245, e1, e3, e6, e5, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[245], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 426, e1, e3, e6, e5, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[426], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 363, e1, e3, e6, e5, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[363], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 361, e1, e3, e6, e5, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[361], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 263, e1, e3, e6, e5, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[263], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 375, e1, e3, e6, e5, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[375], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 279, e1, e3, e6, e5, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[279], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 277, e1, e3, e6, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[277], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}
																			keys = generate_labels(mismatches, root, b, a, c, 168, e1, e3, e6, e5, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[168], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
													else  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 429, e1, e3, e5, e7, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[429], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 366, e1, e3, e5, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[366], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 378, e1, e3, e5, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[378], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 282, e1, e3, e5, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[282], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 366, e3, e1, e7, e5, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[366], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 266, e1, e3, e5, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[266], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 282, e3, e1, e7, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[282], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}
																			keys = generate_labels(mismatches, root, b, a, c, 171, e1, e3, e5, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[171], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 390, e1, e3, e5, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[390], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 300, e1, e3, e5, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[300], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 307, e1, e3, e5, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[307], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 198, e1, e3, e5, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[198], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 310, e1, e3, e5, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[310], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 201, e1, e3, e5, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[201], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 208, e1, e3, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[208], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}
																			keys = generate_labels(mismatches, root, b, a, c, 108, e1, e3, e5, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[108], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
												}
												else  {
													if (found_rj)  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 426, e3, e1, e6, e7, e4, e10, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[426], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 375, e3, e1, e6, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[375], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 361, e3, e1, e6, e7, e4, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[361], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, c, a, 277, e3, e1, e6, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[277], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 363, e3, e1, e6, e7, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[363], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 279, e3, e1, e6, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[279], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 263, e3, e1, e6, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[263], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}
																			keys = generate_labels(mismatches, root, b, c, a, 168, e3, e1, e6, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[168], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 388, e1, e3, e6, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[388], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 305, e1, e3, e6, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[305], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 298, e1, e3, e6, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[298], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 196, e1, e3, e6, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[196], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 305, e3, e1, e6, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[305], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 206, e1, e3, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[206], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 196, e3, e1, e6, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[196], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}
																			keys = generate_labels(mismatches, root, b, a, c, 106, e1, e3, e6, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[106], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
													else  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 390, e3, e1, e7, e4, e10, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[390], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 310, e3, e1, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[310], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 307, e3, e1, e7, e4, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[307], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, c, a, 208, e3, e1, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[208], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 300, e3, e1, e7, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[300], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 201, e3, e1, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[201], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 198, e3, e1, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[198], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E7={R,C}
																			keys = generate_labels(mismatches, root, b, c, a, 108, e3, e1, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[108], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {                                                                            
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 325, e1, e3, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[325], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 223, e1, e3, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[223], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 221, e1, e3, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[221], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 122, e1, e3, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[122], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 223, e3, e1, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[223], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 125, e1, e3, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[125], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 122, e3, e1, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[122], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 54, e1, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[54], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
												}
											}
											else  {
												if (found_ri)  {
													if (found_rj)  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 409, e1, e3, e6, e5, e7, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[409], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 337, e1, e3, e6, e5, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[337], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 336, e1, e3, e6, e5, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[336], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 237, e1, e3, e6, e5, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[237], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 337, e3, e1, e6, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[337], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 240, e1, e3, e6, e5, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[240], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 237, e3, e1, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[237], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}
																			keys = generate_labels(mismatches, root, b, a, c, 136, e1, e3, e6, e5, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[136], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 353, e1, e3, e6, e5, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[353], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 253, e1, e3, e6, e5, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[253], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 252, e1, e3, e6, e5, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[252], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 146, e1, e3, e6, e5, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[146], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 269, e1, e3, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[269], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 158, e1, e3, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[158], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 157, e1, e3, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[157], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}
																			keys = generate_labels(mismatches, root, b, a, c, 71, e1, e3, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[71], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
													else  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 356, e1, e3, e5, e7, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[356], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 256, e1, e3, e5, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[256], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 272, e1, e3, e5, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[272], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 161, e1, e3, e5, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[161], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 256, e3, e1, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[256], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 149, e1, e3, e5, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[149], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 161, e3, e1, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[161], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E7={R,C}
																			keys = generate_labels(mismatches, root, b, a, c, 74, e1, e3, e5, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[74], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 291, e1, e3, e5, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[291], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 179, e1, e3, e5, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[179], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A},E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 186, e1, e3, e5, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[186], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 89, e1, e3, e5, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[89], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 189, e1, e3, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[189], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 92, e1, e3, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[92], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 99, e1, e3, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[99], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}
																			keys = generate_labels(mismatches, root, b, a, c, 37, e1, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[37], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
												}
												else  {
													if (found_rj)  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 353, e3, e1, e6, e7, e10, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[353], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 269, e3, e1, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[269], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 252, e3, e1, e6, e7, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[252], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, c, a, 157, e3, e1, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[157], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 253, e3, e1, e6, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[253], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 158, e3, e1, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[158], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 146, e3, e1, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[146], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E7={R,C}
																			keys = generate_labels(mismatches, root, b, c, a, 71, e3, e1, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[71], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 290, e1, e3, e6, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[290], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 185, e1, e3, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[185], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 178, e1, e3, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[178], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 88, e1, e3, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[88], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 185, e3, e1, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[185], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 98, e1, e3, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[98], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 88, e3, e1, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[88], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}
																			keys = generate_labels(mismatches, root, b, a, c, 36, e1, e3, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[36], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
													else  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 291, e3, e1, e7, e10, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[291], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 189, e3, e1, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[189], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 186, e3, e1, e7, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[186], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, c, a, 99, e3, e1, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[99], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 179, e3, e1, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[179], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 92, e3, e1, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[92], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 89, e3, e1, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[89], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E7={R,C}
																			keys = generate_labels(mismatches, root, b, c, a, 37, e3, e1, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[37], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 216, e1, e3, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[216], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 115, e1, e3, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[115], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 114, e1, e3, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[114], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 46, e1, e3, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[46], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 115, e3, e1, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[115], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 49, e1, e3, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[49], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 46, e3, e1, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[46], keys, mismatches);
																		}
																	}
																	else  {
																		if (edge_index0 > edge_index1)  {
																			//E1={R,A,B}, E3={R,B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 17, e1, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[17], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
                                    }
                                }
                            }
                        }
                    } //End of Case 0111, Type 1

                    // Case 0111 or 0112, Type 1
                    for (unsigned edge_index1=0; edge_index1 < j_incident_edges.size(); edge_index1++)  {
                        unsigned e1_ = j_incident_edges[edge_index1];
                        bool invalid = false;
                        for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                        	unsigned e2_ = root_incident_edges[edge_index2];
                            if (e1_ == e2_)
                            	invalid = true;
                        }
                        if (e1_ == e0_ || invalid)
                            continue;
                        for (unsigned iii_=0; iii_<hg.vertex_set[e1_].size(); iii_++)  {
                            #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                            if (hg.vertex_set[e1_].size() >= 3 && hg.vertex_set[e1_][iii_] != j)
                            #else
                            if (hg.vertex_set[e1_].size() == 3 && hg.vertex_set[e1_][iii_] != j)
                            #endif
                            {
                                k = hg.vertex_set[e1_][iii_];
                                if (k == hg_root || k == i || dist[k] > 2)
                                    continue;
                                bool valid = false;
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                        			unsigned e2_ = i_incident_edges[edge_index2];
                            		if (e1_ == e2_)
                            			valid = true;
                        		}
                        		if (!valid)
                            		continue;
                                e2.clear();
                                e3.clear();
                                e4.clear();
                                e5.clear();
                                e6.clear();
                                e7.clear();
                                e8.clear();
                                e9.clear();
                                e10.clear();
								c = hg.node_labels[k];
                                insert_hyperedge_label(hg.edge_labels[e1_], e4);

								unsigned e_rik(UINT_MAX);
                                found_ri = false;
                                found_rj = false;
                                found_rk = false;
                                found_ij = false;
                                found_ik = false;
                                found_jk = false;
                                found_rik = false;
                                found_rjk_ = false; 
                                found_ijk = true;                                                                                      
                                found_rijk = false;
                                k_incident_edges = hg.get_incident_edges(k);
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == i)  {
                                            found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == i)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
										#endif
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
										}
										#endif
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_rk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e7);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e7);
										}
										#endif
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8);
                                        }
										#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8); 
										}
										#endif
									}
								}
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_ik = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e9);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ik = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e9);
										}
                                        #endif
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = j_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
										}
                                        #endif
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == k)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == i)  {
                                                    found_rik = true;
                                                    e_rik = edge_index2;
													insert_hyperedge_label(hg.edge_labels[e2_], e2);
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rjk_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rjk_); ii++)  {
                                    	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                    	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == k)
                                    	#else
                                        if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == k)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    found_rjk_ = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rijk); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rijk); ii++)  {
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        if (hg.vertex_set[e2_].size() >= 4 && hg.vertex_set[e2_][ii] == i)
                                        #else
                                        if (hg.vertex_set[e2_].size() == 4 && hg.vertex_set[e2_][ii] == i)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    for (unsigned iiii=0; iiii<hg.vertex_set[e2_].size(); iiii++)  {
                                                        if (hg.vertex_set[e2_][iiii] == k)  {
                                                            found_rijk = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (HYPERGRAPHLETS_4)  {
                                    if (!found_rijk && !found_rjk_ && found_ijk)  {
                                        if (found_rik)  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 451, e1, e2, e5, e6, e7, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[451], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, b, c, 414, e1, e2, e5, e6, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[414], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 416, e1, e2, e5, e6, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[416], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}
																		keys = generate_labels(mismatches, root, a, b, c, 344, e1, e2, e5, e6, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[344], keys, mismatches);
																	}
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 416, e2, e1, e5, e7, e6, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[416], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, c, b, 344, e2, e1, e5, e7, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[344], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 347, e1, e2, e5, e6, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[347], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}
																		keys = generate_labels(mismatches, root, a, b, c, 245, e1, e2, e5, e6, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[245], keys, mismatches);
																	}
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 426, e1, e2, e5, e6, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[426], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, b, c, 361, e1, e2, e5, e6, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[361], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 363, e1, e2, e5, e6, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[363], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}
																		keys = generate_labels(mismatches, root, a, b, c, 263, e1, e2, e5, e6, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[263], keys, mismatches);
																	}
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 375, e1, e2, e5, e6, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[375], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, b, c, 277, e1, e2, e5, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[277], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 279, e1, e2, e5, e6, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[279], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}
																		keys = generate_labels(mismatches, root, a, b, c, 168, e1, e2, e5, e6, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[168], keys, mismatches);
																	}
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 426, e2, e1, e5, e7, e4, e9, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[426], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, c, b, 361, e2, e1, e5, e7, e4, e9, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[361], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 375, e2, e1, e5, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[375], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}
																		keys = generate_labels(mismatches, root, a, c, b, 277, e2, e1, e5, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[277], keys, mismatches);
																	}
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 363, e2, e1, e5, e7, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[363], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, c, b, 263, e2, e1, e5, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[263], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 279, e2, e1, e5, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[279], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E7={R,C}
																		keys = generate_labels(mismatches, root, a, c, b, 168, e2, e1, e5, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[168], keys, mismatches);
																	}
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E8={A,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 388, e1, e2, e5, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[388], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E8={A,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, b, c, 298, e1, e2, e5, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[298], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E8={A,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 305, e1, e2, e5, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[305], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E8={A,B}
																		keys = generate_labels(mismatches, root, a, b, c, 196, e1, e2, e5, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[196], keys, mismatches);
																	}
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 305, e2, e1, e5, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[305], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, c, b, 196, e2, e1, e5, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[196], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 206, e1, e2, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[206], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}
																		keys = generate_labels(mismatches, root, a, b, c, 106, e1, e2, e5, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[106], keys, mismatches);
																	}
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 429, e1, e2, e6, e7, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[429], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, b, c, 378, e1, e2, e6, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[378], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 366, e1, e2, e6, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[366], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}
																		keys = generate_labels(mismatches, root, a, b, c, 282, e1, e2, e6, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[282], keys, mismatches);
																	}
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 366, e2, e1, e7, e6, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[366], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, c, b, 282, e2, e1, e7, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[282], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 266, e1, e2, e6, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[266], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E7={R,C}
																		keys = generate_labels(mismatches, root, a, b, c, 171, e1, e2, e6, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[171], keys, mismatches);
																	}
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 390, e1, e2, e6, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[390], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E8={A,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, b, c, 307, e1, e2, e6, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[307], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E8={A,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 300, e1, e2, e6, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[300], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E8={A,B}
																		keys = generate_labels(mismatches, root, a, b, c, 198, e1, e2, e6, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[198], keys, mismatches);
																	}
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 310, e1, e2, e6, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[310], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, b, c, 208, e1, e2, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[208], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 201, e1, e2, e6, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[201], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}
																		keys = generate_labels(mismatches, root, a, b, c, 108, e1, e2, e6, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[108], keys, mismatches);
																	}
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 390, e2, e1, e7, e4, e9, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[390], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E7={R,C}, E8={A,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, c, b, 307, e2, e1, e7, e4, e9, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[307], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E7={R,C}, E8={A,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 310, e2, e1, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[310], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E7={R,C}, E8={A,B}
																		keys = generate_labels(mismatches, root, a, c, b, 208, e2, e1, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[208], keys, mismatches);
																	}
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E7={R,C}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 300, e2, e1, e7, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[300], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E7={R,C}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, c, b, 198, e2, e1, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[198], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E7={R,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 201, e2, e1, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[201], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E7={R,C}
																		keys = generate_labels(mismatches, root, a, c, b, 108, e2, e1, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[108], keys, mismatches);
																	}
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E8={A,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 325, e1, e2, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[325], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E8={A,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, b, c, 221, e1, e2, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[221], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E8={A,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 223, e1, e2, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[223], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E8={A,B}
																		keys = generate_labels(mismatches, root, a, b, c, 122, e1, e2, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[122], keys, mismatches);
																	}
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 223, e2, e1, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[223], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, c, b, 122, e2, e1, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[122], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 125, e1, e2, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[125], keys, mismatches);
																	}
																}
																else  {
																	if (edge_index0 > e_rik)  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 54, e1, e2, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[54], keys, mismatches);
																	}
																}
															}
														}
													}
												}
											}
										}
										else  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 410, e1, e5, e6, e7, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[410], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 338, e1, e5, e6, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[338], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 338, e1, e6, e5, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[338], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 238, e1, e5, e6, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[238], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 340, e1, e5, e6, e7, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[340], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 241, e1, e5, e6, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[241], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 241, e1, e6, e5, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[241], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 137, e1, e5, e6, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[137], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 354, e1, e5, e6, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[354], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 254, e1, e6, e5, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[254], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 254, e1, e5, e6, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[254], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 147, e1, e5, e6, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[147], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 270, e1, e5, e6, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[270], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 159, e1, e6, e5, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[159], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 159, e1, e5, e6, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[159], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}
																	keys = generate_labels(mismatches, root, a, b, c, 72, e1, e5, e6, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[72], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 357, e1, e5, e7, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[357], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 257, e1, e5, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[257], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 273, e1, e5, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[273], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 162, e1, e5, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[162], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E7={R,C}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 259, e1, e5, e7, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[259], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E7={R,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 150, e1, e5, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[150], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E7={R,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 164, e1, e5, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[164], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E7={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 75, e1, e5, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[75], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 292, e1, e5, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[292], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 180, e1, e5, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[180], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 187, e1, e5, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[187], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 90, e1, e5, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[90], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 190, e1, e5, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[190], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 93, e1, e5, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[93], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 100, e1, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[100], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}
																	keys = generate_labels(mismatches, root, a, b, c, 38, e1, e5, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[38], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 357, e1, e6, e7, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[357], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 273, e1, e6, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[273], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 257, e1, e6, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[257], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 162, e1, e6, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[162], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 259, e1, e6, e7, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[259], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E7={R,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 164, e1, e6, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[164], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E7={R,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 150, e1, e6, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[150], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E7={R,C}
																	keys = generate_labels(mismatches, root, b, a, c, 75, e1, e6, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[75], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 292, e1, e6, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[292], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 187, e1, e6, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[187], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 180, e1, e6, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[180], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E8={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 90, e1, e6, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[90], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 190, e1, e6, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[190], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 100, e1, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[100], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 93, e1, e6, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[93], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}
																	keys = generate_labels(mismatches, root, b, a, c, 38, e1, e6, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[38], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 294, e1, e7, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[294], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E7={R,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 192, e1, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[192], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E7={R,C}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 192, e1, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[192], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E7={R,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 102, e1, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[102], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E7={R,C}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 182, e1, e7, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[182], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E7={R,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 95, e1, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[95], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {			
																	//E1={R,A,B}, E4={A,B,C}, E7={R,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 95, e1, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[95], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E7={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 40, e1, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[40], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 217, e1, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[217], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 116, e1, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[116], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 116, e1, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[116], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 47, e1, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[47], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 118, e1, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[118], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 50, e1, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[50], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 50, e1, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[50], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 18, e1, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[18], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
                                    }
                                }
                            }
                        }
                    } //End of Case 0112, Type 1
                    
                    // Case 0111, Type 2
                    for (unsigned edge_index1=0; edge_index1 < root_incident_edges.size(); edge_index1++)  {
                        unsigned e1_ = root_incident_edges[edge_index1];
                        bool valid = false;
                        for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                            unsigned e2_ = i_incident_edges[edge_index2];
                            if (e1_ == e2_)
                                valid = true;
                        }
                        for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                            unsigned e2_ = j_incident_edges[edge_index2];
                            if (e1_ == e2_)
                                valid = false;
                        }
                        if (e1_ == e0_ || !valid)
                            continue;
                        for (unsigned iii_=0; iii_<hg.vertex_set[e1_].size(); iii_++)  {
                        	if (hg.vertex_set[e1_].size() == 3 && hg.vertex_set[e1_][iii_] != i)  {
                                k = hg.vertex_set[e1_][iii_];
                                if (k == hg_root || k == j || dist[k] > 1)
                                    continue;
                                e2.clear();
                                e3.clear();
                            	e4.clear();
                                e5.clear();
                                e6.clear();
                                e7.clear();
                                e8.clear();
								e9.clear();
								e10.clear();
								c = hg.node_labels[k];
								insert_hyperedge_label(hg.edge_labels[e1_], e2);

                                found_ri = false;
                                found_rj = false;
                                found_rk = false;
                                found_ij = false;
                                found_ik = false;
                                found_jk = false;
                                found_rik = true;
                                found_rjk_ = false;
                                found_ijk = false;
                                found_rijk = false;
                                k_incident_edges = hg.get_incident_edges(k);
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == i)  {
                                            found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == i)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_ || e1_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
										#endif
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_ || e1_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
										}
										#endif
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_rk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e7);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_ || e1_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e7);
										}
										#endif
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8);
                                        }
										#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8); 
										}
										#endif
									}
								}
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_ik = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e9);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ik = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e9);
										}
                                        #endif
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = j_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
										}
                                        #endif
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rjk_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rjk_); ii++)  {
                                    	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                    	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == k)
                                    	#else
                                        if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == k)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    found_rjk_ = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < i_incident_edges.size() && !found_ijk); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_ijk); ii++)  {
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        bool valid_hyperedge_decomposition(true);
                                        for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
                                             unsigned e3_ = root_incident_edges[edge_index3];
                                            if (e2_ == e3_)  {
                                                valid_hyperedge_decomposition = false;
                                                break;
                                            }
                                        }
                                        if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == j && valid_hyperedge_decomposition)
                                        #else
                                        if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == j)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == k)  {
                                                    found_ijk = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rijk); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rijk); ii++)  {
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        if (hg.vertex_set[e2_].size() >= 4 && hg.vertex_set[e2_][ii] == i)
                                        #else
                                        if (hg.vertex_set[e2_].size() == 4 && hg.vertex_set[e2_][ii] == i)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    for (unsigned iiii=0; iiii<hg.vertex_set[e2_].size(); iiii++)  {
                                                        if (hg.vertex_set[e2_][iiii] == k)  {
                                                            found_rijk = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (HYPERGRAPHLETS_4)  {
                                    if (!found_rijk && !found_rjk_ && !found_ijk && found_rik)  {
										if (found_ri)  {
											if (found_rj)  {
												if (found_rk)  {
													if (found_ij)  {
														if (found_ik)  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 409, e1, e2, e5, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[409], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 336, e1, e2, e5, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[336], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}	
																	keys = generate_labels(mismatches, root, a, b, c, 337, e1, e2, e5, e6, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[337], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 237, e1, e2, e5, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[237], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ik)  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}	
																	keys = generate_labels(mismatches, root, a, c, b, 337, e2, e1, e5, e7, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[337], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 237, e2, e1, e5, e7, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[237], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E7={R,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 240, e1, e2, e5, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[240], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E7={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 136, e1, e2, e5, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[136], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_ij)  {
														if (found_ik)  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 353, e1, e2, e5, e6, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[353], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 252, e1, e2, e5, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[252], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 253, e1, e2, e5, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[253], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 146, e1, e2, e5, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[146], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ik)  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 269, e1, e2, e5, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[269], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 157, e1, e2, e5, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[157], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 158, e1, e2, e5, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[158], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}
																	keys = generate_labels(mismatches, root, a, b, c, 71, e1, e2, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[71], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rk)  {
													if (found_ij)  {
														if (found_ik)  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 353, e2, e1, e5, e7, e9, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[353], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 252, e2, e1, e5, e7, e9, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[252], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E7={R,C}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 269, e2, e1, e5, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[269], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E7={R,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, c, b, 157, e2, e1, e5, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[157], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ik)  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E7={R,C}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 253, e2, e1, e5, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[253], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E7={R,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 146, e2, e1, e5, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[146], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E7={R,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 158, e2, e1, e5, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[158], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E7={R,C}
																	keys = generate_labels(mismatches, root, a, c, b, 71, e2, e1, e5, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[71], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_ij)  {                                                            
														if (found_ik)  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 290, e1, e2, e5, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[290], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 178, e1, e2, e5, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[178], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 185, e1, e2, e5, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[185], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 88, e1, e2, e5, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[88], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ik)  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 185, e2, e1, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[185], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 88, e2, e1, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[88], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 98, e1, e2, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[98], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}
																	keys = generate_labels(mismatches, root, a, b, c, 36, e1, e2, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[36], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
										else  {
											if (found_rj)  {
												if (found_rk)  {
													if (found_ij)  {
														if (found_ik)  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 356, e1, e2, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[356], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 272, e1, e2, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[272], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 256, e1, e2, e6, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[256], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E7={R,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 161, e1, e2, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[161], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ik)  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 256, e2, e1, e7, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[256], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E7={R,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 161, e2, e1, e7, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[161], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E7={R,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 149, e1, e2, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[149], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E7={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 74, e1, e2, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[74], keys, mismatches);
															    }
                                                            }
														}
													}
												}
												else  {
													if (found_ij)  {
														if (found_ik)  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 291, e1, e2, e6, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[291], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 186, e1, e2, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[186], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 179, e1, e2, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[179], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 89, e1, e2, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[89], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ik)  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 189, e1, e2, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[189], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 99, e1, e2, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[99], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 92, e1, e2, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[92], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}
																	keys = generate_labels(mismatches, root, a, b, c, 37, e1, e2, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[37], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rk)  {
													if (found_ij)  {
														if (found_ik)  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 291, e2, e1, e7, e9, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                	increment_match_hash(hash[291], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E7={R,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 186, e2, e1, e7, e9, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[186], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E7={R,C}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 189, e2, e1, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[189], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E7={R,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, c, b, 99, e2, e1, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[99], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ik)  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E7={R,C}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 179, e2, e1, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[179], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E7={R,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 89, e2, e1, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[89], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E7={R,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 92, e2, e1, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[92], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E7={R,C}
																	keys = generate_labels(mismatches, root, a, c, b, 37, e2, e1, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[37], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_ij)  {
														if (found_ik)  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 216, e1, e2, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[216], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 114, e1, e2, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[114], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 115, e1, e2, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[115], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 46, e1, e2, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[46], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ik)  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 115, e2, e1, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[115], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 46, e2, e1, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[46], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 49, e1, e2, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[49], keys, mismatches);
																}
															}
															else  {
																if (edge_index0 > edge_index1)  {
																	//E1={R,A,B}, E2={R,A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 17, e1, e2, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[17], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
									}
                                }
                            }
                        }
                    } //End of Case 0111, Type 2

                    // Case 0111, Type 3
                    for (unsigned edge_index1=0; edge_index1 < root_incident_edges.size(); edge_index1++)  {
                        unsigned e1_ = root_incident_edges[edge_index1];
                        bool valid = true;
                        for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                            unsigned e2_ = i_incident_edges[edge_index2];
                            if (e1_ == e2_)
                                valid = false;
                        }
                        for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                            unsigned e2_ = j_incident_edges[edge_index2];
                            if (e1_ == e2_)
                                valid = false;
                        }
                        if (e1_ == e0_ || !valid)
                            continue;
                        for (unsigned iii_=0; iii_<hg.vertex_set[e1_].size(); iii_++)  {
                        	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                            if (hg.vertex_set[e1_].size() >= 2 && hg.vertex_set[e1_][iii_] != hg_root)
                            #else
                            if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][iii_] != hg_root)
                            #endif
                            {
                                k = hg.vertex_set[e1_][iii_];
                                if (k == i || k == j || dist[k] > 2)
                                    continue;
								e2.clear();
								e3.clear();
								e4.clear();
								e5.clear();
								e6.clear();
								e7.clear();
								e8.clear();
								e9.clear();
								e10.clear();
								c = hg.node_labels[k];
                                insert_hyperedge_label(hg.edge_labels[e1_], e7);

                                found_ri = false;
                                found_rj = false;
                                found_rk = true;
                                found_ij = false;
                                found_ik = false;
                                found_jk = false;
                                found_rik_ = false;
                                found_rjk_ = false;
                                found_ijk = false;
                                found_rijk = false;
                                k_incident_edges = hg.get_incident_edges(k);
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == i)  {
                                            found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == i)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_ || e1_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
										#endif
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_ || e1_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
										}
										#endif
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8);
                                        }
										#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  { 
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8); 
										}
										#endif
									}
								}
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_ik = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e9);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ik = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e9);
										}
                                        #endif
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = j_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
										}
                                        #endif
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rik_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rik_); ii++)  {
                                    	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                    	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == k)
                                    	#else
                                        if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == k)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == i)  {
                                                    found_rik_ = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rjk_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rjk_); ii++)  {
                                    	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                    	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == k)
                                    	#else
                                        if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == k)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    found_rjk_ = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < i_incident_edges.size() && !found_ijk); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_ijk); ii++)  {
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        bool valid_hyperedge_decomposition(true);
                                        for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
                                             unsigned e3_ = root_incident_edges[edge_index3];
                                            if (e2_ == e3_)  {
                                                valid_hyperedge_decomposition = false;
                                                break;
                                            }
                                        }
                                        if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == j && valid_hyperedge_decomposition)
                                        #else
                                        if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == j)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == k)  {
                                                    found_ijk = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rijk); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rijk); ii++)  {
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        if (hg.vertex_set[e2_].size() >= 4 && hg.vertex_set[e2_][ii] == i)
                                        #else
                                        if (hg.vertex_set[e2_].size() == 4 && hg.vertex_set[e2_][ii] == i)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    for (unsigned iiii=0; iiii<hg.vertex_set[e2_].size(); iiii++)  {
                                                        if (hg.vertex_set[e2_][iiii] == k)  {
                                                            found_rijk = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (HYPERGRAPHLETS_4)  {
                                    if (!found_rijk && !found_rik_ && !found_rjk_ && !found_ijk && found_rk)  {
										if (found_ri)  {
											if (found_rj)  {
												if (found_ij)  {
													if (found_ik)  {
														if (found_jk)  {
															//E1={R,A,B}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 333, e1, e5, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[333], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
															keys = generate_labels(mismatches, root, b, a, c, 233, e1, e6, e5, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[233], keys, mismatches);
														}
													}
													else  {
														if (found_jk)  {
															//E1={R,A,B}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 233, e1, e5, e6, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[233], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}
															keys = generate_labels(mismatches, root, a, b, c, 132, e1, e5, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[132], keys, mismatches);
														}
													}
												}
												else  {
													if (found_ik)  {
														if (found_jk)  {
															//E1={R,A,B}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 234, e1, e5, e6, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[234], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}
															keys = generate_labels(mismatches, root, b, a, c, 133, e1, e6, e5, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[133], keys, mismatches);
														}
													}
													else  {
														if (found_jk)  {
															//E1={R,A,B}, E5={R,A}, E6={R,B}, E7={R,C}, E10={B,C}
															 keys = generate_labels(mismatches, root, a, b, c, 133, e1, e5, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[133], keys, mismatches);
														}
														else {
															//E1={R,A,B}, E5={R,A}, E6={R,B}, E7={R,C}
															keys = generate_labels(mismatches, root, a, b, c, 58, e1, e5, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[58], keys, mismatches);
														}
													}
												}
											}
											else  {
												if (found_ij)  {
													if (found_ik)  {
														if (found_jk)  {
															//E1={R,A,B}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 249, e1, e5, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[249], keys, mismatches);														
														}
														else  {
															//E1={R,A,B}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}
															keys = generate_labels(mismatches, root, a, b, c, 142, e1, e5, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[142], keys, mismatches);
														}
													}
													else  {
														if (found_jk)  {
															//E1={R,A,B}, E5={R,A}, E7={R,C}, E8={A,B}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 154, e1, e5, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[154], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E5={R,A}, E7={R,C}, E8={A,B}
															keys = generate_labels(mismatches, root, a, b, c, 67, e1, e5, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[67], keys, mismatches);
														}
													}
												}
												else  {
													if (found_ik)  {
														if (found_jk)  {
															//E1={R,A,B}, E5={R,A}, E7={R,C}, E9={A,C}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 143, e1, e5, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[143], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E5={R,A}, E7={R,C}, E9={A,C}
															keys = generate_labels(mismatches, root, a, b, c, 62, e1, e5, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[62], keys, mismatches);
														}
													}
													else  {
														if (found_jk)  {
															//E1={R,A,B}, E5={R,A}, E7={R,C}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 68, e1, e5, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[68], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E5={R,A}, E7={R,C}
															keys = generate_labels(mismatches, root, a, b, c, 23, e1, e5, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[23], keys, mismatches);
														}
													}
												}
											}
										}
										else  {
											if (found_rj)  {
												if (found_ij)  {
													if (found_ik)  {
														if (found_jk)  {
															//E1={R,A,B}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
															keys = generate_labels(mismatches, root, b, a, c, 249, e1, e6, e7, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[249], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
															keys = generate_labels(mismatches, root, b, a, c, 154, e1, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[154], keys, mismatches);
														}
													}
													else  {
														if (found_jk)  {
															//E1={R,A,B}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
															keys = generate_labels(mismatches, root, b, a, c, 142, e1, e6, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[142], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E6={R,B}, E7={R,C}, E8={A,B}
															keys = generate_labels(mismatches, root, b, a, c, 67, e1, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[67], keys, mismatches);
														}
													}
												}
												else  {
													if (found_ik)  {
														if (found_jk)  {
															//E1={R,A,B}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
															keys = generate_labels(mismatches, root, b, a, c, 143, e1, e6, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[143], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E6={R,B}, E7={R,C}, E9={A,C}
															keys = generate_labels(mismatches, root, b, a, c, 68, e1, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[68], keys, mismatches);
														}
													}
													else  {
														if (found_jk)  {
															//E1={R,A,B}, E6={R,B}, E7={R,C}, E10={B,C}
															keys = generate_labels(mismatches, root, b, a, c, 62, e1, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[62], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E6={R,B}, E7={R,C}
															keys = generate_labels(mismatches, root, b, a, c, 23, e1, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[23], keys, mismatches);
														}
													}
												}
											}
											else  {
												if (found_ij)  {
													if (found_ik)  {
														if (found_jk)  {
															//E1={R,A,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 175, e1, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[175], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E7={R,C}, E8={A,B}, E9={A,C}
															keys = generate_labels(mismatches, root, a, b, c, 85, e1, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[85], keys, mismatches);
														}
													}
													else  {
														if (found_jk)  {
															//E1={R,A,B}, E7={R,C}, E8={A,B}, E10={B,C}
															keys = generate_labels(mismatches, root, b, a, c, 85, e1, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[85], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E7={R,C}, E8={A,B}
															keys = generate_labels(mismatches, root, a, b, c, 33, e1, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[33], keys, mismatches);
														}
													}
												}
												else  {
													if (found_ik)  {
														if (found_jk)  {
															//E1={R,A,B}, E7={R,C}, E9={A,C}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 80, e1, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[80], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E7={R,C}, E9={A,C}
															keys = generate_labels(mismatches, root, b, a, c, 29, e1, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[29], keys, mismatches);
														}
													}
													else  {
														if (found_jk)  {
															//E1={R,A,B}, E7={R,C}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 29, e1, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[29], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E7={R,C}
															keys = generate_labels(mismatches, root, a, b, c, 12, e1, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[12], keys, mismatches);
														}
													}
												}
											}
										}
                                    }
                                }
                            }
                        }
                    } //End of Case 0111, Type 3

                    // Case 0112, Type 2
                    for (unsigned edge_index1=0; edge_index1 < i_incident_edges.size(); edge_index1++)  {
                        unsigned e1_ = i_incident_edges[edge_index1];
                        bool invalid = false;
                        for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                        	unsigned e2_ = root_incident_edges[edge_index2];
                            if (e1_ == e2_)
                            	invalid = true;
                        }
                        for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                        	unsigned e2_ = j_incident_edges[edge_index2];
                            if (e1_ == e2_)
                            	invalid = true;
                        }
                        if (e1_ == e0_ || invalid)
                            continue;
                        for (unsigned iii_=0; iii_<hg.vertex_set[e1_].size(); iii_++)  {
                            #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                            if (hg.vertex_set[e1_].size() >= 2 && hg.vertex_set[e1_][iii_] != i)
                            #else
                            if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][iii_] != i)
                            #endif
                            {
                                k = hg.vertex_set[e1_][iii_];
                                if (k == hg_root || k == j || dist[k] > 2)
                                    continue;
                                e2.clear();
                                e3.clear();
                                e4.clear();
                                e5.clear();
                                e6.clear();
                                e7.clear();
                                e8.clear();
                                e9.clear();
                                e10.clear();
								c = hg.node_labels[k];
								insert_hyperedge_label(hg.edge_labels[e1_], e9);

								found_ri = false;
								found_rj = false;
                                found_rk_ = false;
                                found_ij = false;
                                found_ik = true;
                                found_jk = false;
                                found_rik_ = false;   
                                found_rjk_ = false;
                                found_ijk = false;                                                                                            
                                found_rijk = false;
                                k_incident_edges = hg.get_incident_edges(k);
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == i)  {
                                            found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == i)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
										#endif
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
										}
										#endif
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rk_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rk_); ii++)  {
                                    	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                    	if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][ii] == k)
                                    	#else
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)
                                        #endif
                                        {
                                            found_rk_ = true;
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8);
                                        }
										#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8); 
										}
										#endif
									}
								}
                                for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = j_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
										}
                                        #endif
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rik_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rik_); ii++)  {
                                    	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                    	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == k)
                                    	#else
                                        if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == k)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == i)  {
                                                    found_rik_ = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rjk_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rjk_); ii++)  {
                                    	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                    	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == k)
                                    	#else
                                        if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == k)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    found_rjk_ = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < i_incident_edges.size() && !found_ijk); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_ijk); ii++)  {
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        bool valid_hyperedge_decomposition(true);
                                        for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
                                             unsigned e3_ = root_incident_edges[edge_index3];
                                            if (e2_ == e3_)  {
                                                valid_hyperedge_decomposition = false;
                                                break;
                                            }
                                        }
                                        if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == j && valid_hyperedge_decomposition)
                                        #else
                                        if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == j)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == k)  {
                                                    found_ijk = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rijk); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rijk); ii++)  {
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        if (hg.vertex_set[e2_].size() >= 4 && hg.vertex_set[e2_][ii] == i)
                                        #else
                                        if (hg.vertex_set[e2_].size() == 4 && hg.vertex_set[e2_][ii] == i)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    for (unsigned iiii=0; iiii<hg.vertex_set[e2_].size(); iiii++)  {
                                                        if (hg.vertex_set[e2_][iiii] == k)  {
                                                            found_rijk = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (HYPERGRAPHLETS_4)  {
                                    if (!found_rijk && !found_rik_ && !found_rjk_ && !found_ijk && !found_rk_ && found_ik)  {
										if (found_ri)  {
											if (found_rj)  {
												if (found_ij)  {
													if (found_jk)  {
														//E1={R,A,B}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
														keys = generate_labels(mismatches, root, a, b, c, 248, e1, e5, e6, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[248], keys, mismatches);
													}
													else  {
														//E1={R,A,B}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}
														keys = generate_labels(mismatches, root, b, a, c, 141, e1, e6, e5, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[141], keys, mismatches);
													}
												}
												else  {
													if (found_jk)  {
														//E1={R,A,B}, E5={R,A}, E6={R,B}, E9={A,C}, E10={B,C}
														keys = generate_labels(mismatches, root, a, b, c, 153, e1, e5, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[153], keys, mismatches);
													}
													else  {
														//E1={R,A,B}, E5={R,A}, E6={R,B}, E9={A,C}
														keys = generate_labels(mismatches, root, b, a, c, 66, e1, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[66], keys, mismatches);
													}
												}
											}
											else  {
												if (found_ij)  {
													if (found_jk)  {
														//E1={R,A,B}, E5={R,A}, E8={A,B}, E9={A,C}, E10={B,C}
														keys = generate_labels(mismatches, root, a, b, c, 174, e1, e5, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[174], keys, mismatches);
													}
													else  {
														//E1={R,A,B}, E5={R,A}, E8={A,B}, E9={A,C}
														keys = generate_labels(mismatches, root, a, b, c, 79, e1, e5, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[79], keys, mismatches);
													}
												}
												else  {
													if (found_jk)  {
														//E1={R,A,B}, E5={R,A}, E9={A,C}, E10={B,C}
														keys = generate_labels(mismatches, root, a, b, c, 84, e1, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[84], keys, mismatches);
													}
													else  {
														//E1={R,A,B}, E5={R,A}, E9={A,C}
														keys = generate_labels(mismatches, root, b, a, c, 28, e1, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[28], keys, mismatches);
													}
												}
											}
										}
										else  {
											if (found_rj)  {
												if (found_ij)  {
													if (found_jk)  {
													    //E1={R,A,B}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
														keys = generate_labels(mismatches, root, b, a, c, 174, e1, e6, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[174], keys, mismatches);
													}
													else  {
														//E1={R,A,B}, E6={R,B}, E8={A,B}, E9={A,C}
														keys = generate_labels(mismatches, root, b, a, c, 83, e1, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[83], keys, mismatches);
													}
												}
												else  {
													if (found_jk)  {
		    											//E1={R,A,B}, E6={R,B}, E9={A,C}, E10={B,C}
														keys = generate_labels(mismatches, root, b, a, c, 84, e1, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[84], keys, mismatches);
													}
													else  {
														//E1={R,A,B}, E6={R,B}, E9={A,C}
														keys = generate_labels(mismatches, root, b, a, c, 32, e1, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[32], keys, mismatches);
													}
												}
											}
											else  {
												if (found_ij)  {
													if (found_jk)  {
														//E1={R,A,B}, E8={A,B}, E9={A,C}, E10={B,C}
														keys = generate_labels(mismatches, root, a, b, c, 112, e1, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[112], keys, mismatches);	
													}
													else  {
						                                //E1={R,A,B}, E8={A,B}, E9={A,C}
                                                        keys = generate_labels(mismatches, root, a, b, c, 43, e1, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                        increment_match_hash(hash[43], keys, mismatches);
													}
												}
												else  {
													if (found_jk)  {
														//E1={R,A,B}, E9={A,C}, E10={B,C}
														keys = generate_labels(mismatches, root, a, b, c, 44, e1, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[44], keys, mismatches);
													}
													else  {
														//E1={R,A,B}, E9={A,C}
														keys = generate_labels(mismatches, root, b, a, c, 15, e1, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[15], keys, mismatches);
													}
												}
											}
										}
                                    }
                                }
                            }
                        }
					} // End of Case 0112, Type 2
   
                    // Case 0112, Type 3
                    for (unsigned edge_index1=0; edge_index1 < j_incident_edges.size(); edge_index1++)  {
                        unsigned e1_ = j_incident_edges[edge_index1];
                        bool invalid = false;
                        for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                        	unsigned e2_ = root_incident_edges[edge_index2];
                            if (e1_ == e2_)
                            	invalid = true;
                        }
                        for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                        	unsigned e2_ = i_incident_edges[edge_index2];
                            if (e1_ == e2_)
                            	invalid = true;
                        }
                        if (e1_ == e0_ || invalid)
                            continue;
                        for (unsigned iii_=0; iii_<hg.vertex_set[e1_].size(); iii_++)  {
                            #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                            if (hg.vertex_set[e1_].size() >= 2 && hg.vertex_set[e1_][iii_] != j)
                            #else
                            if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][iii_] != j)
                            #endif
                            {
                                k = hg.vertex_set[e1_][iii_];
                                if (k == hg_root || k == j || dist[k] > 2)
                                    continue;
                                e2.clear();
                                e3.clear();
                                e4.clear();
                                e5.clear();
                                e6.clear();
                                e7.clear();
                                e8.clear();
                                e9.clear();
                                e10.clear();
								c = hg.node_labels[k];
								insert_hyperedge_label(hg.edge_labels[e1_], e10);

								found_ri = false;
								found_rj = false;
                                found_rk_ = false;
                                found_ij = false;
                                found_ik = false;
                                found_jk = true;
                                found_rik_ = false;   
                                found_rjk_ = false;
                                found_ijk = false;
                                found_rijk = false;
                                k_incident_edges = hg.get_incident_edges(k);
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == i)  {
                                            found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == i)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
										#endif
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
                                        }
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
										}
										#endif
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rk_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rk_); ii++)  {
                                    	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][ii] == k)
                                        #else
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)
                                        #endif
                                        {
                                            found_rk_ = true;
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8);
                                        }
										#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8); 
										}
										#endif
									}
								}
                                for (unsigned edge_index2=0; (edge_index2 < i_incident_edges.size() && !found_ik); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_ik); ii++)  {
                                    	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][ii] == k)
                                        #else
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)
                                        #endif
                                        {
                                                found_ik = true;
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rik_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rik_); ii++)  {
                                    	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                    	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == k)
                                    	#else
                                        if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == k)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == i)  {
                                                    found_rik_ = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rjk_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rjk_); ii++)  {
                                    	#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                    	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == k)
                                    	#else
                                        if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == k)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    found_rjk_ = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < i_incident_edges.size() && !found_ijk); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_ijk); ii++)  {
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        bool valid_hyperedge_decomposition(true);
                                        for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
                                             unsigned e3_ = root_incident_edges[edge_index3];
                                            if (e2_ == e3_)  {
                                                valid_hyperedge_decomposition = false;
                                                break;
                                            }
                                        }
                                        if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == j && valid_hyperedge_decomposition)
                                        #else
                                        if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == j)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == k)  {
                                                    found_ijk = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rijk); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rijk); ii++)  {
                                        #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                        if (hg.vertex_set[e2_].size() >= 4 && hg.vertex_set[e2_][ii] == i)
                                        #else
                                        if (hg.vertex_set[e2_].size() == 4 && hg.vertex_set[e2_][ii] == i)
                                        #endif
                                        {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    for (unsigned iiii=0; iiii<hg.vertex_set[e2_].size(); iiii++)  {
                                                        if (hg.vertex_set[e2_][iiii] == k)  {
                                                            found_rijk = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (HYPERGRAPHLETS_4)  {
                                    if (!found_rijk && !found_rik_ && !found_rjk_ && !found_ijk && !found_rk_ && !found_ik && found_jk)  {
                                        if (found_ri)  {
                                            if (found_rj)  {
                                    	        if (found_ij)  {
                                                    //E1={R,A,B}, E5={R,A}, E6={R,B}, E8={A,B}, E10={B,C}
                                                    keys = generate_labels(mismatches, root, a, b, c, 141, e1, e5, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[141], keys, mismatches);
                                                }
                                                else  {
                                                    //E1={R,A,B}, E5={R,A}, E6={R,B}, E10={B,C}
                                                    keys = generate_labels(mismatches, root, a, b, c, 66, e1, e5, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[66], keys, mismatches);
									            }
                                            }
                                            else  {
                                    	        if (found_ij)  {
                                                    //E1={R,A,B}, E5={R,A}, E8={A,B}, E10={B,C}
                                                    keys = generate_labels(mismatches, root, a, b, c, 83, e1, e5, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[83], keys, mismatches);
                                                }
                                                else  {
                                                    //E1={R,A,B}, E5={R,A}, E10={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 32, e1, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[32], keys, mismatches);
									            }
                                            }
                                        }
                                        else  {
                                            if (found_rj)  {
                                                if (found_ij)  {
                                                    //E1={R,A,B}, E6={R,B}, E8={A,B}, E10={B,C}
                                                    keys = generate_labels(mismatches, root, b, a, c, 79, e1, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[79], keys, mismatches);
                                                }
                                                else  {
                                                    //E1={R,A,B}, E6={R,B}, E10={B,C} 
													keys = generate_labels(mismatches, root, b, a, c, 28, e1, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[28], keys, mismatches);
                                                }
                                            }
                                            else  {
                                                if (found_ij)  {
                                                    //E1={R,A,B}, E8={A,B}, E10={B,C} 
                                                    keys = generate_labels(mismatches, root, b, a, c, 43, e1, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[43], keys, mismatches);
                                                }
                                                else  {
                                                    //E1={R,A,B}, E10={B,C}
                                    	            keys = generate_labels(mismatches, root, a, b, c, 15, e1, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[15], keys, mismatches);
                                                }
                                            }
                                        }
                                    }
								}
							}
						}
                    } // End of Case 0112, Type 3
				}
			}
            #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
			else if (hg.vertex_set[e0_].size() >= 4)
            #else
            else if (hg.vertex_set[e0_].size() == 4)
            #endif
            {
				i = hg.vertex_set[e0_][i_];
				if (i == hg_root)
					continue;
				e1.clear();
				e2.clear();
				e3.clear();
				e4.clear();
				e5.clear();
				e6.clear();
				e7.clear();
				e8.clear();
				e9.clear();
				e10.clear();
				e11.clear();
				a = hg.node_labels[i];
				insert_hyperedge_label(hg.edge_labels[e0_], e1);
				
				#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
				found_ri_ = false;
				for (unsigned edge_index1=0; (edge_index1 < root_incident_edges.size() && !found_ri_); edge_index1++)  {
					unsigned e1_ = root_incident_edges[edge_index1];
					for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
						if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii] == i)  {
							found_ri_ = true;
							bool found = search_hyperedge_label(hg.edge_labels[e1_], e1);
							if (!found || DISABLE_MULTIPLICITY == 0)  {
								found_ri_ = false;
							}
						}
					}
				}
                // Case 01 by decomposing E1 (|E1| >= 4) to E1={R,A}
                if (HYPERGRAPHLETS_2)  {
                    if (!found_ri_)  {
                        //E1={R,A}
                        keys = generate_labels(mismatches, root, a, ZERO_CHAR, ZERO_CHAR, 1, e1, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                        increment_match_hash(hash[1], keys, mismatches);
                    }
                }

                // Case 011, Type 1 by decomposing E1 (|E1| >= 4) to E1={R,A}
                for (unsigned edge_index1=0; (edge_index1 < root_incident_edges.size() && !found_ri_); edge_index1++)  {
                    unsigned e1_ = root_incident_edges[edge_index1];
                    if (e0_ == e1_)
                    	continue;
                    for (unsigned ii_=0; ii_<hg.vertex_set[e1_].size(); ii_++)  {
                        if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii_] != hg_root)  {
                            j = hg.vertex_set[e1_][ii_];
                            if (j == i)
								continue;
							bool valid = true;
							for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
                            	if (hg.vertex_set[e0_][ii] == j)
                            		valid = false;
                            }
                            if (!valid)
                            	continue;
							e2.clear();
							e5.clear();
							b = hg.node_labels[j];
							insert_hyperedge_label(hg.edge_labels[e1_], e2);
							
                            found_ij = false;
                            found_rij_ = false;
                            i_incident_edges = hg.get_incident_edges(i);
                            j_incident_edges = hg.get_incident_edges(j);
                            //JLM: Add check to avoid double counting 
							for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
								unsigned e2_ = root_incident_edges[edge_index2];
								for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
									if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
										insert_hyperedge_label(hg.edge_labels[e2_], e2);
									}
								}
							}
                            if (i_incident_edges.size() < j_incident_edges.size())  {
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5); 
										}
                                    }
                                }
                            }
                            else  {
                                for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = j_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == i)  {
                                            found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == i)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
                                    }
								}
							}
                        	for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rij_); edge_index2++)  {
								unsigned e2_ = root_incident_edges[edge_index2];
								for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rij_); ii++)  {
                                    if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == i)  {
                                        for (unsigned iii=0; (iii<hg.vertex_set[e2_].size() && !found_rij_); iii++)  {
                                            if (hg.vertex_set[e2_][iii] == j)  {
												found_rij_ = true;
											}
										}
									}
								}
							}
							if (found_rij_)
								continue;
							// Case 011 by decomposing E1 (|E1| >= 4) to E1={R,A}
                            if (HYPERGRAPHLETS_3)  {
                                if (!found_rij_)  {
                                    if (found_ij)  {
                                        //E1={R,A}, E2={R,B}, E5={A,B}
                                        keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 7, e1, e2, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                        increment_match_hash(hash[7], keys, mismatches);
                                    }
                                    else  {
                                        //E1={R,A}, E2={R,B}
                                        keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 4, e1, e2, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                        increment_match_hash(hash[4], keys, mismatches);
                                    }
                                }
                            }
                            
                            // Case 0111
                            for (unsigned edge_index2=0; edge_index2 < edge_index1; edge_index2++)  {
                            	unsigned e2_ = root_incident_edges[edge_index2];
                            	if (e0_ == e2_)
                            		continue;
                                for (unsigned iii_=0; iii_<hg.vertex_set[e2_].size(); iii_++)  {
                                	if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][iii_] != hg_root)  {
										k = hg.vertex_set[e2_][iii_];
										if (k == i || k == j)
											continue;
										bool valid = true;
										for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
                            				if (hg.vertex_set[e0_][ii] == k)
                            					valid = false;
                            			}
                            			if (!valid)
                            				continue;
										e3.clear();
										e4.clear();
										e5.clear();	
										e6.clear();
										e7.clear();
										c = hg.node_labels[k];
										insert_hyperedge_label(hg.edge_labels[e2_], e3);

										found_ij = false;
                                        found_ik = false;
                                        found_jk = false;
                                        found_rik_ = false;
                                        found_rjk_ = false;
                                        found_ijk = false;
                                        found_rijk = false;
                                    	k_incident_edges = hg.get_incident_edges(k);
                                    	//JLM: Add check to avoid double counting 
                                    	for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  { 
											unsigned e3_ = root_incident_edges[edge_index3];
											for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
												if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == k)  {
													insert_hyperedge_label(hg.edge_labels[e3_], e3);
												}
											}
										}
                                        for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
                                        	unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                            	if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == j)  {
													found_ij = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e5);
												}
                                        		bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == j)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < k_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = k_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_ij = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e5); 
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                                if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)  {
													found_ik = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e6);
                                                }
                                                bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < j_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = j_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_ik = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e6); 
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = j_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                                if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)  {
													found_jk = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e7);
                                                }
                                                bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < i_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = i_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_jk = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e7);
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rik_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rik_); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == i)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rik_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rjk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rjk_); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rjk_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
										for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                                bool valid_hyperedge_decomposition(true);
                                                for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                    unsigned e4_ = root_incident_edges[edge_index4];
                                                    if (e3_ == e4_)  {
                                                        valid_hyperedge_decomposition = false;
                                                        break;
                                                    }
                                                }
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j && valid_hyperedge_decomposition)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_ijk = true;
															insert_hyperedge_label(hg.edge_labels[e3_], e4);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rijk); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rijk); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 4 && hg.vertex_set[e3_][ii] == i)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == j)  {
                                                            for (unsigned iiii=0; iiii<hg.vertex_set[e3_].size(); iiii++)  {
																if (hg.vertex_set[e3_][iiii] == k)  {
																	found_rijk = true;
																}
															}
														}
													}
                                                }
                                            }
                                        }
                                        // Case 0111, Type 1
                                        if (HYPERGRAPHLETS_4)  { 
                                            if (!found_rijk && !found_rij_ && !found_rik_ && !found_rjk_)  {
                                                if (found_ijk) {
                                                    if (found_ij)  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 334, e1, e2, e3, e4, e5, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[334], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 235, e1, e2, e3, e4, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[235], keys, mismatches);
                                                            }
                                                        }
                                                        else  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, b, a, c, 235, e2, e1, e3, e4, e5, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[235], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E5={A,B}
                                                                keys = generate_labels(mismatches, root, a, b, c, 134, e1, e2, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[134], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                    else  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E6={A,C}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, c, a, b, 235, e3, e1, e2, e4, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[235], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E6={A,C}
                                                                keys = generate_labels(mismatches, root, a, c, b, 134, e1, e3, e2, e4, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[134], keys, mismatches);
                                                            }
                                                        }
                                                        else  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, b, c, a, 134, e2, e3, e1, e4, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[134], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 59, e1, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[59], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                }
                                                else  {
                                                    if (found_ij)  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E5={A,B}, E6={A,C}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 232, e1, e2, e3, e5, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[232], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E5={A,B}, E6={A,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 131, e1, e2, e3, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[131], keys, mismatches);
                                                            }
                                                        }
                                                        else  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E5={A,B}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, b, a, c, 131, e2, e1, e3, e5, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[131], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E5={A,B}
                                                                keys = generate_labels(mismatches, root, a, b, c, 57, e1, e2, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[57], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                    else  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E6={A,C}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, c, a, b, 131, e3, e1, e2, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[131], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E6={A,C}
                                                                keys = generate_labels(mismatches, root, a, c, b, 57, e1, e3, e2, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[57], keys, mismatches);
                                                            }
                                                        }
                                                        else  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}, E7={B,C}
                                                                keys = generate_labels(mismatches, root, b, c, a, 57, e2, e3, e1, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[57], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={R,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 21, e1, e2, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[21], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
									}
								}
							}
						}
					}
				}

                // Case 011, Type 2 by decomposing E1 (|E1| >= 4) to E1={R,A}
                for (unsigned edge_index1=0; (edge_index1 < root_incident_edges.size() && !found_ri_); edge_index1++)  {
                    unsigned e1_ = root_incident_edges[edge_index1];
                    for (unsigned ii_=0; ii_<hg.vertex_set[e1_].size(); ii_++)  {
                        if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii_] != hg_root)  {
							j = hg.vertex_set[e1_][ii_];
							if (j == i)
								continue;
							bool valid = true;
							for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
                            	if (hg.vertex_set[e0_][ii] == j)
                            		valid = false;
                            }
                            if (!valid)
                            	continue;
                            e2.clear();
                            b = hg.node_labels[j];
							insert_hyperedge_label(hg.edge_labels[e1_], e2);

							found_ij = false;
                            found_rij_ = false;
                            //JLM: Add check to avoid double counting 
                            for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  { 
								unsigned e2_ = root_incident_edges[edge_index2];
								for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
									if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
										insert_hyperedge_label(hg.edge_labels[e2_], e2);
									}
								}
							}
                            for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rij_); edge_index2++)  {
                                unsigned e2_ = root_incident_edges[edge_index2];
                                for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rij_); ii++)  {
									if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == i)  {
                                        for (unsigned iii=0; (iii<hg.vertex_set[e2_].size() && !found_rij_); iii++)  {
                                            if (hg.vertex_set[e2_][iii] == j)  {
												found_rij_ = true;
											}
										}
									}
								}
							}
                            // Case 0112
                            i_incident_edges = hg.get_incident_edges(i); 
                            for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                                unsigned e2_ = i_incident_edges[edge_index2];
								bool valid = true;
								for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
									unsigned e3_ = root_incident_edges[edge_index3];
									if (e2_ == e3_)
										valid = false;
								}
								if (!valid)
									continue;
                                for (unsigned iii_=0; iii_<hg.vertex_set[e2_].size(); iii_++)  {
                                    if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][iii_] != i)  {
										k = hg.vertex_set[e2_][iii_];
                                        if (k == hg_root || k == j)
                                            continue;
                                        bool valid = true;
										for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
                            				if (hg.vertex_set[e0_][ii] == k)
                            					valid = false;
                            			}
                        				if (!valid)
                        					continue;
                                        e3.clear();
                                        e4.clear();
                                        e5.clear();
                                        e6.clear();
										c = hg.node_labels[k];

                                        unsigned e_ijk(UINT_MAX), e_ik(UINT_MAX);
                                        found_rk_ = false;
                                        found_ij = false;
                                        found_ik = false;
                                        found_jk = false;
                                        found_rik_ = false;
                                        found_rjk_ = false;
                                        found_ijk = false;
                                        found_rijk = false;
                                        j_incident_edges = hg.get_incident_edges(j);
                                        k_incident_edges = hg.get_incident_edges(k);
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rk_); ii++)  {
                                            	if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    found_rk_ = true;
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
                                        	unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                            	if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == j)  {
													found_ij = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e4);
												}
                                        		bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == j)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < k_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = k_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_ij = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e4); 
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
												if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)  {
													found_ik = true;
                                                    e_ik = edge_index3;
													insert_hyperedge_label(hg.edge_labels[e3_], e5);
                                                }
                                                bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < j_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = j_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_ik = true;
													e_ik = edge_index3;
													insert_hyperedge_label(hg.edge_labels[e3_], e5);
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = j_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
												if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)  {
												    found_jk = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e6);
                                                }
                                                bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < i_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = i_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_jk = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e6);
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rik_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rik_); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == i)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rik_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rjk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rjk_); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rjk_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
											unsigned e3_ = i_incident_edges[edge_index3];
											for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                                bool valid_hyperedge_decomposition(true);
                                                for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                    unsigned e4_ = root_incident_edges[edge_index4];
                                                    if (e3_ == e4_)  {
                                                        valid_hyperedge_decomposition = false;
                                                        break;
                                                    }
                                                }
												if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j && valid_hyperedge_decomposition)  {
													for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
														if (hg.vertex_set[e3_][iii] == k)  {
															found_ijk = true;
                                                            e_ijk = edge_index3;
															insert_hyperedge_label(hg.edge_labels[e3_], e3);
														}
													}
												}
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rijk); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rijk); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 4 && hg.vertex_set[e3_][ii] == i)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == j)  {
                                                            for (unsigned iiii=0; iiii<hg.vertex_set[e3_].size(); iiii++)  {
																if (hg.vertex_set[e3_][iiii] == k)  {
																	found_rijk = true;
																}
															}
														}
													}
                                                }
                                            }
                                        }
                                        if (HYPERGRAPHLETS_4)  {
                                            if (!found_rijk && !found_rij_ && !found_rik_ && !found_rjk_ && !found_rk_ && (edge_index2 == e_ijk || edge_index2 == e_ik))  {
                                                if (found_ijk)  {
                                                    if (found_ij)  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                if (edge_index2 == e_ijk)  {
                                                                    //E1={R,A}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={B,C}
                                                                    keys = generate_labels(mismatches, root, a, b, c, 250, e1, e2, e3, e4, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[250], keys, mismatches);
                                                                }
                                                            }
                                                            else  {
                                                                if (edge_index2 == e_ijk)  {
                                                                    //E1={R,A}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={A,C}
                                                                    keys = generate_labels(mismatches, root, b, a, c, 144, e2, e1, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                	increment_match_hash(hash[144], keys, mismatches);
                                                                }
                                                            }
                                                        }
                                                        else  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E3={A,B,C}, E4={A,B}, E6={B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 144, e1, e2, e3, e4, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[144], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={A,B,C}, E4={A,B}
                                                                keys = generate_labels(mismatches, root, a, b, c, 63, e1, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[63], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                    else  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                if (edge_index2 == e_ijk)  {
                                                                    //E1={R,A}, E2={R,B}, E3={A,B,C}, E5={A,C}, E6={B,C}
                                                                    keys = generate_labels(mismatches, root, a, b, c, 155, e1, e2, e3, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[155], keys, mismatches);
                                                                }
                                                            }
                                                            else  {
                                                                if (edge_index2 == e_ijk)  {
                                                                    //E1={R,A}, E2={R,B}, E3={A,B,C}, E5={A,C}
                                                                    keys = generate_labels(mismatches, root, b, a, c, 69, e2, e1, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[69], keys, mismatches);
                                                                }
                                                            }
                                                        }
                                                        else  {
                                                            if (found_jk)  {
                                                            	//E1={R,A}, E2={R,B}, E3={A,B,C}, E6={B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 69, e1, e2, e3, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[69], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E3={A,B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 24, e1, e2, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[24], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                }
                                                else  {
                                                    if (found_ij)  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E4={A,B}, E5={A,C}, E6={B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 140, e1, e2, e4, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[140], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E4={A,B}, E5={A,C}
                                                                keys = generate_labels(mismatches, root, b, a, c, 61, e2, e1, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[61], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                    else  {
                                                        if (found_ik)  {
                                                            if (found_jk)  {
                                                                //E1={R,A}, E2={R,B}, E5={A,C}, E6={B,C}
                                                                keys = generate_labels(mismatches, root, a, b, c, 65, e1, e2, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[65], keys, mismatches);
                                                            }
                                                            else  {
                                                                //E1={R,A}, E2={R,B}, E5={A,C}                                                                
                                                                keys = generate_labels(mismatches, root, b, a, c, 22, e2, e1, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                increment_match_hash(hash[22], keys, mismatches);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
									}
                                }
                            }
                        }
                    }
                }
                
                // Case 012, Type 1 by decomposing E1 (|E1| >= 4) to E1={R,A}
                i_incident_edges = hg.get_incident_edges(i);
                for (unsigned edge_index1=0; (edge_index1 < i_incident_edges.size() && !found_ri_); edge_index1++)  {
                	unsigned e1_ = i_incident_edges[edge_index1];
                    for (unsigned ii_=0; ii_<hg.vertex_set[e1_].size(); ii_++)  {
                        if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii_] != i)  {
							j = hg.vertex_set[e1_][ii_];
                            if (j == hg_root)
								continue;
							bool valid = true;
							for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
                            	if (hg.vertex_set[e0_][ii] == j)
                            		valid = false;
                            }
                            if (!valid)
                            	continue;
							e3.clear();
                            b = hg.node_labels[j];
							insert_hyperedge_label(hg.edge_labels[e1_], e3);

                            found_rj_ = false;
                            found_rij_ = false;
                            j_incident_edges = hg.get_incident_edges(j); 
                            for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rj_); edge_index2++)  {
                                unsigned e2_ = root_incident_edges[edge_index2];
                                for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rj_); ii++)  {
                                	if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][ii] == j)  {
                                        found_rj_ = true;
                                    }
                                }
                            }
                            for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rij_); edge_index2++)  {
                                unsigned e2_ = root_incident_edges[edge_index2];
                                for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rij_); ii++)  {
                                    if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == i)  {
                                        for (unsigned iii=0; (iii<hg.vertex_set[e2_].size() && !found_rij_); iii++)  {
                                            if (hg.vertex_set[e2_][iii] == j)  {
												found_rij_ = true;
											}
										}
									}
								}
							}
							if (found_rij_)
								continue;
                            if (HYPERGRAPHLETS_3)  {
                                if (!found_rij_ && !found_rj_)  {
                                    //E1={R,A}, E3={A,B}
                                    keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 3, e1, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                    increment_match_hash(hash[3], keys, mismatches);
                                }
                            }
                            
							// Case 0122, Type 1
							for (unsigned edge_index2=0; edge_index2 < edge_index1; edge_index2++)  {
                                unsigned e2_ = i_incident_edges[edge_index2];
                                for (unsigned iii_=0; iii_<hg.vertex_set[e2_].size(); iii_++)  {
                                    if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][iii_] != i)  {
										k = hg.vertex_set[e2_][iii_];
										if (k == hg_root || k == j)
											continue;
										bool valid = true;
										for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
                            				if (hg.vertex_set[e0_][ii] == k)
                            					valid = false;
                            			}
                            			if (!valid)
                            				continue;
                                        e2.clear(); 
                                        e4.clear();
                                        e5.clear();
                                        c = hg.node_labels[k];
                                        insert_hyperedge_label(hg.edge_labels[e2_], e4);
                                        
                                        found_rk_ = false;
                                        found_jk = false;
                                        found_rik_ = false;
                                        found_rjk_ = false;
                                        found_ijk = false;
                                        found_rijk = false;
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rk_); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    found_rk_ = true;
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = j_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                                if (hg.vertex_set[e3_].size() == 2 && hg.vertex_set[e3_][ii] == k)  {
													found_jk = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e5);
												}
                                                bool valid_hyperedge_decomposition(false);
                                                if (hg.vertex_set[e3_].size() > 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    valid_hyperedge_decomposition = true;
                                                    for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = root_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                    for (unsigned edge_index4=0; edge_index4 < i_incident_edges.size(); edge_index4++)  {
                                                        unsigned e4_ = i_incident_edges[edge_index4];
                                                        if (e3_ == e4_)  {
                                                            valid_hyperedge_decomposition = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (valid_hyperedge_decomposition)  {
													found_jk = true;
													insert_hyperedge_label(hg.edge_labels[e3_], e5);
												}
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rik_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rik_); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == i)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rik_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rjk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rjk_); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rjk_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; ii<hg.vertex_set[e3_].size(); ii++)  {
                                                bool valid_hyperedge_decomposition(true);
                                                for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                    unsigned e4_ = root_incident_edges[edge_index4];
                                                    if (e3_ == e4_)  {
                                                        valid_hyperedge_decomposition = false;
                                                        break;   
                                                    }
                                                }
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j && valid_hyperedge_decomposition)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_ijk = true;
															insert_hyperedge_label(hg.edge_labels[e3_], e2);
														}
													}
												}
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rijk); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rijk); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 4 && hg.vertex_set[e3_][ii] == i)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == j)  {
                                                            for (unsigned iiii=0; iiii<hg.vertex_set[e3_].size(); iiii++)  {
																if (hg.vertex_set[e3_][iiii] == k)  {
																	found_rijk = true;
																}
															}
														}
													}
                                                }
                                            }
                                        }
                                        if (HYPERGRAPHLETS_4)  {
                                        	if (!found_rijk && !found_rij_ && !found_rik_ && !found_rjk_ && !found_rj_ && !found_rk_)  {
                                                if (found_ijk)  {
													if (found_jk)  {
														//E1={R,A}, E2={A,B,C}, E3={A,B}, E4={A,C}, E5={B,C}
														keys = generate_labels(mismatches, root, a, b, c, 176, e1, e2, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[176], keys, mismatches);
													}
													else  {
														//E1={R,A}, E2={A,B,C}, E3={A,B}, E4={A,C}
														keys = generate_labels(mismatches, root, a, b, c, 81, e1, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[81], keys, mismatches);
													}
												}
                                                else  {
													if (found_jk)  {
														//E1={R,A}, E3={A,B}, E4={A,C}, E5={B,C}
														keys = generate_labels(mismatches, root, a, b, c, 78, e1, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[78], keys, mismatches);
													}
													else  {
														//E1={R,A}, E3={A,B}, E4={A,C}
														keys = generate_labels(mismatches, root, a, b, c, 26, e1, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[26], keys, mismatches);
													}
                                                }
                                            }
                                        }
								    }
							    }
                            }
                            
                            // Case 0123, Type 1
                            j_incident_edges = hg.get_incident_edges(j);
                            for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                unsigned e2_ = j_incident_edges[edge_index2];
                                bool valid = true;
								for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
									unsigned e3_ = root_incident_edges[edge_index3];
									if (e2_ == e3_)
										valid = false;
								}
								for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
									unsigned e3_ = i_incident_edges[edge_index3];
									if (e2_ == e3_)
										valid = false;
								}
								if (!valid)
									continue;
                                for (unsigned iii_=0; iii_<hg.vertex_set[e2_].size(); iii_++)  {
                                    if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][iii_] != j)  {
										k = hg.vertex_set[e2_][iii_];
										if (k == hg_root || k == i)
											continue;
										bool valid = true;
										for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
                            				if (hg.vertex_set[e0_][ii] == k)
                            					valid = false;
                            			}
                            			if (!valid)
                            				continue;
                                        e5.clear();
                                        c = hg.node_labels[k];
                                        insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        
                                        found_rk_ = false;
                                        found_ik = false;
                                        found_jk = true;
                                        found_rik_ = false;
                                        found_rjk_ = false;
										found_ijk = false;
                                        found_rijk = false;
                                        k_incident_edges = hg.get_incident_edges(k);
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rk_); ii++)  {
                                            	if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    found_rk_ = true;
                                                }
                                            }
                                        }
                                        if (i_incident_edges.size() < k_incident_edges.size())  {
                                            for (unsigned edge_index3=0; (edge_index3 < i_incident_edges.size() && !found_ik); edge_index3++)  {
                                                unsigned e3_ = i_incident_edges[edge_index3];
                                                for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_ik); ii++)  {
                                                	if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == k)  {
														found_ik = true;
													}
												}
											}
										}
                                        else  {
                                            for (unsigned edge_index3=0; (edge_index3 < k_incident_edges.size() && !found_ik); edge_index3++)  {
                                                unsigned e3_ = k_incident_edges[edge_index3];
                                                for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_ik); ii++)  {
                                                	if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == i)  {
														found_ik = true;
													}
												} 
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rik_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rik_); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rik_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rjk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rjk_); ii++)  {
                                            	if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rjk_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < i_incident_edges.size() && !found_ijk); edge_index3++)  {
                                            unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_ijk); ii++)  {
                                                bool valid_hyperedge_decomposition(true);
                                                for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                    unsigned e4_ = root_incident_edges[edge_index4];
                                                    if (e3_ == e4_)  {
                                                        valid_hyperedge_decomposition = false;
                                                        break;
                                                    }
                                                }
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j && valid_hyperedge_decomposition)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
														if (hg.vertex_set[e3_][iii] == k)  {
															found_ijk = true;
														}
													}
												}
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rijk); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rijk); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 4 && hg.vertex_set[e3_][ii] == i)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == j)  {
                                                            for (unsigned iiii=0; iiii<hg.vertex_set[e3_].size(); iiii++)  {
																if (hg.vertex_set[e3_][iiii] == k)  {
																	found_rijk = true;
																}
															}
														}
													}
                                                }
                                            }
                                        }
                                        if (HYPERGRAPHLETS_4)  {
                                            if (!found_rijk && !found_rij_ && !found_rik_ && !found_rjk_ && !found_rj_ && !found_rk_ && !found_ik && !found_ijk && found_jk)  {
                                                //E1={R,A}, E3={A,B}, E5={B,C}
                                                keys = generate_labels(mismatches, root, a, b, c, 27, e1, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                increment_match_hash(hash[27], keys, mismatches);
                                            }
                                        }
                                    }
								}
							}
						}
					}
				}

                // Case 012, Type 2 by decomposing E1 (|E1| >= 4) to E1={R,A}
                i_incident_edges = hg.get_incident_edges(i); 
                for (unsigned edge_index1=0; (edge_index1 < i_incident_edges.size() && !found_ri_); edge_index1++)  {
                    unsigned e1_ = i_incident_edges[edge_index1];
                    for (unsigned ii_=0; ii_<hg.vertex_set[e1_].size(); ii_++)  {
                        bool valid_hyperedge_decomposition(true);
                        for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                        	unsigned e2_ = root_incident_edges[edge_index2];
                            if (e1_ == e2_)  {
                            	valid_hyperedge_decomposition = false;
                                break;
                            }
                        }
                        if (hg.vertex_set[e1_].size() >= 3 && hg.vertex_set[e1_][ii_] != i && valid_hyperedge_decomposition)  {
							j = hg.vertex_set[e1_][ii_];
                            if (j == hg_root)
								continue;
							bool valid = true;
							for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
                            	if (hg.vertex_set[e0_][ii] == j)
                            		valid = false;
                            }
                            if (!valid)
                            	continue;
							e2.clear(); 
                            b = hg.node_labels[j];
							insert_hyperedge_label(hg.edge_labels[e1_], e2);

							found_rj_ = false;
                            found_rij_ = false;
                            j_incident_edges = hg.get_incident_edges(j); 
                            for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rj_); edge_index2++)  {
                                unsigned e2_ = root_incident_edges[edge_index2];
                                for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rj_); ii++)  {
                                	if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][ii] == j)  {
                                        found_rj_ = true;
                                    }
                                }
                            }
                            for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rij_); edge_index2++)  {
                                unsigned e2_ = root_incident_edges[edge_index2];
                                for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rij_); ii++)  {
                                	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == i)  {
                                        for (unsigned iii=0; (iii<hg.vertex_set[e2_].size() && !found_rij_); iii++)  {
                                            if (hg.vertex_set[e2_][iii] == j)  {
												found_rij_ = true;
											}
										}
									}
								}
							}
							if (found_rij_)
								continue;
							if (HYPERGRAPHLETS_3)  {
                                if (!found_rij_ && !found_rj_)  {
                                    //E1={R,A}, E2={A,B} (by decomposing E2={A,B,C} to E2={A,B})
                                    keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 3, e1, e2, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                    increment_match_hash(hash[3], keys, mismatches);
                                }
                            }
                            
							// Case 0122, Type 2
							for (unsigned iii_=0; iii_<ii_; iii_++)  {
								k = hg.vertex_set[e1_][iii_];
								if (k == hg_root || k == i || k == j)
									continue;
								bool valid = true;
								for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
									if (hg.vertex_set[e0_][ii] == k)
										valid = false;
								}
								if (!valid)
									continue;
								e3.clear();		
								e4.clear();
                            	e5.clear();
								c = hg.node_labels[k];

								found_rk_ = false;
								found_ij = false;
								found_ik = false;
								found_jk = false;
								found_rik_ = false;
								found_rjk_ = false;
								found_ijk = true;
								found_rijk = false;
								k_incident_edges = hg.get_incident_edges(k);
								for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rk_); edge_index2++)  {
									unsigned e2_ = root_incident_edges[edge_index2];
									for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rk_); ii++)  {
										if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][ii] == k)  {
											found_rk_ = true;
										}
									} 
								}
								for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
											found_ij = true;
                                            insert_hyperedge_label(hg.edge_labels[e2_], e3);
										}
									}
								}
								for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
											found_ik = true;
                                            insert_hyperedge_label(hg.edge_labels[e2_], e4);
										}
									}
								}
								if (found_ij && found_ik)  {
									vector<char> e3_temp(e3), e4_temp(e4);
									e3.clear();
									e4.clear();
									found_ij = false;
									found_ik = false;
									for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = i_incident_edges[edge_index2];
										for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
											bool valid_hyperedge_decomposition(false);
											if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
												valid_hyperedge_decomposition = true;
												if (e1_ == e2_)
                            						valid_hyperedge_decomposition = false;
												for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
													unsigned e3_ = root_incident_edges[edge_index3];
													if (e2_ == e3_)  {
														valid_hyperedge_decomposition = false;
														break;
													}
												}
												for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
													unsigned e3_ = k_incident_edges[edge_index3];
													if (e2_ == e3_)  {
														valid_hyperedge_decomposition = false;
														break;
													}
												}
											}
											if (valid_hyperedge_decomposition)  {
												bool found = search_hyperedge_label(hg.edge_labels[e2_], e3_temp);
												if (!found || DISABLE_MULTIPLICITY == 0)  {
													found_ij = true;
													insert_hyperedge_label(hg.edge_labels[e2_], e3);
												}
											}
										}
									}	
									for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = i_incident_edges[edge_index2];
										for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
											bool valid_hyperedge_decomposition(false);
											if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
												valid_hyperedge_decomposition = true;
												if (e1_ == e2_)
                            						valid_hyperedge_decomposition = false;
												for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
													unsigned e3_ = root_incident_edges[edge_index3];
													if (e2_ == e3_)  {
														valid_hyperedge_decomposition = false;
														break;
													}
												}
												for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
													unsigned e3_ = j_incident_edges[edge_index3];
													if (e2_ == e3_)  {
														valid_hyperedge_decomposition = false;
														break;
													}
												}
											}
											if (valid_hyperedge_decomposition)  {
												bool found = search_hyperedge_label(hg.edge_labels[e2_], e4_temp);
												if (!found || DISABLE_MULTIPLICITY == 0)  {
													found_ik = true;
													insert_hyperedge_label(hg.edge_labels[e2_], e4);
												}
											}
										}
									}
								}
								for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = j_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
											found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											if (e1_ == e2_)
                            					valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
									}
								}
								for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rik_); edge_index2++)  {
									unsigned e2_ = root_incident_edges[edge_index2];
									for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rik_); ii++)  {
										if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == i)  {
											for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
												if (hg.vertex_set[e2_][iii] == k)  {
													found_rik_ = true;
												}
											}
										}
									}
								}
								for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rjk_); edge_index2++)  {
									unsigned e2_ = root_incident_edges[edge_index2];
									for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rjk_); ii++)  {
										if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == j)  {
											for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
												if (hg.vertex_set[e2_][iii] == k)  {
													found_rjk_ = true;
												}
											}
										}
									}
								}
								for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rijk); edge_index2++)  {
									unsigned e2_ = root_incident_edges[edge_index2];
									for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rijk); ii++)  {
										if (hg.vertex_set[e2_].size() >= 4 && hg.vertex_set[e2_][ii] == i)  {
											for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
												if (hg.vertex_set[e2_][iii] == j)  {
													for (unsigned iiii=0; iiii<hg.vertex_set[e2_].size(); iiii++)  {
														if (hg.vertex_set[e2_][iiii] == k)  {
															found_rijk = true;
														}
													}
												}
											}
										}
									}
								}
								if (HYPERGRAPHLETS_4)  {
									if (!found_rijk && !found_rij_ && !found_rik_ && !found_rjk_ && !found_rj_ && !found_rk_)  {
										if (found_ij)  {
                                            if (found_ik)  {
											    if (found_jk)  {
                                                    //E1={R,A}, E2={A,B,C}, E3={A,B}, E4={A,C}, E5={B,C}
												    keys = generate_labels(mismatches, root, a, b, c, 176, e1, e2, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[176], keys, mismatches);
												}
											    else  {
                                                    //E1={R,A}, E2={A,B,C}, E3={A,B}, E4={A,C}
                                                    keys = generate_labels(mismatches, root, a, b, c, 81, e1, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[81], keys, mismatches);
                                                }
                                            }
                                            else  {
                                                if (found_jk)  {
                                                    //E1={R,A}, E2={A,B,C}, E3={A,B}, E5={B,C}
                                                    keys = generate_labels(mismatches, root, a, b, c, 86, e1, e2, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[86], keys, mismatches);
                                                }
                                                else  {
												    //E1={R,A}, E2={A,B,C}, E3={A,B}
												    keys = generate_labels(mismatches, root, a, b, c, 30, e1, e2, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
												    increment_match_hash(hash[30], keys, mismatches);
                                                }
                                            }
										}
										else  {
                                            if (found_ik)  {
                                                if (found_jk)  {
                                                    //E1={R,A}, E2={A,B,C}, E4={A,C}, E5={B,C}
                                                    keys = generate_labels(mismatches, root, a, c, b, 86, e1, e2, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[86], keys, mismatches);

                                                }
                                                else  {
												    //E1={R,A}, E2={A,B,C}, E4={A,C}
												    keys = generate_labels(mismatches, root, a, c, b, 30, e1, e2, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
												    increment_match_hash(hash[30], keys, mismatches);
                                                }
                                            }
                                            else  {
											    if (found_jk)  {
												    //E1={R,A}, E2={A,B,C}, E5={B,C}
												    keys = generate_labels(mismatches, root, a, b, c, 34, e1, e2, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
												    increment_match_hash(hash[34], keys, mismatches);
											    }
											    else  {
												    //E1={R,A}, E2={A,B,C}
												    keys = generate_labels(mismatches, root, a, b, c, 13, e1, e2, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
												    increment_match_hash(hash[13], keys, mismatches);
											    }
                                            }
										}
									}
								}
							}
							
							// Case 0123, Type 2
                            j_incident_edges = hg.get_incident_edges(j);
                            for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                unsigned e2_ = j_incident_edges[edge_index2];
                                bool valid = true;
								for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
									unsigned e3_ = root_incident_edges[edge_index3];
									if (e2_ == e3_)
										valid = false;
								}
								for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
									unsigned e3_ = i_incident_edges[edge_index3];
									if (e2_ == e3_)
										valid = false;
								}
								if (!valid)
									continue;
                                for (unsigned iii_=0; iii_<hg.vertex_set[e2_].size(); iii_++)  {
                                    if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][iii_] != j)  {
										k = hg.vertex_set[e2_][iii_];
										if (k == hg_root || k == i)
											continue;
										bool valid = true;
										for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
                            				if (hg.vertex_set[e0_][ii] == k)
                            					valid = false;
                            			}
                            			if (!valid)
                            				continue;
                                        e5.clear();
                                        c = hg.node_labels[k];
                                        insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        
                                        found_rk_ = false;
                                        found_ik = false;
                                        found_jk = true;
                                        found_rik_ = false;
                                        found_rjk_ = false;
										found_ijk = false;
                                        found_rijk = false;
                                        k_incident_edges = hg.get_incident_edges(k);
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rk_); ii++)  {
                                            	if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == k)  {
                                                    found_rk_ = true;
                                                }
                                            }
                                        }
                                        if (i_incident_edges.size() < k_incident_edges.size())  {
                                            for (unsigned edge_index3=0; (edge_index3 < i_incident_edges.size() && !found_ik); edge_index3++)  {
                                                unsigned e3_ = i_incident_edges[edge_index3];
                                                for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_ik); ii++)  {
                                                	if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == k)  {
														found_ik = true;
													}
												}
											}
										}
                                        else  {
                                            for (unsigned edge_index3=0; (edge_index3 < k_incident_edges.size() && !found_ik); edge_index3++)  {
                                                unsigned e3_ = k_incident_edges[edge_index3];
                                                for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_ik); ii++)  {
                                                	if (hg.vertex_set[e3_].size() >= 2 && hg.vertex_set[e3_][ii] == i)  {
														found_ik = true;
													}
												} 
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rik_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rik_); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rik_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rjk_); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rjk_); ii++)  {
                                            	if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == k)  {
															found_rjk_ = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        for (unsigned edge_index3=0; (edge_index3 < i_incident_edges.size() && !found_ijk); edge_index3++)  {
                                            unsigned e3_ = i_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_ijk); ii++)  {
                                                bool valid_hyperedge_decomposition(true);
                                                for (unsigned edge_index4=0; edge_index4 < root_incident_edges.size(); edge_index4++)  {
                                                    unsigned e4_ = root_incident_edges[edge_index4];
                                                    if (e3_ == e4_)  {
                                                        valid_hyperedge_decomposition = false;
                                                        break;
                                                    }
                                                }
                                                if (hg.vertex_set[e3_].size() >= 3 && hg.vertex_set[e3_][ii] == j && valid_hyperedge_decomposition)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
														if (hg.vertex_set[e3_][iii] == k)  {
															found_ijk = true;
														}
													}
												}
											}
										}
                                        for (unsigned edge_index3=0; (edge_index3 < root_incident_edges.size() && !found_rijk); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            for (unsigned ii=0; (ii<hg.vertex_set[e3_].size() && !found_rijk); ii++)  {
                                                if (hg.vertex_set[e3_].size() >= 4 && hg.vertex_set[e3_][ii] == i)  {
                                                    for (unsigned iii=0; iii<hg.vertex_set[e3_].size(); iii++)  {
                                                        if (hg.vertex_set[e3_][iii] == j)  {
                                                            for (unsigned iiii=0; iiii<hg.vertex_set[e3_].size(); iiii++)  {
																if (hg.vertex_set[e3_][iiii] == k)  {
																	found_rijk = true;
																}
															}
														}
													}
                                                }
                                            }
                                        }
                                        if (HYPERGRAPHLETS_4)  {
                                            if (!found_rijk && !found_rij_ && !found_rik_ && !found_rjk_ && !found_rj_ && !found_rk_ && !found_ik && !found_ijk && found_jk)  {
                                                //E1={R,A}, E2={A,B}, E5={B,C}
                                                keys = generate_labels(mismatches, root, a, b, c, 27, e1, e2, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                increment_match_hash(hash[27], keys, mismatches);
                                            }
                                        }
                                    }
								}
							}
						}
					}
				}
				#endif
				
				for (unsigned ii_=0; ii_<i_; ii_++)  {
					j = hg.vertex_set[e0_][ii_];
					if (j == hg_root || j == i)
						continue;
					e2.clear();
				    e3.clear();
        			e4.clear();
		        	e5.clear();
				    e6.clear();
        			e7.clear();
		        	e8.clear();
		        	e9.clear();
		        	e10.clear();
			        e11.clear();
					b = hg.node_labels[j];

					#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
					found_ri = false;
					found_rj = false;
					found_ij = false;
					found_rij_ = false;
					for (unsigned edge_index1=0; (edge_index1 < root_incident_edges.size() && !found_rij_); edge_index1++)  {
						unsigned e1_ = root_incident_edges[edge_index1];
						for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
							if (hg.vertex_set[e1_].size() == 3 && hg.vertex_set[e1_][ii] == i)  {
								for (unsigned iii=0; iii<hg.vertex_set[e1_].size(); iii++)  {
									if (hg.vertex_set[e1_][iii] == j)  {
										found_rij_ = true;
										/*
										bool found = search_hyperedge_label(hg.edge_labels[e1_], e1);
										if (!found || DISABLE_MULTIPLICITY == 0)  {
											found_rij_ = false;
										}
										*/
									}
								}
							}
						}
					}
					i_incident_edges = hg.get_incident_edges(i);
					j_incident_edges = hg.get_incident_edges(j);
					for (unsigned edge_index1=0; edge_index1 < root_incident_edges.size(); edge_index1++)  {
						unsigned e1_ = root_incident_edges[edge_index1];
						for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
                            if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii] == i)  {
                                found_ri = true;
								insert_hyperedge_label(hg.edge_labels[e1_], e5);
                            }
                            bool valid_hyperedge_decomposition(false);
							if (hg.vertex_set[e1_].size() > 2 && hg.vertex_set[e1_][ii] == i)  {
								valid_hyperedge_decomposition = true;
								for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = j_incident_edges[edge_index2];
									if (e1_ == e2_)  {
										valid_hyperedge_decomposition = false;
										break;
									}
								}
							}
							if (valid_hyperedge_decomposition)  {
								found_ij = true;
								insert_hyperedge_label(hg.edge_labels[e1_], e5); 
							}
                        }
                    }
                    for (unsigned edge_index1=0; edge_index1 < root_incident_edges.size(); edge_index1++)  {
						unsigned e1_ = root_incident_edges[edge_index1];
						for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
                            if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii] == j)  {
                                found_rj = true;
								insert_hyperedge_label(hg.edge_labels[e1_], e6);
                            }
                            bool valid_hyperedge_decomposition(false);
							if (hg.vertex_set[e1_].size() > 2 && hg.vertex_set[e1_][ii] == j)  {
								valid_hyperedge_decomposition = true;
								for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									if (e1_ == e2_)  {
										valid_hyperedge_decomposition = false;
										break;
									}
								}
							}
							if (valid_hyperedge_decomposition)  {
								found_ij = true;
								insert_hyperedge_label(hg.edge_labels[e1_], e6); 
							}
						}
					}
					if (i_incident_edges.size() < j_incident_edges.size())  {
						for (unsigned edge_index1=0; edge_index1 < i_incident_edges.size(); edge_index1++)  {
							unsigned e1_ = i_incident_edges[edge_index1];
							for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
								if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii] == j)  {
									found_ij = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e8);
								}
								bool valid_hyperedge_decomposition(false);
								if (hg.vertex_set[e1_].size() > 2 && hg.vertex_set[e1_][ii] == j)  {
									valid_hyperedge_decomposition = true;
									for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = root_incident_edges[edge_index2];
										if (e1_ == e2_)  {
											valid_hyperedge_decomposition = false;
											break;
										}
									}
								}
								if (valid_hyperedge_decomposition)  {
									found_ij = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e8); 
								}
							}
						}
					}
					else  {
						for (unsigned edge_index1=0; edge_index1 < j_incident_edges.size(); edge_index1++)  {
							unsigned e1_ = j_incident_edges[edge_index1];
							for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
								if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii] == i)  {
									found_ij = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e8);
								}
								bool valid_hyperedge_decomposition(false);
								if (hg.vertex_set[e1_].size() > 2 && hg.vertex_set[e1_][ii] == i)  {
									valid_hyperedge_decomposition = true;
									for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = root_incident_edges[edge_index2];
										if (e1_ == e2_)  {
											valid_hyperedge_decomposition = false;
											break;
										}
									}
								}
								if (valid_hyperedge_decomposition)  {
									found_ij = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e8); 
								}
							}
						}
					}
					/*
					//JLM: Add check to avoid double counting 
					for (unsigned edge_index1=0; edge_index1 < root_incident_edges.size(); edge_index1++)  {
						unsigned e1_ = root_incident_edges[edge_index1];
						if (e1_ == e0_)
							continue;
						for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
							if (hg.vertex_set[e1_].size() > 3 && hg.vertex_set[e1_][ii] == i)  {
								for (unsigned iii=0; iii<hg.vertex_set[e1_].size(); iii++)  {
									if (hg.vertex_set[e1_][iii] == j)  {
										insert_hyperedge_label(hg.edge_labels[e1_], e1);
									}
								}
							}
						}
					}
					*/
					// Case 011 by decomposing E1 (|E1| >= 4) to E1={R,A,B}
                    if (HYPERGRAPHLETS_3)  {
                    	if (!found_rij_)  {
							if (found_ri)  {
								if (found_rj)  {
									if (found_ij)  {
										//E1={R,A,B}, E5={R,A}, E3={R,B}, E4={A,B}
										keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 10, e1, e5, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
										increment_match_hash(hash[10], keys, mismatches);
									}
									else  {
										//E1={R,A,B}, E5={R,A}, E6={R,B}
										keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 9, e1, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
										increment_match_hash(hash[9], keys, mismatches);
									}
								}
								else  {
									if (found_ij)  {
										//E1={R,A,B}, E5={R,A}, E8={A,B}
										keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 8, e1, e5, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
										increment_match_hash(hash[8], keys, mismatches);
									}
									else  {
										//E1={R,A,B}, E5={R,A}
										keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 5, e1, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
										increment_match_hash(hash[5], keys, mismatches);
									}
								}
							}
							else  {
								if (found_rj)  {
									if (found_ij)  {
										//E1={R,A,B}, E6={R,B}, E8={A,B}
										keys = generate_labels(mismatches, root, b, a, ZERO_CHAR, 8, e1, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
										increment_match_hash(hash[8], keys, mismatches);
									}
									else  {
										//E1={R,A,B}, E6={R,B}
										keys = generate_labels(mismatches, root, b, a, ZERO_CHAR, 5, e1, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
										increment_match_hash(hash[5], keys, mismatches);
									}
								}
								else  {
									if (found_ij)  {
										//E1={R,A,B}, E8={A,B}
										keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 6, e1, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
										increment_match_hash(hash[6], keys, mismatches);
									}
									else  {
										//E1={R,A,B}
										keys = generate_labels(mismatches, root, a, b, ZERO_CHAR, 2, e1, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
										increment_match_hash(hash[2], keys, mismatches);
									}
								}
							}
						}
                    }

					// Case 0111, Type 1 by decomposing E1 (|E1| >= 4) to E1={R,A,B}		
					for (unsigned edge_index1=0; (edge_index1 < root_incident_edges.size() && !found_rij_); edge_index1++)  {
                        unsigned e1_ = root_incident_edges[edge_index1];
                        bool valid = false;
                        for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                            unsigned e2_ = j_incident_edges[edge_index2];
                            if (e1_ == e2_)
                                valid = true;
                        }
                        for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                            unsigned e2_ = i_incident_edges[edge_index2];
                            if (e1_ == e2_)
                                valid = false;
                        }
                        if (e1_ == e0_ || !valid)
                        	continue;
                        for (unsigned iii_=0; iii_<hg.vertex_set[e1_].size(); iii_++)  {
                        	if (hg.vertex_set[e1_].size() >= 3 && hg.vertex_set[e1_][iii_] != j)  {
                                k = hg.vertex_set[e1_][iii_];
                                if (k == hg_root || k == i || dist[k] > 1)
                                    continue;
                                bool valid = true;
								for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
									if (hg.vertex_set[e0_][ii] == k)
										valid = false;
								}
								if (!valid)
									continue;
                                e2.clear();
                                e3.clear();
                                e4.clear();
                                e5.clear();
                                e6.clear();
                                e7.clear();
                                e8.clear();
								e9.clear();
								e10.clear();
								c = hg.node_labels[k];
								insert_hyperedge_label(hg.edge_labels[e1_], e3);

                                unsigned e_rik(UINT_MAX), e_rik_(UINT_MAX);
                                found_ri = false;
                                found_rj = false;
                                found_rk = false;
                                found_ij = false;
                                found_ik = false;
                                found_jk = false;
                                found_rik = false;
                                found_rjk = true;
                                found_ijk = false;
                                found_rijk = false;
                                k_incident_edges = hg.get_incident_edges(k);
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == i)  {
                                            found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == i)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_ || e1_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_ || e1_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_rk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e7);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_ || e1_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e7);
										}
                                    }
                                }
								for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8);
                                        }
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8); 
										}
									}
								}
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_ik = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e9);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ik = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e9);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = j_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == k)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == i)  {
                                                    found_rik = true;
                                                    e_rik = edge_index2;
													insert_hyperedge_label(hg.edge_labels[e2_], e2);
                                                }
                                            }
                                        }
                                        bool valid_hyperedge_decomposition(false);
                                        if (hg.vertex_set[e2_].size() > 3 && hg.vertex_set[e2_][ii] == k)  {
                                        	for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == i)  {
													valid_hyperedge_decomposition = true;
													for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
														unsigned e3_ = root_incident_edges[edge_index3];
														if (e2_ == e3_ || e1_ == e3_)  {
															valid_hyperedge_decomposition = false;
															break;
														}
													}
													for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
														unsigned e3_ = j_incident_edges[edge_index3];
														if (e2_ == e3_)  {
															valid_hyperedge_decomposition = false;
															break;
														}
													}
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rik = true;
											e_rik_ = edge_index2;
											insert_hyperedge_label(hg.edge_labels[e2_], e2);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        bool valid_hyperedge_decomposition(true);
                                        for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
                                            unsigned e3_ = root_incident_edges[edge_index3];
                                            if (e2_ == e3_)  {
                                                valid_hyperedge_decomposition = false;
                                                break;
                                            }
                                        }
                                        if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == j && valid_hyperedge_decomposition)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == k)  {
                                                    found_ijk = true;
													insert_hyperedge_label(hg.edge_labels[e2_], e4);
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rijk); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rijk); ii++)  {
                                        if (hg.vertex_set[e2_].size() >= 4 && hg.vertex_set[e2_][ii] == i)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    for (unsigned iiii=0; iiii<hg.vertex_set[e2_].size(); iiii++)  {
                                                        if (hg.vertex_set[e2_][iiii] == k)  {
                                                            found_rijk = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (HYPERGRAPHLETS_4)  {
                                    if (!found_rijk && found_rjk)  {
                                        if (found_rik)  {
											if (found_ijk)  {
												if (found_ri)  {
													if (found_rj)  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 466, e1, e2, e3, e5, e6, e7, e4, e8, e9, e10, ZERO_VECTOR);
																			increment_match_hash(hash[466], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 454, e1, e2, e3, e5, e6, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[454], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 454, e1, e3, e2, e6, e5, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[454], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, b, c, 420, e1, e2, e3, e5, e6, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[420], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 454, e2, e3, e1, e7, e5, e6, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[454], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 420, e2, e1, e3, e5, e7, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[420], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 420, e3, e1, e2, e6, e7, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[420], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}
																			keys = generate_labels(mismatches, root, a, b, c, 350, e1, e2, e3, e5, e6, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[350], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 459, e1, e2, e3, e5, e6, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[459], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 432, e1, e2, e3, e5, e6, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[432], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 432, e1, e3, e2, e6, e5, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[432], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, b, c, 370, e1, e2, e3, e5, e6, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[370], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 438, e1, e2, e3, e5, e6, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[438], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 381, e1, e2, e3, e5, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[381], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 381, e1, e3, e2, e6, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[381], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}
																			keys = generate_labels(mismatches, root, a, b, c, 286, e1, e2, e3, e5, e6, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[286], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
													else  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, c, b, 459, e2, e1, e3, e5, e7, e4, e9, e8, e10, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[459], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 432, e2, e1, e3, e5, e7, e4, e9, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[432], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, c, b, 438, e2, e1, e3, e5, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[438], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, c, b, 381, e2, e1, e3, e5, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[381], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 432, e2, e3, e1, e7, e5, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[432], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 370, e2, e1, e3, e5, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[370], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 381, e2, e3, e1, e7, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[381], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}
																			keys = generate_labels(mismatches, root, a, c, b, 286, e2, e1, e3, e5, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[286], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 443, e1, e2, e3, e5, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[443], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 394, e1, e2, e3, e5, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[394], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 398, e1, e2, e3, e5, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[398], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, b, c, 314, e1, e2, e3, e5, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[314], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, c, b, 398, e2, e1, e3, e5, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[398], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 314, e2, e1, e3, e5, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[314], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 319, e1, e2, e3, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[319], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={R,A}
																			keys = generate_labels(mismatches, root, a, b, c, 212, e1, e2, e3, e5, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[212], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
												}
												else  {
													if (found_rj)  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 459, e3, e1, e2, e6, e7, e4, e10, e8, e9, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[459], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 438, e3, e1, e2, e6, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[438], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 432, e3, e1, e2, e6, e7, e4, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[432], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, c, a, 381, e3, e1, e2, e6, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[381], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, b, a, 432, e3, e2, e1, e7, e6, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[432], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, c, b, a, 381, e3, e2, e1, e7, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[381], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 370, e3, e1, e2, e6, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[370], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}
																			keys = generate_labels(mismatches, root, b, c, a, 286, e3, e1, e2, e6, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[286], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 443, e1, e3, e2, e6, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[443], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 398, e1, e3, e2, e6, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[398], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 394, e1, e3, e2, e6, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[394], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 314, e1, e3, e2, e6, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[314], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 398, e3, e1, e2, e6, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[398], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 319, e1, e3, e2, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[319], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 314, e3, e1, e2, e6, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[314], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E6={R,B} 
																			keys = generate_labels(mismatches, root, b, a, c, 212, e1, e3, e2, e6, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[212], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
													else  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 443, e2, e3, e1, e7, e4, e9, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[443], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, c, a, b, 398, e2, e3, e1, e7, e4, e9, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[398], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, b, a, 398, e3, e2, e1, e7, e4, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[398], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, c, a, b, 319, e2, e3, e1, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[319], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 394, e2, e3, e1, e7, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[394], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, c, a, b, 314, e2, e3, e1, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[314], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, b, a, 314, e3, e2, e1, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[314], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E7={R,C}
																			keys = generate_labels(mismatches, root, c, a, b, 212, e2, e3, e1, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[212], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 405, e1, e2, e3, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[405], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 328, e1, e2, e3, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[328], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 328, e1, e3, e2, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[328], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, b, c, 227, e1, e2, e3, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[227], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 328, e2, e3, e1, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[328], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 227, e2, e1, e3, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[227], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 227, e3, e1, e2, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[227], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 128, e1, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[128], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
												}
											}
											else  {
												if (found_ri)  {
													if (found_rj)  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 450, e1, e2, e3, e5, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[450], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 413, e1, e2, e3, e5, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[413], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 413, e1, e3, e2, e6, e5, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[413], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, b, c, 343, e1, e2, e3, e5, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[343], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 413, e2, e3, e1, e7, e5, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[413], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 343, e2, e1, e3, e5, e7, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[343], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 343, e3, e1, e2, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[343], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}
																			keys = generate_labels(mismatches, root, a, b, c, 244, e1, e2, e3, e5, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[244], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 425, e1, e2, e3, e5, e6, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[425], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 360, e1, e2, e3, e5, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[360], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 360, e1, e3, e2, e6, e5, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[360], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, b, c, 262, e1, e2, e3, e5, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[262], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 374, e1, e2, e3, e5, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[374], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 276, e1, e2, e3, e5, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[276], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 276, e1, e3, e2, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[276], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E6={R,B}
																			keys = generate_labels(mismatches, root, a, b, c, 167, e1, e2, e3, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[167], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
													else  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, c, b, 425, e2, e1, e3, e5, e7, e9, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[425], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 360, e2, e1, e3, e5, e7, e9, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[360], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, c, b, 374, e2, e1, e3, e5, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[374], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, c, b, 276, e2, e1, e3, e5, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[276], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 360, e2, e3, e1, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[360], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 262, e2, e1, e3, e5, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[262], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 276, e2, e3, e1, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[276], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E7={R,C}
																			keys = generate_labels(mismatches, root, a, c, b, 167, e2, e1, e3, e5, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[167], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 387, e1, e2, e3, e5, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[387], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 297, e1, e2, e3, e5, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[297], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 304, e1, e2, e3, e5, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[304], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, b, c, 195, e1, e2, e3, e5, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[195], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, c, b, 304, e2, e1, e3, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[304], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 195, e2, e1, e3, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[195], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 205, e1, e2, e3, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[205], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E5={R,A}
																			keys = generate_labels(mismatches, root, a, b, c, 105, e1, e2, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[105], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
												}
												else  {
													if (found_rj)  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 425, e3, e1, e2, e6, e7, e10, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[425], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 374, e3, e1, e2, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[374], keys, mismatches);
																		}
																	}
																}
																else  {                                                                        
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 360, e3, e1, e2, e6, e7, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[360], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, c, a, 276, e3, e1, e2, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[276], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, b, a, 360, e3, e2, e1, e7, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[360], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, c, b, a, 276, e3, e2, e1, e7, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[276], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 262, e3, e1, e2, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[262], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E7={R,C} 
																			keys = generate_labels(mismatches, root, b, c, a, 167, e3, e1, e2, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[167], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 387, e1, e3, e2, e6, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[387], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 304, e1, e3, e2, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[304], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 297, e1, e3, e2, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[297], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 195, e1, e3, e2, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[195], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 304, e3, e1, e2, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[304], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 205, e1, e3, e2, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[205], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 195, e3, e1, e2, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[195], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E6={R,B}
																			keys = generate_labels(mismatches, root, b, a, c, 105, e1, e3, e2, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[105], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
													else  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 387, e2, e3, e1, e7, e9, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[387], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, c, a, b, 304, e2, e3, e1, e7, e9, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[304], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, b, a, 304, e3, e2, e1, e7, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[304], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, c, a, b, 205, e2, e3, e1, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[205], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 297, e2, e3, e1, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[297], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, c, a, b, 195, e2, e3, e1, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[195], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, b, a, 195, e3, e2, e1, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[195], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E7={R,C} 
																			keys = generate_labels(mismatches, root, c, a, b, 105, e2, e3, e1, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[105], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 324, e1, e2, e3, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[324], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, b, c, 220, e1, e2, e3, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[220], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 220, e1, e3, e2, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[220], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, a, b, c, 121, e1, e2, e3, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[121], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, c, a, b, 220, e2, e3, e1, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[220], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, a, c, b, 121, e2, e1, e3, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[121], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 121, e3, e1, e2, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[121], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3) && (edge_index0 > e_rik_ || (e_rik != UINT_MAX && e_rik_ == UINT_MAX)))  {
																			//E1={R,A,B}, E2={R,A,C}, E3={R,B,C}
																			keys = generate_labels(mismatches, root, a, b, c, 53, e1, e2, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[53], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
												}
											}
                                        }
										else  {
											if (found_ijk)  {
												if (found_ri)  {
													if (found_rj)  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																		    //E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 451, e1, e3, e6, e5, e7, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[451], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 416, e1, e3, e6, e5, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[416], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 414, e1, e3, e6, e5, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[414], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 344, e1, e3, e6, e5, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[344], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 416, e3, e1, e6, e7, e5, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[416], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 347, e1, e3, e6, e5, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[347], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 344, e3, e1, e6, e7, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[344], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}
																			keys = generate_labels(mismatches, root, b, a, c, 245, e1, e3, e6, e5, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[245], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 426, e1, e3, e6, e5, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[426], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 363, e1, e3, e6, e5, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[363], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 361, e1, e3, e6, e5, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[361], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 263, e1, e3, e6, e5, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[263], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 375, e1, e3, e6, e5, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[375], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 279, e1, e3, e6, e5, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[279], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 277, e1, e3, e6, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[277], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E6={R,B}
																			keys = generate_labels(mismatches, root, b, a, c, 168, e1, e3, e6, e5, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[168], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
													else  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 429, e1, e3, e5, e7, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[429], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 366, e1, e3, e5, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[366], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 378, e1, e3, e5, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[378], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 282, e1, e3, e5, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[282], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 366, e3, e1, e7, e5, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[366], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 266, e1, e3, e5, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[266], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 282, e3, e1, e7, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[282], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E7={R,C}
																			keys = generate_labels(mismatches, root, b, a, c, 171, e1, e3, e5, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[171], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 390, e1, e3, e5, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[390], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 300, e1, e3, e5, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[300], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 307, e1, e3, e5, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[307], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 198, e1, e3, e5, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[198], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 310, e1, e3, e5, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[310], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 201, e1, e3, e5, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[201], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 208, e1, e3, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[208], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E5={R,A}
																			keys = generate_labels(mismatches, root, b, a, c, 108, e1, e3, e5, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[108], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
												}
												else  {
													if (found_rj)  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 426, e3, e1, e6, e7, e4, e10, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[426], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 375, e3, e1, e6, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[375], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 361, e3, e1, e6, e7, e4, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[361], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, c, a, 277, e3, e1, e6, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[277], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 363, e3, e1, e6, e7, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[363], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 279, e3, e1, e6, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[279], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 263, e3, e1, e6, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[263], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E7={R,C}
																			keys = generate_labels(mismatches, root, b, c, a, 168, e3, e1, e6, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[168], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 388, e1, e3, e6, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[388], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 305, e1, e3, e6, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[305], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 298, e1, e3, e6, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[298], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 196, e1, e3, e6, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[196], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 305, e3, e1, e6, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[305], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 206, e1, e3, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[206], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 196, e3, e1, e6, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[196], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E6={R,B}
																			keys = generate_labels(mismatches, root, b, a, c, 106, e1, e3, e6, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[106], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
													else  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 390, e3, e1, e7, e4, e10, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[390], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 310, e3, e1, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[310], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 307, e3, e1, e7, e4, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[307], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, c, a, 208, e3, e1, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[208], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 300, e3, e1, e7, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[300], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 201, e3, e1, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[201], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 198, e3, e1, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[198], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E7={R,C}
																			keys = generate_labels(mismatches, root, b, c, a, 108, e3, e1, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[108], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {                                                                            
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 325, e1, e3, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[325], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 223, e1, e3, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[223], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 221, e1, e3, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[221], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 122, e1, e3, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[122], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 223, e3, e1, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[223], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 125, e1, e3, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[125], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 122, e3, e1, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[122], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E4={A,B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 54, e1, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[54], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
												}
											}
											else  {
												if (found_ri)  {
													if (found_rj)  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 409, e1, e3, e6, e5, e7, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[409], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 337, e1, e3, e6, e5, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[337], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 336, e1, e3, e6, e5, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[336], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 237, e1, e3, e6, e5, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[237], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 337, e3, e1, e6, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[337], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 240, e1, e3, e6, e5, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[240], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 237, e3, e1, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[237], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E7={R,C}
																			keys = generate_labels(mismatches, root, b, a, c, 136, e1, e3, e6, e5, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[136], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 353, e1, e3, e6, e5, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[353], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 253, e1, e3, e6, e5, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[253], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 252, e1, e3, e6, e5, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[252], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 146, e1, e3, e6, e5, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[146], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 269, e1, e3, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[269], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 158, e1, e3, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[158], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 157, e1, e3, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[157], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E6={R,B}
																			keys = generate_labels(mismatches, root, b, a, c, 71, e1, e3, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[71], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
													else  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 356, e1, e3, e5, e7, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[356], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 256, e1, e3, e5, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[256], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 272, e1, e3, e5, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[272], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 161, e1, e3, e5, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[161], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 256, e3, e1, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[256], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 149, e1, e3, e5, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[149], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 161, e3, e1, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[161], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E7={R,C}
																			keys = generate_labels(mismatches, root, b, a, c, 74, e1, e3, e5, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[74], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 291, e1, e3, e5, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[291], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 179, e1, e3, e5, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[179], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A},E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 186, e1, e3, e5, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[186], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 89, e1, e3, e5, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[89], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 189, e1, e3, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[189], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 92, e1, e3, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[92], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 99, e1, e3, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[99], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E5={R,A}
																			keys = generate_labels(mismatches, root, b, a, c, 37, e1, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[37], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
												}
												else  {
													if (found_rj)  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 353, e3, e1, e6, e7, e10, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[353], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 269, e3, e1, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[269], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 252, e3, e1, e6, e7, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[252], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, c, a, 157, e3, e1, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[157], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 253, e3, e1, e6, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[253], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 158, e3, e1, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[158], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 146, e3, e1, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[146], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E7={R,C}
																			keys = generate_labels(mismatches, root, b, c, a, 71, e3, e1, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[71], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 290, e1, e3, e6, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[290], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 185, e1, e3, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[185], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 178, e1, e3, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[178], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 88, e1, e3, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[88], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 185, e3, e1, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[185], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 98, e1, e3, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[98], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 88, e3, e1, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[88], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E6={R,B}
																			keys = generate_labels(mismatches, root, b, a, c, 36, e1, e3, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[36], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
													else  {
														if (found_rk)  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 291, e3, e1, e7, e10, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[291], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E7={R,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 189, e3, e1, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[189], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E7={R,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 186, e3, e1, e7, e10, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[186], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E7={R,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, c, a, 99, e3, e1, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[99], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E7={R,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 179, e3, e1, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[179], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E7={R,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, c, a, 92, e3, e1, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[92], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E7={R,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 89, e3, e1, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[89], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E7={R,C}
																			keys = generate_labels(mismatches, root, b, c, a, 37, e3, e1, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[37], keys, mismatches);
																		}
																	}
																}
															}
														}
														else  {
															if (found_ij)  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E8={A,B}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 216, e1, e3, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[216], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E8={A,B}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 115, e1, e3, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[115], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E8={A,B}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 114, e1, e3, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[114], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E8={A,B}
																			keys = generate_labels(mismatches, root, b, a, c, 46, e1, e3, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[46], keys, mismatches);
																		}
																	}
																}
															}
															else  {
																if (found_ik)  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E9={A,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 115, e3, e1, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[115], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E9={A,C}
																			keys = generate_labels(mismatches, root, b, a, c, 49, e1, e3, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[49], keys, mismatches);
																		}
																	}
																}
																else  {
																	if (found_jk)  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}, E10={B,C}
																			keys = generate_labels(mismatches, root, b, c, a, 46, e3, e1, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[46], keys, mismatches);
																		}
																	}
																	else  {
																		if (((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3))  {
																			//E1={R,A,B}, E3={R,B,C}
																			keys = generate_labels(mismatches, root, b, a, c, 17, e1, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																			increment_match_hash(hash[17], keys, mismatches);
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
                                    }
                                }
                            }
                        }
                    } //End of Case 0111, Type 1

                    // Case 0111 or 0112, Type 1 by decomposing E1 (|E1| >= 4) to E1={R,A,B}
                    for (unsigned edge_index1=0; (edge_index1 < j_incident_edges.size() && !found_rij_); edge_index1++)  {
                        unsigned e1_ = j_incident_edges[edge_index1];
                        bool invalid = false;
                        for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                        	unsigned e2_ = root_incident_edges[edge_index2];
                            if (e1_ == e2_)
                            	invalid = true;
                        }
                        if (e1_ == e0_ || invalid)
                            continue;
                        for (unsigned iii_=0; iii_<hg.vertex_set[e1_].size(); iii_++)  {
                            if (hg.vertex_set[e1_].size() >= 3 && hg.vertex_set[e1_][iii_] != j)  {
                                k = hg.vertex_set[e1_][iii_];
                                if (k == hg_root || k == i || dist[k] > 2)
                                    continue;
                                bool valid = true;
                                for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
									if (hg.vertex_set[e0_][ii] == k)
										valid = false;
								}
								if (!valid)
									continue;
								valid = false;
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                        			unsigned e2_ = i_incident_edges[edge_index2];
                            		if (e1_ == e2_)
                            			valid = true;
                        		}
                        		if (!valid)
                            		continue;
                                e2.clear();
                                e3.clear();
                                e4.clear();
                                e5.clear();
                                e6.clear();
                                e7.clear();
                                e8.clear();
                                e9.clear();
                                e10.clear();
								c = hg.node_labels[k];
                                insert_hyperedge_label(hg.edge_labels[e1_], e4);

								unsigned e_rik(UINT_MAX), e_rik_(UINT_MAX);
                                found_ri = false;
                                found_rj = false;
                                found_rk = false;
                                found_ij = false;
                                found_ik = false;
                                found_jk = false;
                                found_rik = false;
                                found_rjk_ = false;
                                found_ijk = true;                                                                                          
                                found_rijk = false;
                                k_incident_edges = hg.get_incident_edges(k);
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == i)  {
                                            found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == i)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_rk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e7);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e7);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8);
                                        }
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8); 
										}
									}
								}
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_ik = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e9);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ik = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e9);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = j_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 3 && hg.vertex_set[e2_][ii] == k)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == i)  {
                                                    found_rik = true;
                                                    e_rik = edge_index2;
													insert_hyperedge_label(hg.edge_labels[e2_], e2);
                                                }
                                            }
                                        }
                                        bool valid_hyperedge_decomposition(false);
                                        if (hg.vertex_set[e2_].size() > 3 && hg.vertex_set[e2_][ii] == k)  {
                                        	for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == i)  {
													valid_hyperedge_decomposition = true;
													for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
														unsigned e3_ = root_incident_edges[edge_index3];
														if (e2_ == e3_ || e1_ == e3_)  {
															valid_hyperedge_decomposition = false;
															break;
														}
													}
													for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
														unsigned e3_ = j_incident_edges[edge_index3];
														if (e2_ == e3_)  {
															valid_hyperedge_decomposition = false;
															break;
														}
													}
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rik = true;
											e_rik_ = edge_index2;
											insert_hyperedge_label(hg.edge_labels[e2_], e2);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rjk_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rjk_); ii++)  {
                                    	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == k)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    found_rjk_ = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rijk); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rijk); ii++)  {
                                        if (hg.vertex_set[e2_].size() >= 4 && hg.vertex_set[e2_][ii] == i)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    for (unsigned iiii=0; iiii<hg.vertex_set[e2_].size(); iiii++)  {
                                                        if (hg.vertex_set[e2_][iiii] == k)  {
                                                            found_rijk = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (HYPERGRAPHLETS_4)  {
                                    if (!found_rijk && !found_rjk_ && found_ijk)  {
                                        if (found_rik)  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 451, e1, e2, e5, e6, e7, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[451], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, b, c, 414, e1, e2, e5, e6, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[414], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 416, e1, e2, e5, e6, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[416], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}
																		keys = generate_labels(mismatches, root, a, b, c, 344, e1, e2, e5, e6, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[344], keys, mismatches);
																	}
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 416, e2, e1, e5, e7, e6, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[416], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, c, b, 344, e2, e1, e5, e7, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[344], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 347, e1, e2, e5, e6, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[347], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}
																		keys = generate_labels(mismatches, root, a, b, c, 245, e1, e2, e5, e6, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[245], keys, mismatches);
																	}
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 426, e1, e2, e5, e6, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[426], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, b, c, 361, e1, e2, e5, e6, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[361], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 363, e1, e2, e5, e6, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[363], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}
																		keys = generate_labels(mismatches, root, a, b, c, 263, e1, e2, e5, e6, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[263], keys, mismatches);
																	}
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 375, e1, e2, e5, e6, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[375], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, b, c, 277, e1, e2, e5, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[277], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 279, e1, e2, e5, e6, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[279], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E6={R,B}
																		keys = generate_labels(mismatches, root, a, b, c, 168, e1, e2, e5, e6, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[168], keys, mismatches);
																	}
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 426, e2, e1, e5, e7, e4, e9, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[426], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, c, b, 361, e2, e1, e5, e7, e4, e9, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[361], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 375, e2, e1, e5, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[375], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}
																		keys = generate_labels(mismatches, root, a, c, b, 277, e2, e1, e5, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[277], keys, mismatches);
																	}
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 363, e2, e1, e5, e7, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[363], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, c, b, 263, e2, e1, e5, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[263], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E7={R,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 279, e2, e1, e5, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[279], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E7={R,C}
																		keys = generate_labels(mismatches, root, a, c, b, 168, e2, e1, e5, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[168], keys, mismatches);
																	}
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E8={A,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 388, e1, e2, e5, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[388], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E8={A,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, b, c, 298, e1, e2, e5, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[298], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E8={A,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 305, e1, e2, e5, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[305], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E8={A,B}
																		keys = generate_labels(mismatches, root, a, b, c, 196, e1, e2, e5, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[196], keys, mismatches);
																	}
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 305, e2, e1, e5, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[305], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, c, b, 196, e2, e1, e5, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[196], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 206, e1, e2, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[206], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={R,A}
																		keys = generate_labels(mismatches, root, a, b, c, 106, e1, e2, e5, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[106], keys, mismatches);
																	}
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 429, e1, e2, e6, e7, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[429], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, b, c, 378, e1, e2, e6, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[378], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 366, e1, e2, e6, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[366], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}
																		keys = generate_labels(mismatches, root, a, b, c, 282, e1, e2, e6, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[282], keys, mismatches);
																	}
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 366, e2, e1, e7, e6, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[366], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, c, b, 282, e2, e1, e7, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[282], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E7={R,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 266, e1, e2, e6, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[266], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E7={R,C}
																		keys = generate_labels(mismatches, root, a, b, c, 171, e1, e2, e6, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[171], keys, mismatches);
																	}
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 390, e1, e2, e6, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[390], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E8={A,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, b, c, 307, e1, e2, e6, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[307], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E8={A,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 300, e1, e2, e6, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[300], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E8={A,B}
																		keys = generate_labels(mismatches, root, a, b, c, 198, e1, e2, e6, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[198], keys, mismatches);
																	}
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 310, e1, e2, e6, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[310], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, b, c, 208, e1, e2, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[208], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 201, e1, e2, e6, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[201], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E6={R,B}
																		keys = generate_labels(mismatches, root, a, b, c, 108, e1, e2, e6, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[108], keys, mismatches);
																	}
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 390, e2, e1, e7, e4, e9, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[390], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E7={R,C}, E8={A,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, c, b, 307, e2, e1, e7, e4, e9, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[307], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E7={R,C}, E8={A,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 310, e2, e1, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[310], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E7={R,C}, E8={A,B}
																		keys = generate_labels(mismatches, root, a, c, b, 208, e2, e1, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[208], keys, mismatches);
																	}
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E7={R,C}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 300, e2, e1, e7, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[300], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E7={R,C}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, c, b, 198, e2, e1, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[198], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E7={R,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 201, e2, e1, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[201], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E7={R,C}
																		keys = generate_labels(mismatches, root, a, c, b, 108, e2, e1, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[108], keys, mismatches);
																	}
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E8={A,B}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 325, e1, e2, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[325], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E8={A,B}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, b, c, 221, e1, e2, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[221], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E8={A,B}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 223, e1, e2, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[223], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E8={A,B}
																		keys = generate_labels(mismatches, root, a, b, c, 122, e1, e2, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[122], keys, mismatches);
																	}
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E9={A,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, c, b, 223, e2, e1, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[223], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E9={A,C}
																		keys = generate_labels(mismatches, root, a, c, b, 122, e2, e1, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[122], keys, mismatches);
																	}
																}
															}
															else  {
																if (found_jk)  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E10={B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 125, e1, e2, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[125], keys, mismatches);
																	}
																}
																else  {
																	if ((edge_index0 > e_rik_ || (e_rik_ == UINT_MAX && e_rik != UINT_MAX)))  {
																		//E1={R,A,B}, E2={R,A,C}, E4={A,B,C}
																		keys = generate_labels(mismatches, root, a, b, c, 54, e1, e2, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																		increment_match_hash(hash[54], keys, mismatches);
																	}
																}
															}
														}
													}
												}
											}
										}
										else  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 410, e1, e5, e6, e7, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[410], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 338, e1, e5, e6, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[338], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 338, e1, e6, e5, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[338], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 238, e1, e5, e6, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[238], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 340, e1, e5, e6, e7, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[340], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 241, e1, e5, e6, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[241], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 241, e1, e6, e5, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[241], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E7={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 137, e1, e5, e6, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[137], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 354, e1, e5, e6, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[354], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 254, e1, e6, e5, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[254], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 254, e1, e5, e6, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[254], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 147, e1, e5, e6, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[147], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 270, e1, e5, e6, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[270], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 159, e1, e6, e5, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[159], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 159, e1, e5, e6, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[159], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E6={R,B}
																	keys = generate_labels(mismatches, root, a, b, c, 72, e1, e5, e6, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[72], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 357, e1, e5, e7, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[357], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 257, e1, e5, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[257], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 273, e1, e5, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[273], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E7={R,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 162, e1, e5, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[162], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E7={R,C}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 259, e1, e5, e7, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[259], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E7={R,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 150, e1, e5, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[150], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E7={R,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 164, e1, e5, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[164], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E7={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 75, e1, e5, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[75], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 292, e1, e5, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[292], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 180, e1, e5, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[180], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 187, e1, e5, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[187], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 90, e1, e5, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[90], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 190, e1, e5, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[190], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 93, e1, e5, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[93], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 100, e1, e5, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[100], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E5={R,A}
																	keys = generate_labels(mismatches, root, a, b, c, 38, e1, e5, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[38], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 357, e1, e6, e7, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[357], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 273, e1, e6, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[273], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 257, e1, e6, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[257], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E7={R,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 162, e1, e6, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[162], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 259, e1, e6, e7, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[259], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E7={R,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 164, e1, e6, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[164], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E7={R,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 150, e1, e6, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[150], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E7={R,C}
																	keys = generate_labels(mismatches, root, b, a, c, 75, e1, e6, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[75], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 292, e1, e6, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[292], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 187, e1, e6, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[187], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 180, e1, e6, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[180], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E8={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 90, e1, e6, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[90], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 190, e1, e6, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[190], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 100, e1, e6, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[100], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 93, e1, e6, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[93], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E6={R,B}
																	keys = generate_labels(mismatches, root, b, a, c, 38, e1, e6, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[38], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 294, e1, e7, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[294], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E7={R,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 192, e1, e7, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[192], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E7={R,C}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 192, e1, e7, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[192], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E7={R,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 102, e1, e7, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[102], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E7={R,C}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 182, e1, e7, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[182], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E7={R,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 95, e1, e7, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[95], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {			
																	//E1={R,A,B}, E4={A,B,C}, E7={R,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 95, e1, e7, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[95], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E7={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 40, e1, e7, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[40], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 217, e1, e4, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[217], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 116, e1, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[116], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 116, e1, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[116], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 47, e1, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[47], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 118, e1, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[118], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 50, e1, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[50], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B}, E4={A,B,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 50, e1, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[50], keys, mismatches);
																}
																else  {
																	//E1={R,A,B}, E4={A,B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 18, e1, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[18], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
                                    }
                                }
                            }
                        }
                    } //End of Case 0112, Type 1

                    // Case 0111, Type 2 by decomposing E1 (|E1| >= 4) to E1={R,A,B}
                    for (unsigned edge_index1=0; (edge_index1 < root_incident_edges.size() && !found_rij_); edge_index1++)  {
                        unsigned e1_ = root_incident_edges[edge_index1];
                        bool valid = false;
                        for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                            unsigned e2_ = i_incident_edges[edge_index2];
                            if (e1_ == e2_)
                                valid = true;
                        }
                        for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                            unsigned e2_ = j_incident_edges[edge_index2];
                            if (e1_ == e2_)
                                valid = false;
                        }
                        if (e1_ == e0_ || !valid)
                            continue;
                        for (unsigned iii_=0; iii_<hg.vertex_set[e1_].size(); iii_++)  {
                        	if (hg.vertex_set[e1_].size() >= 3 && hg.vertex_set[e1_][iii_] != i)  {
                                k = hg.vertex_set[e1_][iii_];
                                if (k == hg_root || k == j || dist[k] > 1)
                                    continue;
                                bool valid = true;
                                for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
									if (hg.vertex_set[e0_][ii] == k)
										valid = false;
								}
								if (!valid)
									continue;
                                e2.clear();
                                e3.clear();
                            	e4.clear();
                                e5.clear();
                                e6.clear();
                                e7.clear();
                                e8.clear();
								e9.clear();
								e10.clear();
								c = hg.node_labels[k];
								insert_hyperedge_label(hg.edge_labels[e1_], e2);

                                found_ri = false;
                                found_rj = false;
                                found_rk = false;
                                found_ij = false;
                                found_ik = false;
                                found_jk = false;
                                found_rik = true;
                                found_rjk_ = false;
                                found_ijk = false;
                                found_rijk = false;
                                k_incident_edges = hg.get_incident_edges(k);
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == i)  {
                                            found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == i)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_ || e1_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_ || e1_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_rk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e7);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_ || e1_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e7);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8);
                                        }
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8); 
										}
									}
								}
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_ik = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e9);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ik = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e9);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = j_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rjk_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rjk_); ii++)  {
                                    	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == k)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    found_rjk_ = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < i_incident_edges.size() && !found_ijk); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_ijk); ii++)  {
                                        bool valid_hyperedge_decomposition(true);
                                        for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
                                             unsigned e3_ = root_incident_edges[edge_index3];
                                            if (e2_ == e3_)  {
                                                valid_hyperedge_decomposition = false;
                                                break;
                                            }
                                        }
                                        if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == j && valid_hyperedge_decomposition)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == k)  {
                                                    found_ijk = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rijk); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rijk); ii++)  {
                                        if (hg.vertex_set[e2_].size() >= 4 && hg.vertex_set[e2_][ii] == i)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    for (unsigned iiii=0; iiii<hg.vertex_set[e2_].size(); iiii++)  {
                                                        if (hg.vertex_set[e2_][iiii] == k)  {
                                                            found_rijk = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (HYPERGRAPHLETS_4)  {
                                    if (!found_rijk && !found_rjk_ && !found_ijk && found_rik)  {
										if (found_ri)  {
											if (found_rj)  {
												if (found_rk)  {
													if (found_ij)  {
														if (found_ik)  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 409, e1, e2, e5, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[409], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 336, e1, e2, e5, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[336], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}	
																	keys = generate_labels(mismatches, root, a, b, c, 337, e1, e2, e5, e6, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[337], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 237, e1, e2, e5, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[237], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ik)  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}	
																	keys = generate_labels(mismatches, root, a, c, b, 337, e2, e1, e5, e7, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[337], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 237, e2, e1, e5, e7, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[237], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E7={R,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 240, e1, e2, e5, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[240], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E7={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 136, e1, e2, e5, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[136], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_ij)  {
														if (found_ik)  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 353, e1, e2, e5, e6, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[353], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 252, e1, e2, e5, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[252], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 253, e1, e2, e5, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[253], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 146, e1, e2, e5, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[146], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ik)  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 269, e1, e2, e5, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[269], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 157, e1, e2, e5, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[157], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 158, e1, e2, e5, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[158], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E6={R,B}
																	keys = generate_labels(mismatches, root, a, b, c, 71, e1, e2, e5, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[71], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rk)  {
													if (found_ij)  {
														if (found_ik)  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 353, e2, e1, e5, e7, e9, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[353], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 252, e2, e1, e5, e7, e9, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[252], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E7={R,C}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 269, e2, e1, e5, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[269], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E7={R,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, c, b, 157, e2, e1, e5, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[157], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ik)  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E7={R,C}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 253, e2, e1, e5, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[253], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E7={R,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 146, e2, e1, e5, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[146], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E7={R,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 158, e2, e1, e5, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[158], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E7={R,C}
																	keys = generate_labels(mismatches, root, a, c, b, 71, e2, e1, e5, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[71], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_ij)  {                                                            
														if (found_ik)  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 290, e1, e2, e5, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[290], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 178, e1, e2, e5, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[178], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 185, e1, e2, e5, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[185], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 88, e1, e2, e5, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[88], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ik)  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 185, e2, e1, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[185], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 88, e2, e1, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[88], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 98, e1, e2, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[98], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E5={R,A}
																	keys = generate_labels(mismatches, root, a, b, c, 36, e1, e2, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[36], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
										else  {
											if (found_rj)  {
												if (found_rk)  {
													if (found_ij)  {
														if (found_ik)  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 356, e1, e2, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[356], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 272, e1, e2, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[272], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 256, e1, e2, e6, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[256], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E7={R,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 161, e1, e2, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[161], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ik)  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 256, e2, e1, e7, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[256], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E7={R,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 161, e2, e1, e7, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[161], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E7={R,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 149, e1, e2, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[149], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E7={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 74, e1, e2, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[74], keys, mismatches);
															    }
                                                            }
														}
													}
												}
												else  {
													if (found_ij)  {
														if (found_ik)  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 291, e1, e2, e6, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[291], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 186, e1, e2, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[186], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 179, e1, e2, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[179], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 89, e1, e2, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[89], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ik)  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 189, e1, e2, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[189], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 99, e1, e2, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[99], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 92, e1, e2, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[92], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E6={R,B}
																	keys = generate_labels(mismatches, root, a, b, c, 37, e1, e2, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[37], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rk)  {
													if (found_ij)  {
														if (found_ik)  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 291, e2, e1, e7, e9, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                	increment_match_hash(hash[291], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E7={R,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 186, e2, e1, e7, e9, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[186], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E7={R,C}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 189, e2, e1, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[189], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E7={R,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, c, b, 99, e2, e1, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[99], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ik)  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E7={R,C}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 179, e2, e1, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[179], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E7={R,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 89, e2, e1, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[89], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E7={R,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 92, e2, e1, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[92], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E7={R,C}
																	keys = generate_labels(mismatches, root, a, c, b, 37, e2, e1, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[37], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_ij)  {
														if (found_ik)  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E8={A,B}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 216, e1, e2, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[216], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E8={A,B}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 114, e1, e2, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[114], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E8={A,B}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 115, e1, e2, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[115], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E8={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 46, e1, e2, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[46], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ik)  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E9={A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 115, e2, e1, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[115], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E9={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 46, e2, e1, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[46], keys, mismatches);
																}
															}
														}
														else  {
															if (found_jk)  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}, E10={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 49, e1, e2, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[49], keys, mismatches);
																}
															}
															else  {
																if ((hg.vertex_set[e1_].size() > 3 && edge_index0 > edge_index1) || hg.vertex_set[e1_].size() == 3)  {
																	//E1={R,A,B}, E2={R,A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 17, e1, e2, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[17], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
									}
                                }
                            }
                        }
                    } //End of Case 0111, Type 2

                    // Case 0111, Type 3 by decomposing E1 (|E1| >= 4) to E1={R,A,B}
                    for (unsigned edge_index1=0; (edge_index1 < root_incident_edges.size() && !found_rij_); edge_index1++)  {
                        unsigned e1_ = root_incident_edges[edge_index1];
                        bool valid = true;
                        for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                            unsigned e2_ = i_incident_edges[edge_index2];
                            if (e1_ == e2_)
                                valid = false;
                        }
                        for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                            unsigned e2_ = j_incident_edges[edge_index2];
                            if (e1_ == e2_)
                                valid = false;
                        }
                        if (e1_ == e0_ || !valid)
                            continue;
                        for (unsigned iii_=0; iii_<hg.vertex_set[e1_].size(); iii_++)  {
                        	if (hg.vertex_set[e1_].size() >= 2 && hg.vertex_set[e1_][iii_] != hg_root)  {
                                k = hg.vertex_set[e1_][iii_];
                                if (k == i || k == j || dist[k] > 2)
                                    continue;
                                bool valid = true;
                                for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
									if (hg.vertex_set[e0_][ii] == k)
										valid = false;
								}
								if (!valid)
									continue;
								e2.clear();
								e3.clear();
								e4.clear();
								e5.clear();
								e6.clear();
								e7.clear();
								e8.clear();
								e9.clear();
								e10.clear();
								c = hg.node_labels[k];
                                insert_hyperedge_label(hg.edge_labels[e1_], e7);

                                found_ri = false;
                                found_rj = false;
                                found_rk = true;
                                found_ij = false;
                                found_ik = false;
                                found_jk = false;
                                found_rik_ = false;
                                found_rjk_ = false;
                                found_ijk = false;
                                found_rijk = false;
                                k_incident_edges = hg.get_incident_edges(k);
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == i)  {
                                            found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == i)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_ || e1_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_ || e1_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8);
                                        }
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8); 
										}
									}
								}
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_ik = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e9);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ik = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e9);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = j_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rik_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rik_); ii++)  {
                                    	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == k)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == i)  {
                                                    found_rik_ = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rjk_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rjk_); ii++)  {
                                    	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == k)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    found_rjk_ = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < i_incident_edges.size() && !found_ijk); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_ijk); ii++)  {
                                        bool valid_hyperedge_decomposition(true);
                                        for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
                                             unsigned e3_ = root_incident_edges[edge_index3];
                                            if (e2_ == e3_)  {
                                                valid_hyperedge_decomposition = false;
                                                break;
                                            }
                                        }
                                        if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == j && valid_hyperedge_decomposition)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == k)  {
                                                    found_ijk = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rijk); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rijk); ii++)  {
                                        if (hg.vertex_set[e2_].size() >= 4 && hg.vertex_set[e2_][ii] == i)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    for (unsigned iiii=0; iiii<hg.vertex_set[e2_].size(); iiii++)  {
                                                        if (hg.vertex_set[e2_][iiii] == k)  {
                                                            found_rijk = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (HYPERGRAPHLETS_4)  {
                                    if (!found_rijk && !found_rik_ && !found_rjk_ && !found_ijk && found_rk)  {
										if (found_ri)  {
											if (found_rj)  {
												if (found_ij)  {
													if (found_ik)  {
														if (found_jk)  {
															//E1={R,A,B}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 333, e1, e5, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[333], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
															keys = generate_labels(mismatches, root, b, a, c, 233, e1, e6, e5, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[233], keys, mismatches);
														}
													}
													else  {
														if (found_jk)  {
															//E1={R,A,B}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 233, e1, e5, e6, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[233], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B}
															keys = generate_labels(mismatches, root, a, b, c, 132, e1, e5, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[132], keys, mismatches);
														}
													}
												}
												else  {
													if (found_ik)  {
														if (found_jk)  {
															//E1={R,A,B}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 234, e1, e5, e6, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[234], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E5={R,A}, E6={R,B}, E7={R,C}, E9={A,C}
															keys = generate_labels(mismatches, root, b, a, c, 133, e1, e6, e5, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[133], keys, mismatches);
														}
													}
													else  {
														if (found_jk)  {
															//E1={R,A,B}, E5={R,A}, E6={R,B}, E7={R,C}, E10={B,C}
															 keys = generate_labels(mismatches, root, a, b, c, 133, e1, e5, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[133], keys, mismatches);
														}
														else {
															//E1={R,A,B}, E5={R,A}, E6={R,B}, E7={R,C}
															keys = generate_labels(mismatches, root, a, b, c, 58, e1, e5, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[58], keys, mismatches);
														}
													}
												}
											}
											else  {
												if (found_ij)  {
													if (found_ik)  {
														if (found_jk)  {
															//E1={R,A,B}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 249, e1, e5, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[249], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E5={R,A}, E7={R,C}, E8={A,B}, E9={A,C}
															keys = generate_labels(mismatches, root, a, b, c, 142, e1, e5, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[142], keys, mismatches);
														}
													}
													else  {
														if (found_jk)  {
															//E1={R,A,B}, E5={R,A}, E7={R,C}, E8={A,B}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 154, e1, e5, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[154], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E5={R,A}, E7={R,C}, E8={A,B}
															keys = generate_labels(mismatches, root, a, b, c, 67, e1, e5, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[67], keys, mismatches);
														}
													}
												}
												else  {
													if (found_ik)  {
														if (found_jk)  {
															//E1={R,A,B}, E5={R,A}, E7={R,C}, E9={A,C}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 143, e1, e5, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[143], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E5={R,A}, E7={R,C}, E9={A,C}
															keys = generate_labels(mismatches, root, a, b, c, 62, e1, e5, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[62], keys, mismatches);
														}
													}
													else  {
														if (found_jk)  {
															//E1={R,A,B}, E5={R,A}, E7={R,C}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 68, e1, e5, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[68], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E5={R,A}, E7={R,C}
															keys = generate_labels(mismatches, root, a, b, c, 23, e1, e5, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[23], keys, mismatches);
														}
													}
												}
											}
										}
										else  {
											if (found_rj)  {
												if (found_ij)  {
													if (found_ik)  {
														if (found_jk)  {
															//E1={R,A,B}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
															keys = generate_labels(mismatches, root, b, a, c, 249, e1, e6, e7, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[249], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E6={R,B}, E7={R,C}, E8={A,B}, E9={A,C}
															keys = generate_labels(mismatches, root, b, a, c, 154, e1, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[154], keys, mismatches);
														}
													}
													else  {
														if (found_jk)  {
															//E1={R,A,B}, E6={R,B}, E7={R,C}, E8={A,B}, E10={B,C}
															keys = generate_labels(mismatches, root, b, a, c, 142, e1, e6, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[142], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E6={R,B}, E7={R,C}, E8={A,B}
															keys = generate_labels(mismatches, root, b, a, c, 67, e1, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[67], keys, mismatches);
														}
													}
												}
												else  {
													if (found_ik)  {
														if (found_jk)  {
															//E1={R,A,B}, E6={R,B}, E7={R,C}, E9={A,C}, E10={B,C}
															keys = generate_labels(mismatches, root, b, a, c, 143, e1, e6, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[143], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E6={R,B}, E7={R,C}, E9={A,C}
															keys = generate_labels(mismatches, root, b, a, c, 68, e1, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[68], keys, mismatches);
														}
													}
													else  {
														if (found_jk)  {
															//E1={R,A,B}, E6={R,B}, E7={R,C}, E10={B,C}
															keys = generate_labels(mismatches, root, b, a, c, 62, e1, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[62], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E6={R,B}, E7={R,C}
															keys = generate_labels(mismatches, root, b, a, c, 23, e1, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[23], keys, mismatches);
														}
													}
												}
											}
											else  {
												if (found_ij)  {
													if (found_ik)  {
														if (found_jk)  {
															//E1={R,A,B}, E7={R,C}, E8={A,B}, E9={A,C}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 175, e1, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[175], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E7={R,C}, E8={A,B}, E9={A,C}
															keys = generate_labels(mismatches, root, a, b, c, 85, e1, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[85], keys, mismatches);
														}
													}
													else  {
														if (found_jk)  {
															//E1={R,A,B}, E7={R,C}, E8={A,B}, E10={B,C}
															keys = generate_labels(mismatches, root, b, a, c, 85, e1, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[85], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E7={R,C}, E8={A,B}
															keys = generate_labels(mismatches, root, a, b, c, 33, e1, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[33], keys, mismatches);
														}
													}
												}
												else  {
													if (found_ik)  {
														if (found_jk)  {
															//E1={R,A,B}, E7={R,C}, E9={A,C}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 80, e1, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[80], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E7={R,C}, E9={A,C}
															keys = generate_labels(mismatches, root, b, a, c, 29, e1, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[29], keys, mismatches);
														}
													}
													else  {
														if (found_jk)  {
															//E1={R,A,B}, E7={R,C}, E10={B,C}
															keys = generate_labels(mismatches, root, a, b, c, 29, e1, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[29], keys, mismatches);
														}
														else  {
															//E1={R,A,B}, E7={R,C}
															keys = generate_labels(mismatches, root, a, b, c, 12, e1, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
															increment_match_hash(hash[12], keys, mismatches);
														}
													}
												}
											}
										}
                                    }
                                }
                            }
                        }
                    } //End of Case 0111, Type 3

                    // Case 0112, Type 2 by decomposing E1 (|E1| >= 4) to E1={R,A,B}
                    for (unsigned edge_index1=0; (edge_index1 < i_incident_edges.size() && !found_rij_); edge_index1++)  {
                        unsigned e1_ = i_incident_edges[edge_index1];
                        bool invalid = false;
                        for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                        	unsigned e2_ = root_incident_edges[edge_index2];
                            if (e1_ == e2_)
                            	invalid = true;
                        }
                        if (e1_ == e0_ || invalid)
                            continue;
                        for (unsigned iii_=0; iii_<hg.vertex_set[e1_].size(); iii_++)  {
                            if (hg.vertex_set[e1_].size() >= 2 && hg.vertex_set[e1_][iii_] != i)  {
                                k = hg.vertex_set[e1_][iii_];
                                if (k == hg_root || k == j || dist[k] > 2)
                                    continue;
                                bool valid = true;
                                for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
									if (hg.vertex_set[e0_][ii] == k)
										valid = false;
								}
								if (!valid)
									continue;
                                e2.clear();
                                e3.clear();
                                e4.clear();
                                e5.clear();
                                e6.clear();
                                e7.clear();
                                e8.clear();
                                e9.clear();
                                e10.clear();
								c = hg.node_labels[k];

								found_ri = false;
								found_rj = false;
                                found_rk_ = false;
                                found_ij = false;
                                found_ik = false;
                                found_jk = false;
                                found_rik_ = false;   
                                found_rjk_ = false;
                                found_ijk = false;                                                                                            
                                found_rijk = false;
                                k_incident_edges = hg.get_incident_edges(k);
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == i)  {
                                            found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == i)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rk_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rk_); ii++)  {
                                    	if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_rk_ = true;
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8);
                                        }
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8); 
										}
									}
								}
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_ik = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e9);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ik = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e9);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = j_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == k)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_jk = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e10);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rik_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rik_); ii++)  {
                                    	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == k)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == i)  {
                                                    found_rik_ = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rjk_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rjk_); ii++)  {
                                    	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == k)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    found_rjk_ = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < i_incident_edges.size() && !found_ijk); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_ijk); ii++)  {
                                        bool valid_hyperedge_decomposition(true);
                                        for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
                                             unsigned e3_ = root_incident_edges[edge_index3];
                                            if (e2_ == e3_)  {
                                                valid_hyperedge_decomposition = false;
                                                break;
                                            }
                                        }
                                        if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == j && valid_hyperedge_decomposition)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == k)  {
                                                    found_ijk = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rijk); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rijk); ii++)  {
                                        if (hg.vertex_set[e2_].size() >= 4 && hg.vertex_set[e2_][ii] == i)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    for (unsigned iiii=0; iiii<hg.vertex_set[e2_].size(); iiii++)  {
                                                        if (hg.vertex_set[e2_][iiii] == k)  {
                                                            found_rijk = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (HYPERGRAPHLETS_4)  {
                                    if (!found_rijk && !found_rik_ && !found_rjk_ && !found_ijk && !found_rk_ && found_ik)  {
										if (found_ri)  {
											if (found_rj)  {
												if (found_ij)  {
													if (found_jk)  {
														//E1={R,A,B}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
														keys = generate_labels(mismatches, root, a, b, c, 248, e1, e5, e6, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[248], keys, mismatches);
													}
													else  {
														//E1={R,A,B}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C}
														keys = generate_labels(mismatches, root, b, a, c, 141, e1, e6, e5, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[141], keys, mismatches);
													}
												}
												else  {
													if (found_jk)  {
														//E1={R,A,B}, E5={R,A}, E6={R,B}, E9={A,C}, E10={B,C}
														keys = generate_labels(mismatches, root, a, b, c, 153, e1, e5, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[153], keys, mismatches);
													}
													else  {
														//E1={R,A,B}, E5={R,A}, E6={R,B}, E9={A,C}
														keys = generate_labels(mismatches, root, b, a, c, 66, e1, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[66], keys, mismatches);
													}
												}
											}
											else  {
												if (found_ij)  {
													if (found_jk)  {
														//E1={R,A,B}, E5={R,A}, E8={A,B}, E9={A,C}, E10={B,C}
														keys = generate_labels(mismatches, root, a, b, c, 174, e1, e5, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[174], keys, mismatches);
													}
													else  {
														//E1={R,A,B}, E5={R,A}, E8={A,B}, E9={A,C}
														keys = generate_labels(mismatches, root, a, b, c, 79, e1, e5, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[79], keys, mismatches);
													}
												}
												else  {
													if (found_jk)  {
														//E1={R,A,B}, E5={R,A}, E9={A,C}, E10={B,C}
														keys = generate_labels(mismatches, root, a, b, c, 84, e1, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[84], keys, mismatches);
													}
													else  {
														//E1={R,A,B}, E5={R,A}, E9={A,C}
														keys = generate_labels(mismatches, root, b, a, c, 28, e1, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[28], keys, mismatches);
													}
												}
											}
										}
										else  {
											if (found_rj)  {
												if (found_ij)  {
													if (found_jk)  {
													    //E1={R,A,B}, E6={R,B}, E8={A,B}, E9={A,C}, E10={B,C}
														keys = generate_labels(mismatches, root, b, a, c, 174, e1, e6, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[174], keys, mismatches);
													}
													else  {
														//E1={R,A,B}, E6={R,B}, E8={A,B}, E9={A,C}
														keys = generate_labels(mismatches, root, b, a, c, 83, e1, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[83], keys, mismatches);
													}
												}
												else  {
													if (found_jk)  {
		    											//E1={R,A,B}, E6={R,B}, E9={A,C}, E10={B,C}
														keys = generate_labels(mismatches, root, b, a, c, 84, e1, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[84], keys, mismatches);
													}
													else  {
														//E1={R,A,B}, E6={R,B}, E9={A,C}
														keys = generate_labels(mismatches, root, b, a, c, 32, e1, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[32], keys, mismatches);
													}
												}
											}
											else  {
												if (found_ij)  {
													if (found_jk)  {
														//E1={R,A,B}, E8={A,B}, E9={A,C}, E10={B,C}
														keys = generate_labels(mismatches, root, a, b, c, 112, e1, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[112], keys, mismatches);	
													}
													else  {
						                                //E1={R,A,B}, E8={A,B}, E9={A,C}
                                                        keys = generate_labels(mismatches, root, a, b, c, 43, e1, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                        increment_match_hash(hash[43], keys, mismatches);
													}
												}
												else  {
													if (found_jk)  {
														//E1={R,A,B}, E9={A,C}, E10={B,C}
														keys = generate_labels(mismatches, root, a, b, c, 44, e1, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[44], keys, mismatches);
													}
													else  {
														//E1={R,A,B}, E9={A,C}
														keys = generate_labels(mismatches, root, b, a, c, 15, e1, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
														increment_match_hash(hash[15], keys, mismatches);
													}
												}
											}
										}
                                    }
                                }
                            }
                        }
					} // End of Case 0112, Type 2

                    // Case 0112, Type 3 by decomposing E1 (|E1| >= 4) to E1={R,A,B}
                    for (unsigned edge_index1=0; (edge_index1 < j_incident_edges.size() && !found_rij_); edge_index1++)  {
                        unsigned e1_ = j_incident_edges[edge_index1];
                        bool invalid = false;
                        for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                        	unsigned e2_ = root_incident_edges[edge_index2];
                            if (e1_ == e2_)
                            	invalid = true;
                        }
                        if (e1_ == e0_ || invalid)
                            continue;
                        for (unsigned iii_=0; iii_<hg.vertex_set[e1_].size(); iii_++)  {
                            if (hg.vertex_set[e1_].size() >= 2 && hg.vertex_set[e1_][iii_] != j)  {
                                k = hg.vertex_set[e1_][iii_];
                                if (k == hg_root || k == j || dist[k] > 2)
                                    continue;
                                bool valid = true;
                                for (unsigned ii=0; ii<hg.vertex_set[e0_].size(); ii++)  {
									if (hg.vertex_set[e0_][ii] == k)
										valid = false;
								}
								if (!valid)
									continue;
                                e2.clear();
                                e3.clear();
                                e4.clear();
                                e5.clear();
                                e6.clear();
                                e7.clear();
                                e8.clear();
                                e9.clear();
                                e10.clear();
								c = hg.node_labels[k];

								found_ri = false;
								found_rj = false;
                                found_rk_ = false;
                                found_ij = false;
                                found_ik = false;
                                found_jk = false;
                                found_rik_ = false;   
                                found_rjk_ = false;
                                found_ijk = false;
                                found_rijk = false;
                                k_incident_edges = hg.get_incident_edges(k);
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == i)  {
                                            found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == i)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < j_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = j_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ri = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e5);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
                                        }
                                        bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											if (e0_ == e2_)
												valid_hyperedge_decomposition = false;
											for (unsigned edge_index3=0; edge_index3 < i_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = i_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_rj = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e6);
										}
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rk_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rk_); ii++)  {
                                    	if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][ii] == k)  {
                                            found_rk_ = true;
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
									unsigned e2_ = i_incident_edges[edge_index2];
									for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
										if (hg.vertex_set[e2_].size() == 2 && hg.vertex_set[e2_][ii] == j)  {
                                            found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8);
                                        }
										bool valid_hyperedge_decomposition(false);
										if (hg.vertex_set[e2_].size() > 2 && hg.vertex_set[e2_][ii] == j)  {
											valid_hyperedge_decomposition = true;
											for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = root_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
											for (unsigned edge_index3=0; edge_index3 < k_incident_edges.size(); edge_index3++)  {
												unsigned e3_ = k_incident_edges[edge_index3];
												if (e2_ == e3_)  {
													valid_hyperedge_decomposition = false;
													break;
												}
											}
										}
										if (valid_hyperedge_decomposition)  {
											found_ij = true;
											insert_hyperedge_label(hg.edge_labels[e2_], e8); 
										}
									}
								}
                                for (unsigned edge_index2=0; (edge_index2 < i_incident_edges.size() && !found_ik); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_ik); ii++)  {
                                    	if (hg.vertex_set[e2_].size() >= 2 && hg.vertex_set[e2_][ii] == k)  {
                                                found_ik = true;
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; edge_index2 < k_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = k_incident_edges[edge_index2];
                                    for (unsigned ii=0; ii<hg.vertex_set[e2_].size(); ii++)  {
                                        if (hg.vertex_set[e2_].size() == 2)  {
                                            if (hg.vertex_set[e2_][ii] == j)  {
                                                found_jk = true;
												insert_hyperedge_label(hg.edge_labels[e2_], e10);
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rik_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rik_); ii++)  {
                                    	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == k)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == i)  {
                                                    found_rik_ = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rjk_); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rjk_); ii++)  {
                                    	if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == k)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    found_rjk_ = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < i_incident_edges.size() && !found_ijk); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_ijk); ii++)  {
                                        bool valid_hyperedge_decomposition(true);
                                        for (unsigned edge_index3=0; edge_index3 < root_incident_edges.size(); edge_index3++)  {
                                             unsigned e3_ = root_incident_edges[edge_index3];
                                            if (e2_ == e3_)  {
                                                valid_hyperedge_decomposition = false;
                                                break;
                                            }
                                        }
                                        if (hg.vertex_set[e2_].size() >= 3 && hg.vertex_set[e2_][ii] == j && valid_hyperedge_decomposition)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == k)  {
                                                    found_ijk = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (unsigned edge_index2=0; (edge_index2 < root_incident_edges.size() && !found_rijk); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    for (unsigned ii=0; (ii<hg.vertex_set[e2_].size() && !found_rijk); ii++)  {
                                        if (hg.vertex_set[e2_].size() >= 4 && hg.vertex_set[e2_][ii] == i)  {
                                            for (unsigned iii=0; iii<hg.vertex_set[e2_].size(); iii++)  {
                                                if (hg.vertex_set[e2_][iii] == j)  {
                                                    for (unsigned iiii=0; iiii<hg.vertex_set[e2_].size(); iiii++)  {
                                                        if (hg.vertex_set[e2_][iiii] == k)  {
                                                            found_rijk = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (HYPERGRAPHLETS_4)  {
                                    if (!found_rijk && !found_rik_ && !found_rjk_ && !found_ijk && !found_rk_ && !found_ik && found_jk)  {
                                        if (found_ri)  {
                                            if (found_rj)  {
                                    	        if (found_ij)  {
                                                    //E1={R,A,B}, E5={R,A}, E6={R,B}, E8={A,B}, E10={B,C}
                                                    keys = generate_labels(mismatches, root, a, b, c, 141, e1, e5, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[141], keys, mismatches);
                                                }
                                                else  {
                                                    //E1={R,A,B}, E5={R,A}, E6={R,B}, E10={B,C}
                                                    keys = generate_labels(mismatches, root, a, b, c, 66, e1, e5, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[66], keys, mismatches);
									            }
                                            }
                                            else  {
                                    	        if (found_ij)  {
                                                    //E1={R,A,B}, E5={R,A}, E8={A,B}, E10={B,C}
                                                    keys = generate_labels(mismatches, root, a, b, c, 83, e1, e5, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[83], keys, mismatches);
                                                }
                                                else  {
                                                    //E1={R,A,B}, E5={R,A}, E10={B,C}
													keys = generate_labels(mismatches, root, a, b, c, 32, e1, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[32], keys, mismatches);
									            }
                                            }
                                        }
                                        else  {
                                            if (found_rj)  {
                                                if (found_ij)  {
                                                    //E1={R,A,B}, E6={R,B}, E8={A,B}, E10={B,C}
                                                    keys = generate_labels(mismatches, root, b, a, c, 79, e1, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[79], keys, mismatches);
                                                }
                                                else  {
                                                    //E1={R,A,B}, E6={R,B}, E10={B,C} 
													keys = generate_labels(mismatches, root, b, a, c, 28, e1, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
													increment_match_hash(hash[28], keys, mismatches);
                                                }
                                            }
                                            else  {
                                                if (found_ij)  {
                                                    //E1={R,A,B}, E8={A,B}, E10={B,C} 
                                                    keys = generate_labels(mismatches, root, b, a, c, 43, e1, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[43], keys, mismatches);
                                                }
                                                else  {
                                                    //E1={R,A,B}, E10={B,C}
                                    	            keys = generate_labels(mismatches, root, a, b, c, 15, e1, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                    increment_match_hash(hash[15], keys, mismatches);
                                                }
                                            }
                                        }
                                    }
								}
							}
						}
                    } // End of Case 0112, Type 3
					#endif

					for (unsigned iii_=0; iii_<ii_; iii_++)  {
						k = hg.vertex_set[e0_][iii_];
						if (k == hg_root || k == i || k == j)
							continue;
				        e2.clear();
				        e3.clear();
        				e4.clear();
		        		e5.clear();
				        e6.clear();
        				e7.clear();
		        		e8.clear();
		        		e9.clear();
		        		e10.clear();
			        	e11.clear();
						c = hg.node_labels[k];

						found_ri = false;
						found_rj = false;
						found_rk = false;
						found_ij = false;
						found_ik = false;
						found_jk = false;
						found_rij = false;
						found_rik = false;
						found_rjk = false;
						found_ijk = false;
                        i_incident_edges = hg.get_incident_edges(i);
                        j_incident_edges = hg.get_incident_edges(j);
                        k_incident_edges = hg.get_incident_edges(k);
						for (unsigned edge_index1=0; edge_index1 < root_incident_edges.size(); edge_index1++)  {
							unsigned e1_ = root_incident_edges[edge_index1];					        
							for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
								if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii] == i)  {
									found_ri = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e6);
								}
								#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
								bool valid_hyperedge_decomposition(false);
								if (hg.vertex_set[e1_].size() > 2 && hg.vertex_set[e1_][ii] == i)  {
									valid_hyperedge_decomposition = true;
									if (e0_ == e1_)
										valid_hyperedge_decomposition = false;
                                	for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = j_incident_edges[edge_index2];
										if (e1_ == e2_)  {
											valid_hyperedge_decomposition = false;
											break;
										}
									}
									for (unsigned edge_index2=0; edge_index2 < k_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = k_incident_edges[edge_index2];
										if (e1_ == e2_)  {
											valid_hyperedge_decomposition = false;
											break;
										}
									}
								}
								if (valid_hyperedge_decomposition)  {
									found_ri = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e6);
								}
								#endif
							}
						}
						for (unsigned edge_index1=0; edge_index1 < root_incident_edges.size(); edge_index1++)  {
							unsigned e1_ = root_incident_edges[edge_index1];					        
							for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
								if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii] == j)  {
									found_rj = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e7);
								}
								#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
								bool valid_hyperedge_decomposition(false);
								if (hg.vertex_set[e1_].size() > 2 && hg.vertex_set[e1_][ii] == j)  {
									valid_hyperedge_decomposition = true;
									if (e0_ == e1_)
										valid_hyperedge_decomposition = false;
                                	for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = i_incident_edges[edge_index2];
										if (e1_ == e2_)  {
											valid_hyperedge_decomposition = false;
											break;
										}
									}
									for (unsigned edge_index2=0; edge_index2 < k_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = k_incident_edges[edge_index2];
										if (e1_ == e2_)  {
											valid_hyperedge_decomposition = false;
											break;
										}
									}
								}
								if (valid_hyperedge_decomposition)  {
									found_rj = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e7);
								}
								#endif
							}
						}
						for (unsigned edge_index1=0; edge_index1 < root_incident_edges.size(); edge_index1++)  {
							unsigned e1_ = root_incident_edges[edge_index1];					        
							for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
								if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii] == k)  {
									found_rk = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e8);
								}
								#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
								bool valid_hyperedge_decomposition(false);
								if (hg.vertex_set[e1_].size() > 2 && hg.vertex_set[e1_][ii] == k)  {
									valid_hyperedge_decomposition = true;
									if (e0_ == e1_)
										valid_hyperedge_decomposition = false;
                                	for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = i_incident_edges[edge_index2];
										if (e1_ == e2_)  {
											valid_hyperedge_decomposition = false;
											break;
										}
									}
									for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = j_incident_edges[edge_index2];
										if (e1_ == e2_)  {
											valid_hyperedge_decomposition = false;
											break;
										}
									}
								}
								if (valid_hyperedge_decomposition)  {
									found_rk = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e8);
								}
								#endif
							}
						}
						for (unsigned edge_index1=0; edge_index1 < i_incident_edges.size(); edge_index1++)  {
							unsigned e1_ = i_incident_edges[edge_index1];
							for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
								if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii] == j)  {
									found_ij = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e9);
								}
								#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
								bool valid_hyperedge_decomposition(false);
								if (hg.vertex_set[e1_].size() > 2 && hg.vertex_set[e1_][ii] == j)  {
									valid_hyperedge_decomposition = true;
									for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = root_incident_edges[edge_index2];
										if (e1_ == e2_)  {
											valid_hyperedge_decomposition = false;
											break;
										}
									}
									for (unsigned edge_index2=0; edge_index2 < k_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = k_incident_edges[edge_index2];
										if (e1_ == e2_)  {
											valid_hyperedge_decomposition = false;
											break;
										}
									}
								}
								if (valid_hyperedge_decomposition)  {
									found_ij = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e9);
								}
								#endif
							}
						}
						for (unsigned edge_index1=0; edge_index1 < i_incident_edges.size(); edge_index1++)  {
							unsigned e1_ = i_incident_edges[edge_index1];
							for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
								if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii] == k)  {
									found_ik = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e10);
								}
								#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
								bool valid_hyperedge_decomposition(false);
								if (hg.vertex_set[e1_].size() > 2 && hg.vertex_set[e1_][ii] == k)  {
									valid_hyperedge_decomposition = true;
									for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = root_incident_edges[edge_index2];
										if (e1_ == e2_)  {
											valid_hyperedge_decomposition = false;
											break;
										}
									}
									for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = j_incident_edges[edge_index2];
										if (e1_ == e2_)  {
											valid_hyperedge_decomposition = false;
											break;
										}
									}
								}
								if (valid_hyperedge_decomposition)  {
									found_ik = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e10);
								}
								#endif
							}
						}
						for (unsigned edge_index1=0; edge_index1 < j_incident_edges.size(); edge_index1++)  {
							unsigned e1_ = j_incident_edges[edge_index1];
							for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
								if (hg.vertex_set[e1_].size() == 2 && hg.vertex_set[e1_][ii] == k)  {
									found_jk = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e11);
								}
								#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
								bool valid_hyperedge_decomposition(false);
								if (hg.vertex_set[e1_].size() > 2 && hg.vertex_set[e1_][ii] == k)  {
									valid_hyperedge_decomposition = true;
									for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = root_incident_edges[edge_index2];
										if (e1_ == e2_)  {
											valid_hyperedge_decomposition = false;
											break;
										}
									}
									for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
										unsigned e2_ = i_incident_edges[edge_index2];
										if (e1_ == e2_)  {
											valid_hyperedge_decomposition = false;
											break;
										}
									}
								}
								if (valid_hyperedge_decomposition)  {
									found_jk = true;
									insert_hyperedge_label(hg.edge_labels[e1_], e11);
								}
								#endif
							}
						}
						for (unsigned edge_index1=0; edge_index1 < root_incident_edges.size(); edge_index1++)  {
							unsigned e1_ = root_incident_edges[edge_index1];
							for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
								#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                bool valid_hyperedge_decomposition(true);
                                if (e0_ == e1_)
									valid_hyperedge_decomposition = false;
								for (unsigned edge_index2=0; edge_index2 < k_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = k_incident_edges[edge_index2];
                                    if (e1_ == e2_)  {
                                        valid_hyperedge_decomposition = false;
                                        break;
                                    }
                                }
                                if (hg.vertex_set[e1_].size() >= 3 && hg.vertex_set[e1_][ii] == i && valid_hyperedge_decomposition)
                                #else
                                if (hg.vertex_set[e1_].size() == 3 && hg.vertex_set[e1_][ii] == i)  
                                #endif
                                {
									for (unsigned iii=0; iii<hg.vertex_set[e1_].size(); iii++)  {
										if (hg.vertex_set[e1_][iii] == j)  {
											found_rij = true;
											insert_hyperedge_label(hg.edge_labels[e1_], e2);
										}
									}
								}
							}
						}
						for (unsigned edge_index1=0; edge_index1 < root_incident_edges.size(); edge_index1++)  {
							unsigned e1_ = root_incident_edges[edge_index1];
							for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
								#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                bool valid_hyperedge_decomposition(true);
                                if (e0_ == e1_)
									valid_hyperedge_decomposition = false;
								for (unsigned edge_index2=0; edge_index2 < j_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = j_incident_edges[edge_index2];
                                    if (e1_ == e2_)  {
                                        valid_hyperedge_decomposition = false;
                                        break;
                                    }
                                }
                                if (hg.vertex_set[e1_].size() >= 3 && hg.vertex_set[e1_][ii] == i && valid_hyperedge_decomposition)
                                #else
                                if (hg.vertex_set[e1_].size() == 3 && hg.vertex_set[e1_][ii] == i)
                                #endif
                                {
									for (unsigned iii=0; iii<hg.vertex_set[e1_].size(); iii++)  {
										if (hg.vertex_set[e1_][iii] == k)  {
											found_rik = true;
											insert_hyperedge_label(hg.edge_labels[e1_], e3);
										}
									}
								}
							}
						}
						for (unsigned edge_index1=0; edge_index1 < root_incident_edges.size(); edge_index1++)  {
							unsigned e1_ = root_incident_edges[edge_index1];
							for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
								#if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                bool valid_hyperedge_decomposition(true);
                                if (e0_ == e1_)
									valid_hyperedge_decomposition = false;
								for (unsigned edge_index2=0; edge_index2 < i_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = i_incident_edges[edge_index2];
                                    if (e1_ == e2_)  {
                                        valid_hyperedge_decomposition = false;
                                        break;
                                    }
                                }
                                if (hg.vertex_set[e1_].size() >= 3 && hg.vertex_set[e1_][ii] == j && valid_hyperedge_decomposition)
                                #else
                                if (hg.vertex_set[e1_].size() == 3 && hg.vertex_set[e1_][ii] == j)
                                #endif
                                {
									for (unsigned iii=0; iii<hg.vertex_set[e1_].size(); iii++)  {
										if (hg.vertex_set[e1_][iii] == k)  {
											found_rjk = true;
											insert_hyperedge_label(hg.edge_labels[e1_], e4);
										}
									}
								}
							}
						}
						for (unsigned edge_index1=0; edge_index1 < i_incident_edges.size(); edge_index1++)  {
                            unsigned e1_ = i_incident_edges[edge_index1];
                            for (unsigned ii=0; ii<hg.vertex_set[e1_].size(); ii++)  {
                                #if ENABLE_INDUCED_HYPERGRAPHLETS == 1
                                bool valid_hyperedge_decomposition(true);
                                for (unsigned edge_index2=0; edge_index2 < root_incident_edges.size(); edge_index2++)  {
                                    unsigned e2_ = root_incident_edges[edge_index2];
                                    if (e1_ == e2_)  {
                                        valid_hyperedge_decomposition = false;
                                        break;
                                    }
                                }
                                if (hg.vertex_set[e1_].size() >= 3 && hg.vertex_set[e1_][ii] == j && valid_hyperedge_decomposition)
                                #else
                                if (hg.vertex_set[e1_].size() == 3 && hg.vertex_set[e1_][ii] == j)
                                #endif
                                {
                                    for (unsigned iii=0; iii<hg.vertex_set[e1_].size(); iii++)  {
                                        if (hg.vertex_set[e1_][iii] == k)  {
											found_ijk = true;
											insert_hyperedge_label(hg.edge_labels[e1_], e5);
                                        }
                                    }
                                }
                            }
                        }
	                    
						// Case 0111
						if (HYPERGRAPHLETS_4)  {
							if (found_rij)  {
								if (found_rik)  {
									if (found_rjk)  {
										if (found_ijk)  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 471, e1, e2, e3, e4, e6, e7, e8, e5, e9, e10, e11);
																	increment_match_hash(hash[471], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 469, e1, e2, e3, e4, e6, e7, e8, e5, e9, e10, ZERO_VECTOR);
																	increment_match_hash(hash[469], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 469, e1, e2, e4, e3, e7, e6, e8, e5, e9, e11, ZERO_VECTOR);
																	increment_match_hash(hash[469], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B} 
																	keys = generate_labels(mismatches, root, a, b, c, 458, e1, e2, e3, e4, e6, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[458], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 469, e1, e3, e4, e2, e8, e6, e7, e5, e10, e11, ZERO_VECTOR);
																	increment_match_hash(hash[469], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C} 
																	keys = generate_labels(mismatches, root, a, c, b, 458, e1, e3, e2, e4, e6, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[458], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 458, e1, e4, e2, e3, e7, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[458], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 424, e1, e2, e3, e4, e6, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[424], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 470, e1, e2, e3, e4, e6, e7, e5, e9, e10, e11, ZERO_VECTOR);
																	increment_match_hash(hash[470], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 463, e1, e2, e3, e4, e6, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[463], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 463, e1, e2, e4, e3, e7, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[463], keys, mismatches);
																}
																else  {
                                                                    //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
                                                                    keys = generate_labels(mismatches, root, a, b, c, 437, e1, e2, e3, e4, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[437], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
                                                                    //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
                                                                    keys = generate_labels(mismatches, root, a, b, c, 464, e1, e2, e3, e4, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[464], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C} 
																	keys = generate_labels(mismatches, root, a, b, c, 442, e1, e2, e3, e4, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[442], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 442, e1, e2, e4, e3, e7, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[442], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
																	keys = generate_labels(mismatches, root, a, b, c, 386, e1, e2, e3, e4, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[386], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 470, e1, e3, e2, e4, e6, e8, e5, e10, e9, e11, ZERO_VECTOR);
																	increment_match_hash(hash[470], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C} 
																	keys = generate_labels(mismatches, root, a, c, b, 463, e1, e3, e2, e4, e6, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[463], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 464, e1, e3, e2, e4, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[464], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, c, b, 442, e1, e3, e2, e4, e6, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[442], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
                                                                    //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
                                                                    keys = generate_labels(mismatches, root, c, a, b, 463, e1, e3, e4, e2, e8, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[463], keys, mismatches);
																}
																else  {
                                                                    //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
                                                                    keys = generate_labels(mismatches, root, a, c, b, 437, e1, e3, e2, e4, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[437], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 442, e1, e3, e4, e2, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[442], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, c, b, 386, e1, e3, e2, e4, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[386], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 465, e1, e2, e3, e4, e6, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[465], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 447, e1, e2, e3, e4, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[447], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 448, e1, e2, e3, e4, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[448], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 403, e1, e2, e3, e4, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[403], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 448, e1, e3, e2, e4, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[448], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 403, e1, e3, e2, e4, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[403], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 404, e1, e2, e3, e4, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[404], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A} 
																	keys = generate_labels(mismatches, root, a, b, c, 323, e1, e2, e3, e4, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[323], keys, mismatches);
																}
															}
														}
													}
												}
											} 
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 470, e1, e4, e2, e3, e7, e8, e5, e11, e9, e10, ZERO_VECTOR);
																	increment_match_hash(hash[470], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 464, e1, e4, e2, e3, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[464], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 463, e1, e4, e2, e3, e7, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[463], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B} 
																	keys = generate_labels(mismatches, root, b, c, a, 442, e1, e4, e2, e3, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[442], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 463, e1, e4, e3, e2, e8, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[463], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 442, e1, e4, e3, e2, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[442], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 437, e1, e4, e2, e3, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[437], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, b, c, a, 386, e1, e4, e2, e3, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[386], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 465, e1, e2, e4, e3, e7, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[465], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 448, e1, e2, e4, e3, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[448], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B} E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 447, e1, e2, e4, e3, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[447], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 403, e1, e2, e4, e3, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[403], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 448, e1, e4, e2, e3, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[448], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 404, e1, e2, e4, e3, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[404], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 403, e1, e4, e2, e3, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[403], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}
																	keys = generate_labels(mismatches, root, b, a, c, 323, e1, e2, e4, e3, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[323], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 465, e1, e3, e4, e2, e8, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[465], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 448, e1, e3, e4, e2, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[448], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 448, e1, e4, e3, e2, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[448], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 404, e1, e3, e4, e2, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[404], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 447, e1, e3, e4, e2, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[447], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 403, e1, e3, e4, e2, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[403], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 403, e1, e4, e3, e2, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[403], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, a, b, 323, e1, e3, e4, e2, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[323], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 449, e1, e2, e3, e4, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[449], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 408, e1, e2, e3, e4, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[408], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 408, e1, e2, e4, e3, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[408], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 332, e1, e2, e3, e4, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[332], keys, mismatches);
																}
															}
														}
														else  {
                                                            if (found_ik)  {
                                                                if (found_jk)  {
                                                                    //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
                                                                    keys = generate_labels(mismatches, root, c, a, b, 408, e1, e4, e3, e2, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[408], keys, mismatches);
                                                                }
																else  {
                                                                    //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E10={A,C}
                                                                    keys = generate_labels(mismatches, root, a, c, b, 332, e1, e3, e2, e4, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[332], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 332, e1, e4, e2, e3, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[332], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 231, e1, e2, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[231], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
										else  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 467, e1, e2, e3, e4, e6, e7, e8, e9, e10, e11, ZERO_VECTOR);
																	increment_match_hash(hash[467], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 455, e1, e2, e3, e4, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[455], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 455, e1, e2, e4, e3, e7, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[455], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 421, e1, e2, e3, e4, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[421], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 455, e1, e3, e4, e2, e8, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[455], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 421, e1, e3, e2, e4, e6, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[421], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 421, e1, e4, e2, e3, e7, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[421], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 351, e1, e2, e3, e4, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[351], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 460, e1, e2, e3, e4, e6, e7, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[460], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 433, e1, e2, e3, e4, e6, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[433], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 433, e1, e2, e4, e3, e7, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[433], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 371, e1, e2, e3, e4, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[371], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 439, e1, e2, e3, e4, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[439], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 382, e1, e2, e3, e4, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[382], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 382, e1, e2, e4, e3, e7, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[382], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}
																	keys = generate_labels(mismatches, root, a, b, c, 287, e1, e2, e3, e4, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[287], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 460, e1, e3, e2, e4, e6, e8, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[460], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 433, e1, e3, e2, e4, e6, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[433], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 439, e1, e3, e2, e4, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[439], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, c, b, 382, e1, e3, e2, e4, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[382], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 433, e1, e3, e4, e2, e8, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[433], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 371, e1, e3, e2, e4, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[371], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 382, e1, e3, e4, e2, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[382], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C} 
																	keys = generate_labels(mismatches, root, a, c, b, 287, e1, e3, e2, e4, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[287], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 444, e1, e2, e3, e4, e6, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[444], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 395, e1, e2, e3, e4, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[395], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 399, e1, e2, e3, e4, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[399], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 315, e1, e2, e3, e4, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[315], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 399, e1, e3, e2, e4, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[399], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 315, e1, e3, e2, e4, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[315], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 320, e1, e2, e3, e4, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[320], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E6={R,A} 
																	keys = generate_labels(mismatches, root, a, b, c, 213, e1, e2, e3, e4, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[213], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 460, e1, e4, e2, e3, e7, e8, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[460], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 439, e1, e4, e2, e3, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[439], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 433, e1, e4, e2, e3, e7, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[433], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, c, a, 382, e1, e4, e2, e3, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[382], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 433, e1, e4, e3, e2, e8, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[433], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 382, e1, e4, e3, e2, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[382], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 371, e1, e4, e2, e3, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[371], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C} 
																	keys = generate_labels(mismatches, root, b, c, a, 287, e1, e4, e2, e3, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[287], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 444, e1, e2, e4, e3, e7, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[444], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 399, e1, e2, e4, e3, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[399], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 395, e1, e2, e4, e3, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[395], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 315, e1, e2, e4, e3, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[315], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 399, e1, e4, e2, e3, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[399], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 320, e1, e2, e4, e3, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[320], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 315, e1, e4, e2, e3, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[315], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E7={R,B}
																	keys = generate_labels(mismatches, root, b, a, c, 213, e1, e2, e4, e3, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[213], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 444, e1, e3, e4, e2, e8, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[444], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 399, e1, e3, e4, e2, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[399], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 399, e1, e4, e3, e2, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[399], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 320, e1, e3, e4, e2, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[320], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 395, e1, e3, e4, e2, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[395], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 315, e1, e3, e4, e2, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[315], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 315, e1, e4, e3, e2, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[315], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, a, b, 213, e1, e3, e4, e2, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[213], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 406, e1, e2, e3, e4, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[406], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 329, e1, e2, e3, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[329], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 329, e1, e2, e4, e3, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[329], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 228, e1, e2, e3, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[228], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 329, e1, e3, e4, e2, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[329], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 228, e1, e3, e2, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[228], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 228, e1, e4, e2, e3, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[228], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 129, e1, e2, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[129], keys, mismatches);
																}
															}
														}
													}
												}
											}
										} 
									} 
									else  {
										if (found_ijk)  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 468, e1, e2, e3, e6, e7, e8, e5, e9, e10, e11, ZERO_VECTOR);
																	increment_match_hash(hash[468], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 456, e1, e2, e3, e6, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[456], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 457, e1, e2, e3, e6, e7, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[457], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 422, e1, e2, e3, e6, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[422], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 457, e1, e2, e3, e6, e8, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[457], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 422, e1, e2, e3, e6, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[422], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 423, e1, e2, e3, e6, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[423], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C} 
																	keys = generate_labels(mismatches, root, a, b, c, 352, e1, e2, e3, e6, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[352], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 461, e1, e2, e3, e6, e7, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[461], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 434, e1, e2, e3, e6, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[434], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 435, e1, e2, e3, e6, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[435], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 372, e1, e2, e3, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[372], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 440, e1, e2, e3, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[440], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 383, e1, e2, e3, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[383], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 384, e1, e2, e3, e6, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[384], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
																	keys = generate_labels(mismatches, root, a, b, c, 288, e1, e2, e3, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[288], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 461, e1, e3, e2, e6, e8, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[461], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 434, e1, e3, e2, e6, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[434], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 440, e1, e3, e2, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[440], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, c, b, 383, e1, e3, e2, e6, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[383], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 435, e1, e3, e2, e6, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[435], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 372, e1, e3, e2, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[372], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 384, e1, e3, e2, e6, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[384], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, c, b, 288, e1, e3, e2, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[288], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 445, e1, e2, e3, e6, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[445], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 396, e1, e2, e3, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[396], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 400, e1, e2, e3, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[400], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 316, e1, e2, e3, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[316], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 400, e1, e3, e2, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[400], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 316, e1, e3, e2, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[316], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 321, e1, e2, e3, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[321], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={R,A}
																	keys = generate_labels(mismatches, root, a, b, c, 214, e1, e2, e3, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[214], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 462, e1, e2, e3, e7, e8, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[462], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 441, e1, e2, e3, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[441], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 436, e1, e2, e3, e7, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[436], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 385, e1, e2, e3, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[385], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 436, e1, e3, e2, e8, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[436], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 385, e1, e3, e2, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[385], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 373, e1, e2, e3, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[373], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 289, e1, e2, e3, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[289], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 446, e1, e2, e3, e7, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[446], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 401, e1, e2, e3, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[401], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 397, e1, e2, e3, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[397], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 317, e1, e2, e3, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[317], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 402, e1, e2, e3, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[402], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 322, e1, e2, e3, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[322], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 318, e1, e2, e3, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[318], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E7={R,B}
																	keys = generate_labels(mismatches, root, a, b, c, 215, e1, e2, e3, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[215], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 446, e1, e3, e2, e8, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[446], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 401, e1, e3, e2, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[401], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 402, e1, e3, e2, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[402], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, c, b, 322, e1, e3, e2, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[322], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 397, e1, e3, e2, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[397], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 317, e1, e3, e2, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[317], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 318, e1, e3, e2, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[318], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, c, b, 215, e1, e3, e2, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[215], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 407, e1, e2, e3, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[407], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 330, e1, e2, e3, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[330], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 331, e1, e2, e3, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[331], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 229, e1, e2, e3, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[229], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 331, e1, e3, e2, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[331], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 229, e1, e3, e2, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[229], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 230, e1, e2, e3, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[230], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 130, e1, e2, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[130], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
										else  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 452, e1, e2, e3, e6, e7, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[452], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 415, e1, e2, e3, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[415], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 417, e1, e2, e3, e6, e7, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[417], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 345, e1, e2, e3, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[345], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 417, e1, e3, e2, e6, e8, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[417], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 345, e1, e3, e2, e6, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[345], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 348, e1, e2, e3, e6, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[348], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 246, e1, e2, e3, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[246], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 427, e1, e2, e3, e6, e7, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[427], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 362, e1, e2, e3, e6, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[362], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 364, e1, e2, e3, e6, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[364], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 264, e1, e2, e3, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[264], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 376, e1, e2, e3, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[376], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 278, e1, e2, e3, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[278], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 280, e1, e2, e3, e6, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[280], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E7={R,B}
																	keys = generate_labels(mismatches, root, a, b, c, 169, e1, e2, e3, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[169], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 427, e1, e3, e2, e6, e8, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[427], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 362, e1, e3, e2, e6, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[362], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 376, e1, e3, e2, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[376], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, c, b, 278, e1, e3, e2, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[278], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 364, e1, e3, e2, e6, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[364], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 264, e1, e3, e2, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[264], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 280, e1, e3, e2, e6, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[280], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, c, b, 169, e1, e3, e2, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[169], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 389, e1, e2, e3, e6, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[389], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 299, e1, e2, e3, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[299], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 306, e1, e2, e3, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[306], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 197, e1, e2, e3, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[197], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 306, e1, e3, e2, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[306], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 197, e1, e3, e2, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[197], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 207, e1, e2, e3, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[207], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E6={R,A}
																	keys = generate_labels(mismatches, root, a, b, c, 107, e1, e2, e3, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[107], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 430, e1, e2, e3, e7, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[430], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 379, e1, e2, e3, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[379], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 367, e1, e2, e3, e7, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[367], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 283, e1, e2, e3, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[283], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 367, e1, e3, e2, e8, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[367], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 283, e1, e3, e2, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[283], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 267, e1, e2, e3, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[267], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 172, e1, e2, e3, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[172], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 391, e1, e2, e3, e7, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[391], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 308, e1, e2, e3, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[308], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 301, e1, e2, e3, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[301], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 199, e1, e2, e3, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[199], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 311, e1, e2, e3, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[311], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 209, e1, e2, e3, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[209], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 202, e1, e2, e3, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[202], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E7={R,B}
																	keys = generate_labels(mismatches, root, a, b, c, 109, e1, e2, e3, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[109], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 391, e1, e3, e2, e8, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[391], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 308, e1, e3, e2, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[308], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 311, e1, e3, e2, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[311], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, c, b, 209, e1, e3, e2, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[209], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 301, e1, e3, e2, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[301], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 199, e1, e3, e2, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[199], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 202, e1, e3, e2, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[202], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, c, b, 109, e1, e3, e2, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[109], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 326, e1, e2, e3, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[326], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 222, e1, e2, e3, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[222], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 224, e1, e2, e3, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[224], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 123, e1, e2, e3, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[123], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 224, e1, e3, e2, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[224], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 123, e1, e3, e2, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[123], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 126, e1, e2, e3, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[126], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C} 
																	keys = generate_labels(mismatches, root, a, b, c, 55, e1, e2, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[55], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
									}
								} 
								else  {
									if (found_rjk)  {
										if (found_ijk)  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 468, e1, e2, e4, e7, e6, e8, e5, e9, e11, e10, ZERO_VECTOR);
																	increment_match_hash(hash[468], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 457, e1, e2, e4, e7, e6, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[457], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 456, e1, e2, e4, e7, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[456], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 422, e1, e2, e4, e7, e6, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[422], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 457, e1, e4, e2, e7, e8, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[457], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 423, e1, e2, e4, e7, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[423], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {                                                                        
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 422, e1, e4, e2, e7, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[422], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, b, a, c, 352, e1, e2, e4, e7, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[352], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 461, e1, e2, e4, e7, e6, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[461], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 435, e1, e2, e4, e7, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[435], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 434, e1, e2, e4, e7, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[434], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 372, e1, e2, e4, e7, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[372], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 440, e1, e2, e4, e7, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[440], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 384, e1, e2, e4, e7, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[384], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 383, e1, e2, e4, e7, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[383], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
																	keys = generate_labels(mismatches, root, b, a, c, 288, e1, e2, e4, e7, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[288], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 462, e1, e2, e4, e6, e8, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[462], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 436, e1, e2, e4, e6, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[436], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 441, e1, e2, e4, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[441], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 385, e1, e2, e4, e6, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[385], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 436, e1, e4, e2, e8, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[436], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 373, e1, e2, e4, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[373], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 385, e1, e4, e2, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[385], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
																	keys = generate_labels(mismatches, root, b, a, c, 289, e1, e2, e4, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[289], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 446, e1, e2, e4, e6, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[446], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 397, e1, e2, e4, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[397], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 401, e1, e2, e4, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[401], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 317, e1, e2, e4, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[317], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 402, e1, e2, e4, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[402], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 318, e1, e2, e4, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[318], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 322, e1, e2, e4, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[322], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E6={R,A} 
																	keys = generate_labels(mismatches, root, b, a, c, 215, e1, e2, e4, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[215], keys, mismatches);
																}
															}
														}
													} 
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 461, e1, e4, e2, e7, e8, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[461], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 440, e1, e4, e2, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[440], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 434, e1, e4, e2, e7, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[434], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, c, a, 383, e1, e4, e2, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[383], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 435, e1, e4, e2, e7, e8, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[435], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 384, e1, e4, e2, e7, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[384], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 372, e1, e4, e2, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[372], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, b, c, a, 288, e1, e4, e2, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[288], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 445, e1, e2, e4, e7, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[445], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 400, e1, e2, e4, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[400], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 396, e1, e2, e4, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[396], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 316, e1, e2, e4, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[316], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 400, e1, e4, e2, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[400], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 321, e1, e2, e4, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[321], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 316, e1, e4, e2, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[316], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E7={R,B} 
																	keys = generate_labels(mismatches, root, b, a, c, 214, e1, e2, e4, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[214], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 446, e1, e4, e2, e8, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[446], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 402, e1, e4, e2, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[402], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 401, e1, e4, e2, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[401], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, c, a, 322, e1, e4, e2, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[322], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 397, e1, e4, e2, e8, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[397], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 318, e1, e4, e2, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[318], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 317, e1, e4, e2, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[317], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E8={R,C}
																	keys = generate_labels(mismatches, root, b, c, a, 215, e1, e4, e2, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[215], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 407, e1, e2, e4, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[407], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 331, e1, e2, e4, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[331], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 330, e1, e2, e4, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[330], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 229, e1, e2, e4, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[229], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 331, e1, e4, e2, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[331], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 230, e1, e2, e4, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[230], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 229, e1, e4, e2, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[229], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={A,B,C} 
																	keys = generate_labels(mismatches, root, b, a, c, 130, e1, e2, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[130], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
										else  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 452, e1, e2, e4, e7, e6, e8, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[452], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 417, e1, e2, e4, e7, e6, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[417], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 415, e1, e2, e4, e7, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[415], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 345, e1, e2, e4, e7, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[345], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 417, e1, e4, e2, e7, e8, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[417], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 348, e1, e2, e4, e7, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[348], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 345, e1, e4, e2, e7, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[345], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, b, a, c, 246, e1, e2, e4, e7, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[246], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 427, e1, e2, e4, e7, e6, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[427], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 364, e1, e2, e4, e7, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[364], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 362, e1, e2, e4, e7, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[362], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 264, e1, e2, e4, e7, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[264], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 376, e1, e2, e4, e7, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[376], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 280, e1, e2, e4, e7, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[280], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 278, e1, e2, e4, e7, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[278], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E7={R,B}
																	keys = generate_labels(mismatches, root, b, a, c, 169, e1, e2, e4, e7, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[169], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 430, e1, e2, e4, e6, e8, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[430], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 367, e1, e2, e4, e6, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[367], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 379, e1, e2, e4, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[379], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 283, e1, e2, e4, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[283], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 367, e1, e4, e2, e8, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[367], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 267, e1, e2, e4, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[267], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 283, e1, e4, e2, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[283], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E8={R,C}
																	keys = generate_labels(mismatches, root, b, a, c, 172, e1, e2, e4, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[172], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 391, e1, e2, e4, e6, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[391], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 301, e1, e2, e4, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[301], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 308, e1, e2, e4, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[308], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 199, e1, e2, e4, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[199], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 311, e1, e2, e4, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[311], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 202, e1, e2, e4, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[202], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 209, e1, e2, e4, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[209], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E6={R,A}
																	keys = generate_labels(mismatches, root, b, a, c, 109, e1, e2, e4, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[109], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 427, e1, e4, e2, e7, e8, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[427], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 376, e1, e4, e2, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[376], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 362, e1, e4, e2, e7, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[362], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, c, a, 278, e1, e4, e2, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[278], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 364, e1, e4, e2, e7, e8, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[364], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 280, e1, e4, e2, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[280], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 264, e1, e4, e2, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[264], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, b, c, a, 169, e1, e4, e2, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[169], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	 keys = generate_labels(mismatches, root, b, a, c, 389, e1, e2, e4, e7, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	 increment_match_hash(hash[389], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 306, e1, e2, e4, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[306], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 299, e1, e2, e4, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[299], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 197, e1, e2, e4, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[197], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 306, e1, e4, e2, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[306], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 207, e1, e2, e4, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[207], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 197, e1, e4, e2, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[197], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E7={R,B}
																	keys = generate_labels(mismatches, root, b, a, c, 107, e1, e2, e4, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[107], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 391, e1, e4, e2, e8, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[391], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 311, e1, e4, e2, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[311], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 308, e1, e4, e2, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[308], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, c, a, 209, e1, e4, e2, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[209], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 301, e1, e4, e2, e8, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[301], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 202, e1, e4, e2, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[202], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 199, e1, e4, e2, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[199], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E8={R,C}
																	keys = generate_labels(mismatches, root, b, c, a, 109, e1, e4, e2, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[109], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 326, e1, e2, e4, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[326], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 224, e1, e2, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[224], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 222, e1, e2, e4, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[222], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 123, e1, e2, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[123], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 224, e1, e4, e2, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[224], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 126, e1, e2, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[126], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 123, e1, e4, e2, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[123], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 55, e1, e2, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[55], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
									}
									else  {
										if (found_ijk)  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 453, e1, e2, e6, e7, e8, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[453], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 418, e1, e2, e7, e6, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[418], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 418, e1, e2, e6, e7, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[418], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 346, e1, e2, e6, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[346], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 419, e1, e2, e6, e7, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[419], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 349, e1, e2, e7, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[349], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 349, e1, e2, e6, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[349], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 247, e1, e2, e6, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[247], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 428, e1, e2, e6, e7, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[428], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 365, e1, e2, e7, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[365], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 365, e1, e2, e6, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[365], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 265, e1, e2, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[265], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 377, e1, e2, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[377], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 281, e1, e2, e7, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[281], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 281, e1, e2, e6, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[281], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E7={R,B}
																	keys = generate_labels(mismatches, root, a, b, c, 170, e1, e2, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[170], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 431, e1, e2, e6, e8, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[431], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 368, e1, e2, e6, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[368], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 380, e1, e2, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[380], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 284, e1, e2, e6, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[284], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 369, e1, e2, e6, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[369], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 268, e1, e2, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[268], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 285, e1, e2, e6, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[285], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 173, e1, e2, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[173], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 392, e1, e2, e6, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[392], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 302, e1, e2, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[302], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 309, e1, e2, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[309], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 200, e1, e2, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[200], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 312, e1, e2, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[312], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 203, e1, e2, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[203], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 210, e1, e2, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[210], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E6={R,A}
																	keys = generate_labels(mismatches, root, a, b, c, 110, e1, e2, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[110], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 431, e1, e2, e7, e8, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[431], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 380, e1, e2, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[380], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 368, e1, e2, e7, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[368], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 284, e1, e2, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[284], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 369, e1, e2, e7, e8, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[369], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 285, e1, e2, e7, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[285], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 268, e1, e2, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[268], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, b, a, c, 173, e1, e2, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[173], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 392, e1, e2, e7, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[392], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 309, e1, e2, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[309], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 302, e1, e2, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[302], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 200, e1, e2, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[200], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 312, e1, e2, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[312], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 210, e1, e2, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[210], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 203, e1, e2, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[203], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E7={R,B}
																	keys = generate_labels(mismatches, root, b, a, c, 110, e1, e2, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[110], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 393, e1, e2, e8, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[393], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 313, e1, e2, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[313], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 313, e1, e2, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[313], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 211, e1, e2, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[211], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 303, e1, e2, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[303], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 204, e1, e2, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[204], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 204, e1, e2, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[204], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 111, e1, e2, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[111], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 327, e1, e2, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[327], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 225, e1, e2, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[225], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 225, e1, e2, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[225], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 124, e1, e2, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[124], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 226, e1, e2, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[226], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 127, e1, e2, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[127], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 127, e1, e2, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[127], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E5={A,B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 56, e1, e2, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[56], keys, mismatches);
																}
															}
														}
													}
												}
											}
										} 
										else  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 411, e1, e2, e6, e7, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[411], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 339, e1, e2, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[339], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 339, e1, e2, e7, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[339], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 239, e1, e2, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[239], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 341, e1, e2, e6, e7, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[341], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 242, e1, e2, e6, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[242], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 242, e1, e2, e7, e6, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[242], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 138, e1, e2, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[138], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 355, e1, e2, e6, e7, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[355], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 255, e1, e2, e7, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[255], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 255, e1, e2, e6, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[255], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 148, e1, e1, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[148], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 271, e1, e2, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[271], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 160, e1, e2, e7, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[160], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 160, e1, e2, e6, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[160], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E7={R,B}
																	keys = generate_labels(mismatches, root, a, b, c, 73, e1, e2, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[73], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 358, e1, e2, e6, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[358], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 258, e1, e2, e6, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[258], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 274, e1, e2, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[274], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 163, e1, e2, e6, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[163], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 260, e1, e2, e6, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[260], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 151, e1, e2, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[151], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 165, e1, e2, e6, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[165], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 76, e1, e2, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[76], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 293, e1, e2, e6, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[293], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 181, e1, e2, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[181], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 188, e1, e2, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[188], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 91, e1, e2, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[91], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 191, e1, e2, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[191], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 94, e1, e2, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[94], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 101, e1, e2, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[101], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E6={R,A}
																	keys = generate_labels(mismatches, root, a, b, c, 39, e1, e2, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[39], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 358, e1, e2, e7, e8, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[358], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 274, e1, e2, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[274], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 258, e1, e2, e7, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[258], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 163, e1, e2, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[163], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 260, e1, e2, e7, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[260], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 165, e1, e2, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[165], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 151, e1, e2, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[151], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, b, a, c, 76, e1, e2, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[76], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 293, e1, e2, e7, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[293], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 188, e1, e2, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[188], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 181, e1, e2, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[181], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 91, e1, e2, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[91], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 191, e1, e2, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[191], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 101, e1, e2, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[101], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 94, e1, e2, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[94], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E7={R,B}
																	keys = generate_labels(mismatches, root, b, a, c, 39, e1, e2, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[39], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 295, e1, e2, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[295], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 193, e1, e2, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[193], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 193, e1, e2, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[193], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 103, e1, e2, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[103], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 183, e1, e2, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[183], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 96, e1, e2, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[96], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 96, e1, e2, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[96], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 41, e1, e2, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[41], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 218, e1, e2, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[218], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 117, e1, e2, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[117], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 117, e1, e2, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[117], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 48, e1, e2, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[48], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 119, e1, e2, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[119], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 51, e1, e2, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[51], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E2={R,A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 51, e1, e2, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[51], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E2={R,A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 19, e1, e2, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[19], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
									}
								}
							} 
							else  {
								if (found_rik)  {
									if (found_rjk)  {
										if (found_ijk)  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 468, e1, e3, e4, e8, e6, e7, e5, e10, e11, e9, ZERO_VECTOR);
																	increment_match_hash(hash[468], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 457, e1, e3, e4, e8, e6, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[457], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 457, e1, e4, e3, e8, e7, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[457], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 423, e1, e3, e4, e8, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[423], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 456, e1, e3, e4, e8, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[456], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 422, e1, e3, e4, e8, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[422], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 422, e1, e4, e3, e8, e7, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[422], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, a, b, 352, e1, e3, e4, e8, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[352], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 462, e1, e3, e4, e6, e7, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[462], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 436, e1, e3, e4, e6, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[436], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 436, e1, e4, e3, e7, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[436], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 373, e1, e3, e4, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[373], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 441, e1, e3, e4, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[441], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 385, e1, e3, e4, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[385], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 385, e1, e4, e3, e7, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[385], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
																	keys = generate_labels(mismatches, root, c, a, b, 289, e1, e3, e4, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[289], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 461, e1, e3, e4, e8, e6, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[461], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 435, e1, e3, e4, e8, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[435], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 440, e1, e3, e4, e8, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[440], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 384, e1, e3, e4, e8, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[384], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 434, e1, e3, e4, e8, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[434], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 372, e1, e3, e4, e8, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[372], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 383, e1, e3, e4, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[383], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, a, b, 288, e1, e3, e4, e8, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[288], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 446, e1, e3, e4, e6, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[446], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 397, e1, e3, e4, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[397], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 402, e1, e3, e4, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[402], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 318, e1, e3, e4, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[318], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 401, e1, e3, e4, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[401], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 317, e1, e3, e4, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[317], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 322, e1, e3, e4, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[322], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}
																	keys = generate_labels(mismatches, root, c, a, b, 215, e1, e3, e4, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[215], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 461, e1, e4, e3, e8, e7, e5, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[461], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 440, e1, e4, e3, e8, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[440], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 435, e1, e4, e3, e8, e7, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[435], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, b, a, 384, e1, e4, e3, e8, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[384], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 434, e1, e4, e3, e8, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[434], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 383, e1, e4, e3, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[383], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 372, e1, e4, e3, e8, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[372], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, b, a, 288, e1, e4, e3, e8, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[288], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 446, e1, e4, e3, e7, e5, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[446], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 402, e1, e4, e3, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[402], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 397, e1, e4, e3, e7, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[397], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, b, a, 318, e1, e4, e3, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[318], keys, mismatches);
																}
															}
														}
														else  {
                                                            if (found_ik)  {
                                                                if (found_jk)  {
                                                                    //E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
                                                                    keys = generate_labels(mismatches, root, c, b, a, 401, e1, e4, e3, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[401], keys, mismatches);
                                                                }
                                                                else  {
                                                                    //E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
                                                                    keys = generate_labels(mismatches, root, c, b, a, 322, e1, e4, e3, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[322], keys, mismatches);
                                                                }
                                                            }
                                                            else  {
                                                                if (found_jk)  {
                                                                    //E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
                                                                    keys = generate_labels(mismatches, root, c, b, a, 317, e1, e4, e3, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[317], keys, mismatches);
																}
																else  {
                                                                    //E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}
                                                                    keys = generate_labels(mismatches, root, c, b, a, 215, e1, e4, e3, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
                                                                    increment_match_hash(hash[215], keys, mismatches);
                                                                }
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 445, e1, e3, e4, e8, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[445], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 400, e1, e3, e4, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[400], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 400, e1, e4, e3, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[400], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 321, e1, e3, e4, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[321], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 396, e1, e3, e4, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[396], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 316, e1, e3, e4, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[316], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 316, e1, e4, e3, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[316], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, a, b, 214, e1, e3, e4, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[214], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 407, e1, e3, e4, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[407], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 331, e1, e3, e4, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[331], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 331, e1, e4, e3, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[331], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 230, e1, e3, e4, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[230], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 330, e1, e3, e4, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[330], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 229, e1, e3, e4, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[229], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 229, e1, e4, e3, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[229], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 130, e1, e3, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[130], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
										else  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 452, e1, e3, e4, e8, e6, e7, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[452], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 417, e1, e3, e4, e8, e6, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[417], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 417, e1, e4, e3, e8, e7, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[417], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 348, e1, e3, e4, e8, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[348], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 415, e1, e3, e4, e8, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[415], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 345, e1, e3, e4, e8, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[345], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 345, e1, e4, e3, e8, e7, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[345], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, a, b, 246, e1, e3, e4, e8, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[246], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 430, e1, e3, e4, e6, e7, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[430], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 367, e1, e3, e4, e6, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[367], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 367, e1, e4, e3, e7, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[367], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 267, e1, e3, e4, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[267], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 379, e1, e3, e4, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[379], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 283, e1, e3, e4, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[283], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 283, e1, e4, e3, e7, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[283], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E7={R,B}
																	keys = generate_labels(mismatches, root, c, a, b, 172, e1, e3, e4, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[172], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 427, e1, e3, e4, e8, e6, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[427], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 364, e1, e3, e4, e8, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[364], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 376, e1, e3, e4, e8, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[376], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 280, e1, e3, e4, e8, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[280], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 362, e1, e3, e4, e8, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[362], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 264, e1, e3, e4, e8, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[264], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 278, e1, e3, e4, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[278], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, a, b, 169, e1, e3, e4, e8, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[169], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 391, e1, e3, e4, e6, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[391], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 301, e1, e3, e4, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[301], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 311, e1, e3, e4, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[311], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 202, e1, e3, e4, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[202], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 308, e1, e3, e4, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[308], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 199, e1, e3, e4, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[199], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 209, e1, e3, e4, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[209], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E6={R,A}
																	keys = generate_labels(mismatches, root, c, a, b, 109, e1, e3, e4, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[109], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 427, e1, e4, e3, e8, e7, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[427], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 376, e1, e4, e3, e8, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[376], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 364, e1, e4, e3, e8, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[364], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, b, a, 280, e1, e4, e3, e8, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[280], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 362, e1, e4, e3, e8, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[362], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 278, e1, e4, e3, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[278], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 264, e1, e4, e3, e8, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[264], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, b, a, 169, e1, e4, e3, e8, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[169], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 391, e1, e4, e3, e7, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[391], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 311, e1, e4, e3, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[311], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 301, e1, e4, e3, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[301], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, b, a, 202, e1, e4, e3, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[202], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 308, e1, e4, e3, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[308], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 209, e1, e4, e3, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[209], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 199, e1, e4, e3, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[199], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E7={R,B}
																	keys = generate_labels(mismatches, root, c, b, a, 109, e1, e4, e3, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[109], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 389, e1, e3, e4, e8, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[389], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 306, e1, e3, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[306], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 306, e1, e4, e3, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[306], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 207, e1, e3, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[207], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 299, e1, e3, e4, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[299], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 197, e1, e3, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[197], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 197, e1, e4, e3, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[197], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E8={R,C} 
																	keys = generate_labels(mismatches, root, c, a, b, 107, e1, e3, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[107], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 326, e1, e3, e4, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[326], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 224, e1, e3, e4, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[224], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 224, e1, e4, e3, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[224], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 126, e1, e3, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[126], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 222, e1, e3, e4, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[222], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 123, e1, e3, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[123], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 123, e1, e4, e3, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[123], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E4={R,B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 55, e1, e3, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[55], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
									}
									else  {
										if (found_ijk)  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 453, e1, e3, e6, e8, e7, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[453], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 418, e1, e3, e8, e6, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[418], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 419, e1, e3, e6, e8, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[419], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 349, e1, e3, e8, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[349], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 418, e1, e3, e6, e8, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[418], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 346, e1, e3, e6, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[346], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 349, e1, e3, e6, e8, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[349], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, c, b, 247, e1, e3, e6, e8, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[247], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 431, e1, e3, e6, e7, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[431], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 368, e1, e3, e6, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[368], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 369, e1, e3, e6, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[369], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, c, b, 268, e1, e3, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[268], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 380, e1, e3, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[380], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 284, e1, e3, e6, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[284], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 285, e1, e3, e6, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[285], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
																	keys = generate_labels(mismatches, root, a, c, b, 173, e1, e3, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[173], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 428, e1, e3, e6, e8, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[428], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 365, e1, e3, e8, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[365], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 377, e1, e3, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[377], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 281, e1, e3, e8, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[281], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 365, e1, e3, e6, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[365], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 265, e1, e3, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[265], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 281, e1, e3, e6, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[281], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, c, b, 170, e1, e3, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[170], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 392, e1, e3, e6, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[392], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 302, e1, e3, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[302], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 312, e1, e3, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[312], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, c, b, 203, e1, e3, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[203], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 309, e1, e3, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[309], keys, mismatches);
																}
																else  { 
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 200, e1, e3, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[200], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 210, e1, e3, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[210], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E6={R,A}
																	keys = generate_labels(mismatches, root, a, c, b, 110, e1, e3, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[110], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 431, e1, e3, e8, e7, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[431], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 380, e1, e3, e8, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[380], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 369, e1, e3, e8, e7, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[369], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 285, e1, e3, e8, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[285], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 368, e1, e3, e8, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[368], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 284, e1, e3, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[284], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 268, e1, e3, e8, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[268], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, a, b, 173, e1, e3, e8, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[173], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 393, e1, e3, e7, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[393], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 313, e1, e3, e7, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[313], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 303, e1, e3, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[303], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, c, b, 204, e1, e3, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[204], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 313, e1, e3, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[313], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 211, e1, e3, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[211], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 204, e1, e3, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[204], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E7={R,B}
																	keys = generate_labels(mismatches, root, a, c, b, 111, e1, e3, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[111], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 392, e1, e3, e8, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[392], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 309, e1, e3, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[309], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 312, e1, e3, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[312], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 210, e1, e3, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[210], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 302, e1, e3, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[302], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 200, e1, e3, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[200], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 203, e1, e3, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[203], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, a, b, 110, e1, e3, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[110], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 327, e1, e3, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[327], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 225, e1, e3, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[225], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 226, e1, e3, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[226], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, c, b, 127, e1, e3, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[127], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 225, e1, e3, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[225], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 124, e1, e3, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[124], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 127, e1, e3, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[127], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E5={A,B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 56, e1, e3, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[56], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
										else  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 411, e1, e3, e6, e8, e7, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[411], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 339, e1, e3, e6, e8, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[339], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 341, e1, e3, e6, e8, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[341], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, c, b, 242, e1, e3, e6, e8, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[242], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 339, e1, e3, e8, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[339], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 239, e1, e3, e6, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[239], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 242, e1, e3, e8, e6, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[242], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, c, b, 138, e1, e3, e6, e8, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[138], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 358, e1, e3, e6, e7, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[358], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 258, e1, e3, e6, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[258], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 260, e1, e3, e6, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[260], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, c, b, 151, e1, e3, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[151], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 274, e1, e3, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[274], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 163, e1, e3, e6, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[163], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 165, e1, e3, e6, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[165], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E7={R,B}
																	keys = generate_labels(mismatches, root, a, c, b, 76, e1, e3, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[76], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 355, e1, e3, e6, e8, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[355], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 255, e1, e3, e8, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[255], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 271, e1, e3, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[271], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 160, e1, e3, e8, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[160], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 255, e1, e3, e6, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[255], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 148, e1, e3, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[148], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 160, e1, e3, e6, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[160], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, c, b, 73, e1, e3, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[73], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 293, e1, e3, e6, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[293], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 181, e1, e3, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[181], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 191, e1, e3, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[191], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, c, b, 94, e1, e3, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[94], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 188, e1, e3, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[188], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 91, e1, e3, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[91], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 101, e1, e3, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[101], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E6={R,A}
																	keys = generate_labels(mismatches, root, a, c, b, 39, e1, e3, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[39], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 358, e1, e3, e8, e7, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[358], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 274, e1, e3, e8, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[274], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 260, e1, e3, e8, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[260], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 165, e1, e3, e8, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[165], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 258, e1, e3, e8, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[258], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 163, e1, e3, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[163], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 151, e1, e3, e8, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[151], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, a, b, 76, e1, e3, e8, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[76], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 295, e1, e3, e7, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[295], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 193, e1, e3, e7, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[193], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 183, e1, e3, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[183], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, c, b, 96, e1, e3, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[96], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 193, e1, e3, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[193], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 103, e1, e3, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[103], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 96, e1, e3, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[96], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E7={R,B}
																	keys = generate_labels(mismatches, root, a, c, b, 41, e1, e3, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[41], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 293, e1, e3, e8, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[293], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 188, e1, e3, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[188], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 191, e1, e3, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[191], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 101, e1, e3, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[101], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 181, e1, e3, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[181], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 91, e1, e3, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[91], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 94, e1, e3, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[94], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, a, b, 39, e1, e3, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[39], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 218, e1, e3, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[218], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 117, e1, e3, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[117], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 119, e1, e3, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[119], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 51, e1, e3, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[51], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 117, e1, e3, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[117], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 48, e1, e3, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[48], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E3={R,A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 51, e1, e3, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[51], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E3={R,A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 19, e1, e3, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[19], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
									}
								}
								else  {
									if (found_rjk)  {
										if (found_ijk)  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 453, e1, e4, e7, e8, e6, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[453], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 419, e1, e4, e7, e8, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[419], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 418, e1, e4, e8, e7, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[418], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, b, a, 349, e1, e4, e8, e7, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[349], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 418, e1, e4, e7, e8, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[418], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 349, e1, e4, e7, e8, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[349], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 346, e1, e4, e7, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[346], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, b, c, a, 247, e1, e4, e7, e8, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[247], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 431, e1, e4, e7, e6, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[431], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 369, e1, e4, e7, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[369], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 368, e1, e4, e7, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[368], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, c, a, 268, e1, e4, e7, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[268], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 380, e1, e4, e7, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[380], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 285, e1, e4, e7, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[285], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 284, e1, e4, e7, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[284], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
																	keys = generate_labels(mismatches, root, b, c, a, 173, e1, e4, e7, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[173], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 431, e1, e4, e8, e6, e5, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[431], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 369, e1, e4, e8, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[369], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 380, e1, e4, e8, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[380], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, b, a, 285, e1, e4, e8, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[285], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 368, e1, e4, e8, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[368], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 268, e1, e4, e8, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[268], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 284, e1, e4, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[284], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, b, a, 173, e1, e4, e8, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[173], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 393, e1, e4, e6, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[393], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 303, e1, e4, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[303], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 313, e1, e4, e6, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[313], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, c, a, 204, e1, e4, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[204], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 313, e1, e4, e6, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[313], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 204, e1, e4, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[204], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 211, e1, e4, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[211], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E6={R,A}
																	keys = generate_labels(mismatches, root, b, c, a, 111, e1, e4, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[111], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 428, e1, e4, e7, e8, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[428], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 377, e1, e4, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[377], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 365, e1, e4, e8, e7, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[365], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, b, a, 281, e1, e4, e8, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[281], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 365, e1, e4, e7, e8, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[365], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 281, e1, e4, e7, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[281], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 265, e1, e4, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[265], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, b, c, a, 170, e1, e4, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[170], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 392, e1, e4, e7, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[392], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 312, e1, e4, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[312], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 302, e1, e4, e7, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[302], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, c, a, 203, e1, e4, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[203], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 309, e1, e4, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[309], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 210, e1, e4, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[210], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 200, e1, e4, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[200], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E7={R,B}
																	keys = generate_labels(mismatches, root, b, c, a, 110, e1, e4, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[110], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 392, e1, e4, e8, e5, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[392], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 312, e1, e4, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[312], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 309, e1, e4, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[309], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, b, a, 210, e1, e4, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[210], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 302, e1, e4, e8, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[302], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 203, e1, e4, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[203], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 200, e1, e4, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[200], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, b, a, 110, e1, e4, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[110], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 327, e1, e4, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[327], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 226, e1, e4, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[226], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 225, e1, e4, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[225], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, c, a, 127, e1, e4, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[127], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 225, e1, e4, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[225], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 127, e1, e4, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[127], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 124, e1, e4, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[124], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E5={A,B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 56, e1, e4, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[56], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
										else  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 411, e1, e4, e7, e8, e6, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[411], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 341, e1, e4, e7, e8, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[341], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 339, e1, e4, e7, e8, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[339], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, c, a, 242, e1, e4, e7, e8, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[242], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 339, e1, e4, e8, e7, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[339], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 242, e1, e4, e8, e7, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[242], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 239, e1, e4, e7, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[239], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, b, c, a, 138, e1, e4, e7, e8, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[138], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 358, e1, e4, e7, e6, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[358], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 260, e1, e4, e7, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[260], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 258, e1, e4, e7, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[258], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, c, a, 151, e1, e4, e7, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[151], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 274, e1, e4, e7, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[274], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 165, e1, e4, e7, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[165], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 163, e1, e4, e7, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[163], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E7={R,B}
																	keys = generate_labels(mismatches, root, b, c, a, 76, e1, e4, e7, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[76], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 358, e1, e4, e8, e6, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[358], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 260, e1, e4, e8, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[260], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 274, e1, e4, e8, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[274], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, b, a, 165, e1, e4, e8, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[165], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 258, e1, e4, e8, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[258], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 151, e1, e4, e8, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[151], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 163, e1, e4, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[163], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, b, a, 76, e1, e4, e8, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[76], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 295, e1, e4, e6, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[295], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 183, e1, e4, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[183], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 193, e1, e4, e6, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[193], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, c, a, 96, e1, e4, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[96], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 193, e1, e4, e6, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[193], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 96, e1, e4, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[96], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 103, e1, e4, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[103], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E6={R,A}
																	keys = generate_labels(mismatches, root, b, c, a, 41, e1, e4, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[41], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 355, e1, e4, e7, e8, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[355], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 271, e1, e4, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[271], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 255, e1, e4, e8, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[255], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, b, a, 160, e1, e4, e8, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[160], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 255, e1, e4, e7, e8, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[255], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 160, e1, e4, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[160], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 148, e1, e4, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[148], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, b, c, a, 73, e1, e4, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[73], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 293, e1, e4, e7, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[293], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 191, e1, e4, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[191], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 181, e1, e4, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[181], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, c, a, 94, e1, e4, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[94], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 188, e1, e4, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[188], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 101, e1, e4, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[101], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 91, e1, e4, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[91], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E7={R,B}
																	keys = generate_labels(mismatches, root, b, c, a, 39, e1, e4, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[39], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 293, e1, e4, e8, e11, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[293], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 191, e1, e4, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[191], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 188, e1, e4, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[188], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, b, a, 101, e1, e4, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[101], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 181, e1, e4, e8, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[181], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, b, a, 94, e1, e4, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[94], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 91, e1, e4, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[91], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, b, a, 39, e1, e4, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[39], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 218, e1, e4, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[218], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 119, e1, e4, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[119], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 117, e1, e4, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[117], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, b, a, 51, e1, e4, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[51], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 117, e1, e4, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[117], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 51, e1, e4, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[51], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E4={R,B,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 48, e1, e4, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[48], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E4={R,B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 19, e1, e4, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[19], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
									}
									else  {
										if (found_ijk)  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 412, e1, e6, e7, e8, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[412], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 342, e1, e6, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[342], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 342, e1, e7, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[342], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 243, e1, e6, e7, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[243], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 342, e1, e8, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[342], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 243, e1, e6, e8, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[243], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 243, e1, e7, e8, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[243], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 139, e1, e6, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[139], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 359, e1, e6, e7, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[359], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 261, e1, e7, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[261], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 261, e1, e6, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[261], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 152, e1, e6, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[152], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 275, e1, e6, e7, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[275], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 166, e1, e7, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[166], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 166, e1, e6, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[166], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E7={R,B}
																	keys = generate_labels(mismatches, root, a, b, c, 77, e1, e6, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[77], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 359, e1, e6, e8, e5, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[359], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 261, e1, e8, e6, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[261], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 275, e1, e6, e8, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[275], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 166, e1, e8, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[166], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 261, e1, e6, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[261], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 152, e1, e6, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[152], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 166, e1, e6, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[166], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, c, b, 77, e1, e6, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[77], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 296, e1, e6, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[296], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 184, e1, e6, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[184], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 194, e1, e6, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[194], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 97, e1, e6, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[97], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 194, e1, e6, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[194], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 97, e1, e6, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[97], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 104, e1, e6, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[104], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E6={R,A}
																	keys = generate_labels(mismatches, root, a, b, c, 42, e1, e6, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[42], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 359, e1, e7, e8, e5, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[359], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 275, e1, e7, e8, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[275], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 261, e1, e8, e7, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[261], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, b, a, 166, e1, e8, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[166], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 261, e1, e7, e8, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[261], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 166, e1, e7, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[166], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 152, e1, e7, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[152], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, b, c, a, 77, e1, e7, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[77], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 296, e1, e7, e5, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[296], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 194, e1, e7, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[194], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 184, e1, e7, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[184], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 97, e1, e7, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[97], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 194, e1, e7, e5, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[194], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 104, e1, e7, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[104], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 97, e1, e7, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[97], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E7={R,B}
																	keys = generate_labels(mismatches, root, b, a, c, 42, e1, e7, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[42], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 296, e1, e8, e5, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[296], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 194, e1, e8, e5, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[194], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	 //E1={R,A,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
																	 keys = generate_labels(mismatches, root, c, b, a, 194, e1, e8, e5, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	 increment_match_hash(hash[194], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 104, e1, e8, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[104], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 184, e1, e8, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[184], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 97, e1, e8, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[97], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 97, e1, e8, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[97], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, a, b, 42, e1, e8, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[42], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 219, e1, e5, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[219], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 120, e1, e5, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[120], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 120, e1, e5, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[120], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 52, e1, e5, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[52], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 120, e1, e5, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[120], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 52, e1, e5, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[52], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E5={A,B,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 52, e1, e5, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[52], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E5={A,B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 20, e1, e5, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[20], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
										else  {
											if (found_ri)  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 335, e1, e6, e7, e8, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[335], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 236, e1, e6, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[236], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 236, e1, e7, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[236], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 135, e1, e6, e7, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[135], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 236, e1, e8, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[236], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 135, e1, e6, e8, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[135], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 135, e1, e7, e8, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[135], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, b, c, 60, e1, e6, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[60], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 251, e1, e6, e7, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[251], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 145, e1, e7, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[145], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 145, e1, e6, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[145], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 64, e1, e6, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[64], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 156, e1, e6, e7, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[156], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 70, e1, e7, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[70], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E6={R,A}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 70, e1, e6, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[70], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E6={R,A}, E7={R,B}
																	keys = generate_labels(mismatches, root, a, b, c, 25, e1, e6, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[25], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 251, e1, e6, e8, e10, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[251], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 145, e1, e8, e6, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[145], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 156, e1, e6, e8, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[156], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E6={R,A}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 70, e1, e8, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[70], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 145, e1, e6, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[145], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E6={R,A}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 64, e1, e6, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[64], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E6={R,A}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 70, e1, e6, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[70], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E6={R,A}, E8={R,C}
																	keys = generate_labels(mismatches, root, a, c, b, 25, e1, e6, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[25], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 177, e1, e6, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[177], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E6={R,A}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 82, e1, e6, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[82], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E6={R,A}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 87, e1, e6, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[87], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E6={R,A}, E9={A,B}
																	keys = generate_labels(mismatches, root, a, b, c, 31, e1, e6, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[31], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E6={R,A}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, c, b, 87, e1, e6, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[87], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E6={R,A}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, c, b, 31, e1, e6, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[31], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E6={R,A}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 35, e1, e6, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[35], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E6={R,A}
																	keys = generate_labels(mismatches, root, a, b, c, 14, e1, e6, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[14], keys, mismatches);
																}
															}
														}
													}
												}
											}
											else  {
												if (found_rj)  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 251, e1, e7, e8, e11, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[251], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 156, e1, e7, e8, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[156], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 145, e1, e8, e7, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[145], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E7={R,B}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, b, a, 70, e1, e8, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[70], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 145, e1, e7, e8, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[145], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E7={R,B}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, c, a, 70, e1, e7, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[70], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E7={R,B}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 64, e1, e7, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[64], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E7={R,B}, E8={R,C}
																	keys = generate_labels(mismatches, root, b, c, a, 25, e1, e7, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[25], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 177, e1, e7, e9, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[177], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E7={R,B}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 87, e1, e7, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[87], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E7={R,B}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 82, e1, e7, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[82], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E7={R,B}, E9={A,B}
																	keys = generate_labels(mismatches, root, b, a, c, 31, e1, e7, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[31], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E7={R,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 87, e1, e7, e11, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[87], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E7={R,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 35, e1, e7, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[35], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E7={R,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, c, a, 31, e1, e7, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[31], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E7={R,B}
																	keys = generate_labels(mismatches, root, b, a, c, 14, e1, e7, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[14], keys, mismatches);
																}
															}
														}
													}
												}
												else  {
													if (found_rk)  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 177, e1, e8, e10, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[177], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E8={R,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 87, e1, e8, e10, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[87], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E8={R,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 87, e1, e8, e11, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[87], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E8={R,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 35, e1, e8, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[35], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E8={R,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 82, e1, e8, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[82], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E8={R,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, c, a, b, 31, e1, e8, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[31], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E8={R,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, b, a, 31, e1, e8, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[31], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E8={R,C}
																	keys = generate_labels(mismatches, root, c, a, b, 14, e1, e8, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[14], keys, mismatches);
																}
															}
														}
													}
													else  {
														if (found_ij)  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E9={A,B}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 113, e1, e9, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[113], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E9={A,B}, E10={A,C}
																	keys = generate_labels(mismatches, root, a, b, c, 45, e1, e9, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[45], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E9={A,B}, E11={B,C}
																	keys = generate_labels(mismatches, root, b, a, c, 45, e1, e9, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[45], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E9={A,B}
																	keys = generate_labels(mismatches, root, c, a, b, 16, e1, e9, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[16], keys, mismatches);
																}
															}
														}
														else  {
															if (found_ik)  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E10={A,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, c, a, b, 45, e1, e10, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[45], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}, E10={A,C}
																	keys = generate_labels(mismatches, root, b, a, c, 16, e1, e10, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[16], keys, mismatches);
																}
															}
															else  {
																if (found_jk)  {
																	//E1={R,A,B,C}, E11={B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 16, e1, e11, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[16], keys, mismatches);
																}
																else  {
																	//E1={R,A,B,C}
																	keys = generate_labels(mismatches, root, a, b, c, 11, e1, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR, ZERO_VECTOR);
																	increment_match_hash(hash[11], keys, mismatches);
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						} // End of Case 0111
					}
				}
			}
		}
	} // end of outermost for loop

    if (NORMALIZE)
        normalize_spectral(hash);

    return hash;
}

// Add inexact hypergraphlets by allowing vertex and edge label mismatches upto VLM.
void HyperKernels::add_vertex_label_mismatch_counts(map<Key,MismatchInfo> &hash, map<Key,MismatchInfo> &mismatch_hash, unsigned long hg_type, int VLM, bool option)  {
	// Update counts to include vertex label mismacthes.
    if(VLM > 0 && ((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4)))  { 
	    // For each exact hypergraphlet, generate all mismatch hypergraphlets upto vertex label distance VLM.
        for (map<Key,MismatchInfo>::iterator git = hash.begin(); git != hash.end(); git++)  {
			if (hash[git->first].matches > 0.0)
				generate_vertex_label_mismatch_hypergraphlets(vl_mismatch_neighborhood, hash, mismatch_hash, git->first, hg_type, ALPHABET_ROOT, ALPHABET, sim_vlm_matrix, VLM);
			else  {
				if (option)
					generate_vertex_label_mismatch_hypergraphlets(vl_mismatch_neighborhood, hash, mismatch_hash, git->first, hg_type, ALPHABET_ROOT, ALPHABET, sim_vlm_matrix, VLM);
			}
        }
    }
}

void HyperKernels::add_edge_label_mismatch_counts(map<Key,MismatchInfo> &hash, map<Key,MismatchInfo> &mismatch_hash, unsigned long hg_type, int ELM)  {
	// Update counts to include vertex label mismacthes.
	if(ELM > 0 && ((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4)))  {
	    // For each exact hypergraphlet, generate all mismatch hypergraphlets upto vertex label distance VLM.
        for (map<Key,MismatchInfo>::iterator git = hash.begin(); git != hash.end(); git++)  {
            generate_edge_label_mismatch_hypergraphlets(el_mismatch_neighborhood, hash, mismatch_hash, git->first, hg_type, EDGES_ALPHABET, sim_elm_matrix, ELM);
        }
    }
}

void HyperKernels::update_label_mismatch_counts(map<Key,MismatchInfo> &hash, map<Key,MismatchInfo> &mismatch_hash, unsigned long hg_type, bool option, int VLM, int ELM, bool eq)  { 
	if(((VLM+ELM) > 0) && ((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4)))  {
        // Update mismatch counts for newly created hypergraphlets.
        for (map<Key,MismatchInfo>::iterator git = hash.begin(); git != hash.end(); git++)  {
            if (option)  {
                update_mismatch_count(hash, git->first, (hash[git->first].matches + hash[git->first].mismatches), hg_type, sim_vlm_matrix, sim_elm_matrix, VLM, ELM, eq);            
                update_mismatch_count(mismatch_hash, git->first, (hash[git->first].matches + hash[git->first].mismatches), hg_type, sim_vlm_matrix, sim_elm_matrix, VLM, ELM, eq);
            }
            else  {
                update_mismatch_count(hash, git->first, hash[git->first].matches, hg_type, sim_vlm_matrix, sim_elm_matrix, VLM, ELM, eq);
                update_mismatch_count(mismatch_hash, git->first, hash[git->first].matches, hg_type, sim_vlm_matrix, sim_elm_matrix, VLM, ELM, eq);
            }
        }
        // Merge all non-zero hypergraphlets into one hashable list. 
        for (map<Key,MismatchInfo>::iterator git = mismatch_hash.begin(); git != mismatch_hash.end(); git++)  {
            insert_mismatch_counts(hash, mismatch_hash, git->first);
        }
        mismatch_hash.clear();
    }
}

// Add inexact hypergraphlets by allowing edge insertions or deletions upto EM.
void HyperKernels::add_edge_mismatch_counts(vector<map<Key,MismatchInfo> > &hash)  {
    map<Key,MismatchInfo> T;
    vector<map<Key,MismatchInfo> > mismatch_hash(HYPERGRAPHLETS_TYPES, T);
    unsigned vindex(0);
    list<pair <unsigned long, Key> > L;
    float mult_factor;

    if (EM > 0)  {
        for (unsigned hg_type=0; hg_type<HYPERGRAPHLETS_TYPES; hg_type++)  {			
			if((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4))  {
                for (map<Key,MismatchInfo>::iterator it = hash[hg_type].begin(); it != hash[hg_type].end(); it++)  { 
                    vindex = 0;
                    vector<list<pair <unsigned long, Key> > > EM_set(EM, L);
                    pair <unsigned long, Key> p (hg_type, it->first); 
                    mult_factor = retrieve_exact_matches_count(hash[hg_type], it->first);

                    // Generate edge mismacth neighborhood for this hypergraphlet.
                    update_edge_mismatch_count(EM_set, it->first, hg_type, EM, vindex, EDGES_ALPHABET);

                    list<pair <unsigned long, Key> > :: iterator list_it, search_it;
                    bool already_added(false);

                    // Add hypergraphlets within edge mismacth neighborhood of current hypergraphlet.
                    for (unsigned em = 0; em < EM; em++)  { 
                        EM_set[em].sort();
                        for (list_it = EM_set[em].begin(); list_it != EM_set[em].end(); list_it++)  {
                            already_added = false;
                            for (int previous = em-1; previous >= 0 ; previous--)  {
                                for (search_it = EM_set[previous].begin(); search_it != EM_set[previous].end(); search_it++)  {
                                    if ((list_it->first == p.first && list_it->second == p.second) || (list_it->first == search_it->first && list_it->second == search_it->second))  {
                                        already_added = true;
                                        break;
                                    }
                                }
                            }
                            if (!already_added)  {
                                vector<Key> mismatches;
                                char root, a, b, c;
								char e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11;
			                    initialize_vertices_labels(list_it->second.first, root, a, b, c);
                                initialize_edges_labels(list_it->second.second, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
                                Key k = create_permutations_subset(mismatches, root, a, b, c, list_it->first, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
                                if (k.first != list_it->second.first && k.second != list_it->second.second)  {
                                    cerr << "ERROR: Hypergraphlets keys do not match " << print_nkey(k.first) << ";" << print_ekey(k.second) << " vs " << print_nkey(list_it->second.first) << ";" << print_ekey(list_it->second.second) << endl; exit(1);
                                }
                                increment_edge_mismatch_hash(hash[list_it->first], mismatch_hash[list_it->first], list_it->second, mult_factor, mismatches);
                            }
                        }
                    }
                }
            }
        }
        for (unsigned hg_type=0; hg_type<HYPERGRAPHLETS_TYPES; hg_type++)  {
			if((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4))  {
                for (map<Key,MismatchInfo>::iterator mit = mismatch_hash[hg_type].begin(); mit != mismatch_hash[hg_type].end(); mit++)  {
					insert_mismatch_counts(hash[hg_type], mismatch_hash[hg_type], mit->first);					
                }
            }
        }
        mismatch_hash.clear();
    }
}

// Add inexact hypergraphlets by allowing 1-edge insertion and deletion.
void HyperKernels::add_1_edge_mismatch_counts(vector<map<Key,MismatchInfo> > &hash)  {
    map<Key,MismatchInfo> T;
    vector<map<Key,MismatchInfo> > mismatch_hash(HYPERGRAPHLETS_TYPES, T);
    unsigned vindex(0);
    list<pair <unsigned long, Key> > L;
    float mult_factor;

    if (EM > 0)  {
        for (unsigned hg_type=0; hg_type<HYPERGRAPHLETS_TYPES; hg_type++)  {
			if((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4))  {
                for (map<Key,MismatchInfo>::iterator it = hash[hg_type].begin(); it != hash[hg_type].end(); it++)  { 
                    vindex = 0;
                    vector<list<pair <unsigned long, Key> > > EM_set(EM, L);
                    pair <unsigned long, Key> p (hg_type, it->first); 
                    mult_factor = retrieve_exact_matches_count(hash[hg_type], it->first);

                    // Generate edge mismacth neighborhood for this graphlet.
                    update_edge_mismatch_count(EM_set, it->first, hg_type, 1, vindex, EDGES_ALPHABET);

                    list<pair <unsigned long, Key> > :: iterator list_it;

                    // Add hypergraphlets within edge mismacth neighborhood of current hypergraphlet.
                    EM_set[0].sort();
					for (list_it = EM_set[0].begin(); list_it != EM_set[0].end(); list_it++)  {
                        vector<Key> mismatches;
                        char root, a, b, c;
						char e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11;
	                    initialize_vertices_labels(list_it->second.first, root, a, b, c);
                        initialize_edges_labels(list_it->second.second, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
                        Key k = create_permutations_subset(mismatches, root, a, b, c, list_it->first, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
                        if (k.first != list_it->second.first && k.second != list_it->second.second)  {
                            cerr << "ERROR: Hypergraphlets keys do not match " << print_nkey(k.first) << ";" << print_ekey(k.second) << " vs " << print_nkey(list_it->second.first) << ";" << print_ekey(list_it->second.second) << endl; exit(1);
                        }
                        increment_edge_mismatch_hash(hash[list_it->first], mismatch_hash[list_it->first], list_it->second, mult_factor, mismatches);
                    }
                }
            }
        }
        for (unsigned hg_type=0; hg_type<HYPERGRAPHLETS_TYPES; hg_type++)  {
			if((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4))  {
                for (map<Key,MismatchInfo>::iterator mit = mismatch_hash[hg_type].begin(); mit != mismatch_hash[hg_type].end(); mit++)  {                    
					insert_mismatch_counts(hash[hg_type], mismatch_hash[hg_type], mit->first);
                }
            }
        }
        mismatch_hash.clear();
    }
}

// Add inexact hypergraphlets by allowing 2-edge insertions and deletions.
void HyperKernels::add_2_edge_mismatch_counts(vector<map<Key,MismatchInfo> > &hash)  {
    map<Key,MismatchInfo> T;
    vector<map<Key,MismatchInfo> > mismatch_hash(HYPERGRAPHLETS_TYPES, T);
    unsigned vindex(0);
    list<pair <unsigned long, Key> > L;
    float mult_factor;

    if (EM > 0)  {
        for (unsigned hg_type=0; hg_type<HYPERGRAPHLETS_TYPES; hg_type++)  {
			if((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4))  {
                for (map<Key,MismatchInfo>::iterator it = hash[hg_type].begin(); it != hash[hg_type].end(); it++)  { 
                    vindex = 0;
                    vector<list<pair <unsigned long, Key> > > EM_set(EM, L);
                    pair <unsigned long, Key> p (hg_type, it->first); 
                    mult_factor = retrieve_exact_matches_count(hash[hg_type], it->first);

                    // Generate edge mismacth neighborhood for this graphlet.
                    update_edge_mismatch_count(EM_set, it->first, hg_type, 2, vindex, EDGES_ALPHABET);

                    list<pair <unsigned long, Key> > :: iterator list_it, search_it;
                    bool already_added(false);

                    // Add hypergraphlets within edge mismacth neighborhood of current hypergraphlet.
                    for (unsigned em = 1; em < EM; em++)  { 
                        EM_set[em].sort();
                        for (list_it = EM_set[em].begin(); list_it != EM_set[em].end(); list_it++)  {
                            already_added = false;
                            for (int previous = em-1; previous >= 0 ; previous--)  {
                                for (search_it = EM_set[previous].begin(); search_it != EM_set[previous].end(); search_it++)  {
                                    if ((list_it->first == p.first && list_it->second == p.second) || (list_it->first == search_it->first && list_it->second == search_it->second))  {
                                        already_added = true;
                                        break;
                                    }
                                }
                            }
                            if (!already_added)  {
                                vector<Key> mismatches;
                                char root, a, b, c;
								char e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11;
			                    initialize_vertices_labels(list_it->second.first, root, a, b, c);
                                initialize_edges_labels(list_it->second.second, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
                                Key k = create_permutations_subset(mismatches, root, a, b, c, list_it->first, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
                                if (k.first != list_it->second.first && k.second != list_it->second.second)  {
                                    cerr << "ERROR: Hypergraphlets keys do not match " << print_nkey(k.first) << ";" << print_ekey(k.second) << " vs " << print_nkey(list_it->second.first) << ";" << print_ekey(list_it->second.second) << endl; exit(1);
                                }
                                increment_edge_mismatch_hash(hash[list_it->first], mismatch_hash[list_it->first], list_it->second, mult_factor, mismatches);
                            }
                        }
                    }
                }
            }
        }
        for (unsigned hg_type=0; hg_type<HYPERGRAPHLETS_TYPES; hg_type++)  {
			if((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4))  {
                for (map<Key,MismatchInfo>::iterator mit = mismatch_hash[hg_type].begin(); mit != mismatch_hash[hg_type].end(); mit++)  {
					insert_mismatch_counts(hash[hg_type], mismatch_hash[hg_type], mit->first);
                }
            }
        }
        mismatch_hash.clear();
    }
}

void HyperKernels::normalize_spectral(map<Key,MismatchInfo> &hash, unsigned long hg_type)  {
    float norm = sqrt(distance_hash_join(hash, hash, hg_type));
    if((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4))  {    
		for (map<Key,MismatchInfo>::iterator it = hash.begin(); it != hash.end(); it++)  {
			it->second.matches = retrieve_label_mismatch_count(hg_type, hash, it->first)/norm;
		}
	}
}

float HyperKernels::distance_hash_join(map<Key,MismatchInfo> g_hash, map<Key,MismatchInfo> h_hash, unsigned long hg_type)  {
    float sum(0);
	
    if((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3) || ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4))  {
		for (map<Key,MismatchInfo>::iterator git = g_hash.begin(); git != g_hash.end(); git++)  {
			map<Key,MismatchInfo>::iterator hit = h_hash.find(git->first);
			if (hit != h_hash.end())  {
				if (NORMALIZE)  {
					sum += git->second.matches * hit->second.matches;
				}
				else  {
					sum += retrieve_label_mismatch_count(hg_type, g_hash, git->first) * retrieve_label_mismatch_count(hg_type, h_hash, hit->first);
				}
			}
		}
	}
    return sum;
}

void HyperKernels::normalize_spectral(vector<map<Key,MismatchInfo> > &hash)  {
    float norm = sqrt(distance_hash_join(hash, hash));
    
    for (unsigned hg_type=0; hg_type<HYPERGRAPHLETS_TYPES; hg_type++)  {
        for (map<Key,MismatchInfo>::iterator it = hash[hg_type].begin(); it != hash[hg_type].end(); it++)
            it->second.matches = retrieve_edge_mismatch_count(hash[hg_type], it->first)/norm;
    }
}

float HyperKernels::distance_hash_join(vector<map<Key,MismatchInfo> > g_hash, vector<map<Key,MismatchInfo> > h_hash)  {
    float sum(0);
    
    for (unsigned hg_type=0; hg_type<HYPERGRAPHLETS_TYPES; hg_type++)  {
        if((hg_type == 0 && HYPERGRAPHLETS_1) || (hg_type == 1 && HYPERGRAPHLETS_2) || ((hg_type >= 2 && hg_type <= 10) && HYPERGRAPHLETS_3)|| ((hg_type >= 11 && hg_type <= 471) && HYPERGRAPHLETS_4))  {
            for (map<Key,MismatchInfo>::iterator git = g_hash[hg_type].begin(); git != g_hash[hg_type].end(); git++)  {
                map<Key,MismatchInfo>::iterator hit = h_hash[hg_type].find(git->first);                
                if (hit != h_hash[hg_type].end())  {
                    if (NORMALIZE)  {
                        sum += git->second.matches * hit->second.matches;
                    }
                    else  {
                        sum += retrieve_edge_mismatch_count(g_hash[hg_type], git->first) * retrieve_edge_mismatch_count(h_hash[hg_type], hit->first);
                    }
                }
            }
        }
    }
    return sum;
}
