#include "utils.h"
#include "string.h"
#include <algorithm>
#include <cmath>
#include <stdlib.h>
#include <iostream>
#include <queue>
#include <iomanip>
using namespace std;


/************************ Auxiliary functions for Hypergraph Kernel class *************************/
float compare_labels(char label1, char label2)  {
    if (label1 == label2)
        return 1.0;
    return 0.0;
}

int randint(int max)  {
    if(max == 0)  {
        cerr << "ERROR: Check function randint()" << endl;
        return -1;
    }
    return rand() % max;
}

double randdouble()  {
    return randint(101) / 100.0;
}

list<unsigned> get_incident_edges(vector<vector<unsigned> > vertex_set, unsigned vertex)  {
    list<unsigned> incident_edges;
    for (unsigned e=0; e<vertex_set.size(); e++)  {
        for (unsigned i=0; i<vertex_set[e].size() ; i++)  {
            if (vertex_set[e][i] == vertex)  {
				incident_edges.push_back(e);
				break;
            }
        }
    }
    return incident_edges;
}

unsigned long get_hypergraphlet_length(unsigned long hg_type)  {
    unsigned long hg_length;
    if (hg_type == 0)  {
        hg_length = 1;
    }
    else if (hg_type == 1)  {
        hg_length = 2;
    }
    else if (hg_type >= 2 && hg_type <= 10)  {
        hg_length = 3; 
    }
    else if (hg_type >= 11 && hg_type <= 471)  {
        hg_length = 4;
    }
    else  {
        cerr << "ERROR: Hypergraphlet type: " << hg_type << " is unsupported." << endl; exit(1);
    }
    return hg_length;
}

unsigned long get_hyperedges_number(unsigned long hg_type)  {
	unsigned long num_edges(0);
	if ((hg_type >= 1 && hg_type <= 2) || (hg_type == 11))  { // 1 edge
		num_edges = 1;
	}
	else if ((hg_type >= 3 && hg_type <= 6) || (hg_type >= 12 && hg_type <= 20))  { // 2 edges
		num_edges = 2;
	}
	else if ((hg_type >= 7 && hg_type <= 9) || (hg_type >= 21 && hg_type <= 56))  { // 3 edges
		num_edges = 3;
	}
	else if ((hg_type == 10) || (hg_type >= 57 && hg_type <= 130))  { // 4 edges
		num_edges = 4;
	}
	else if (hg_type >= 131 && hg_type <= 231)  { // 5 edges
		num_edges = 5;
	}
	else if (hg_type >= 232 && hg_type <= 332)  { // 6 edges
		num_edges = 6;
	}
	else if (hg_type >= 333 && hg_type <= 408)  { // 7 edges
		num_edges = 7;
	}
	else if (hg_type >= 409 && hg_type <= 449)  { // 8 edges
		num_edges = 8;
	}
	else if (hg_type >= 450 && hg_type <= 465)  { // 9 edges
		num_edges = 9;
	}
	else if (hg_type >= 466 && hg_type <= 470)  { // 10 edges
		num_edges = 10;
	}
	else if (hg_type == 471)  { // 11 edges
		num_edges = 11;
	}
	return num_edges;
}

void compare_two(char &a, char &b, char &a1, char &b1)  {
	if (a < b)  { // a,b
		a1 = a; b1 = b;
	} 
	else  { // b,a
		a1 = b; b1 = a;
	}
}

void compare_three(char &a, char &b, char &c, char &a1, char &b1, char &c1)  {
	if (a < b)  {
		if (b < c)  { // a,b,c
			a1 = a; b1 = b; c1 = c;
		} else if (a < c)  { // a,c,b
			a1 = a; b1 = c; c1 = b;
		} else  { //  c,a,b
			a1 = c; b1 = a; c1 = b;
		}
	} 
	else  {
		if (a < c)  { // b,a,c
			a1 = b; b1 = a; c1 = c;
		} else if (b < c)  { // b,c,a
			a1 = b; b1 = c; c1 = a;
		} else  { // c,b,a
			a1 = c; b1 = b; c1 = a;
		}
	}
}

unsigned int set_k(unsigned long hg_type, float scaling_factor)  {
    unsigned int k_mismatches = 0;
    if (hg_type < HYPERGRAPHLETS_TYPES && (scaling_factor >= 0.0 && scaling_factor <= 1.0))  {
        k_mismatches = unsigned(float(get_hypergraphlet_length(hg_type)) * scaling_factor);
    }
    else  {
        if (hg_type >= HYPERGRAPHLETS_TYPES)  {
            cerr << "ERROR: Hypergraphlet type: " << hg_type << " is unsupported." << endl; exit(1);
        }
        else  {
            cerr << "ERROR: Scaling fraction: " << scaling_factor << " is invalid." << endl; exit(1);
        }
    }
    return k_mismatches;
}

/* This function first checks if hypergraphlet permutation is already listed. If not, it inserts it into a set of allowed permutations. */
void insert_permutation(const Key &target, vector<Key> &mismatches_list)  {
    for (vector<Key>::iterator mismatch_key = mismatches_list.begin(); mismatch_key < mismatches_list.end(); mismatch_key++)  {
        if (*mismatch_key == target)
            return;
    }
    mismatches_list.push_back(target);
}

/* This function inserts a hyperedge label into a vector of hyperedge labels. However, if DISABLE_MULTIPLICITY flag is on, it first checks
 if label is already listed. */
void insert_hyperedge_label(const char &hyperedge_label, vector<char> &hyperedge_labels)  {
	#if DISABLE_MULTIPLICITY == 1
    for (vector<char>::iterator hyperedge_key = hyperedge_labels.begin(); hyperedge_key < hyperedge_labels.end(); hyperedge_key++)  {
        if (*hyperedge_key == hyperedge_label)
            return;
    }
    #endif
    hyperedge_labels.push_back(hyperedge_label);
}

/* This function checks if a target hyperedge label is already listed. */  
bool search_hyperedge_label(const char &hyperedge_label, vector<char> &hyperedge_labels)  {
    for (vector<char>::iterator hyperedge_key = hyperedge_labels.begin(); hyperedge_key < hyperedge_labels.end(); hyperedge_key++)  {
        if (*hyperedge_key == hyperedge_label)
            return true;
    }
	return false;
}

string get_nkey(Element k)  {	
	string temp(NODES_MAX_SIZE, ZERO_CHAR);
    for (unsigned i=NODES_MAX_SIZE-1; i > 0; i--)  {
        temp[i] = (k & NODES_ALPHABET_SIZE) + ZERO_CHAR; k = k >> LOG_NODES_ALPHABET_SIZE;
    }
    temp[0] = (k & NODES_ALPHABET_SIZE) + ZERO_CHAR; //root
	
    return temp;
}

string get_ekey(Element k)  {
	string temp(HYPEREDGES_MAX_SIZE, ZERO_CHAR);
    for (unsigned i=HYPEREDGES_MAX_SIZE-1; i > 0; i--)  {
        temp[i] = (k & HYPEREDGES_ALPHABET_SIZE) + ZERO_CHAR; k = k >> LOG_HYPEREDGES_ALPHABET_SIZE;
    }
    temp[0] = (k & HYPEREDGES_ALPHABET_SIZE) + ZERO_CHAR; //e1
	
    return temp;
}

string print_nkey(Element k)  {
	string temp(NODES_MAX_SIZE, ZERO_CHAR);
    for (unsigned i=NODES_MAX_SIZE-1; i > 0; i--)  {
        temp[i] = (k & NODES_ALPHABET_SIZE) + ZERO_CHAR; k = k >> LOG_NODES_ALPHABET_SIZE; //d
    }
    temp[0] = (k & NODES_ALPHABET_SIZE) + ZERO_CHAR; //root
    
    ostringstream s;
    s << temp ;
    return s.str();
}

string print_ekey(Element k)  {    
	string temp(HYPEREDGES_MAX_SIZE, ZERO_CHAR);
    for (unsigned i=HYPEREDGES_MAX_SIZE-1; i > 0; i--)  {
	    temp[i] = (k & HYPEREDGES_ALPHABET_SIZE) + ZERO_CHAR; k = k >> LOG_HYPEREDGES_ALPHABET_SIZE;
    }
    temp[0] = (k & HYPEREDGES_ALPHABET_SIZE) + ZERO_CHAR; //e1

	ostringstream s;
    s << temp ;
    return s.str();
}

void make_key(Key &k, const Element nk, const Element ek)  {
    k.first = nk;
    k.second = ek;
}

Element make_nodes_key(char root, char a, char b, char c, unsigned long hg_type)  {
    Element curr_nkey(0);
	curr_nkey = ((unsigned long) (root-ZERO_CHAR)) << LOG_NODES_ALPHABET_SIZE;
    curr_nkey = (curr_nkey+a-ZERO_CHAR) << LOG_NODES_ALPHABET_SIZE;	
    curr_nkey = (curr_nkey+b-ZERO_CHAR) << LOG_NODES_ALPHABET_SIZE;
    curr_nkey = (curr_nkey+c-ZERO_CHAR);
	
    return curr_nkey;
}

Element make_hyperedges_key(char e1, char e2, char e3, char e4, char e5, char e6, char e7, char e8, char e9, char e10, char e11, unsigned long hg_type)  {
    Element curr_ekey(0);
	curr_ekey = ((unsigned long) (e1-ZERO_CHAR)) << LOG_HYPEREDGES_ALPHABET_SIZE;
    curr_ekey = (curr_ekey+e2-ZERO_CHAR) << LOG_HYPEREDGES_ALPHABET_SIZE;
    curr_ekey = (curr_ekey+e3-ZERO_CHAR) << LOG_HYPEREDGES_ALPHABET_SIZE;
    curr_ekey = (curr_ekey+e4-ZERO_CHAR) << LOG_HYPEREDGES_ALPHABET_SIZE;
    curr_ekey = (curr_ekey+e5-ZERO_CHAR) << LOG_HYPEREDGES_ALPHABET_SIZE;
    curr_ekey = (curr_ekey+e6-ZERO_CHAR) << LOG_HYPEREDGES_ALPHABET_SIZE;
    curr_ekey = (curr_ekey+e7-ZERO_CHAR) << LOG_HYPEREDGES_ALPHABET_SIZE;
    curr_ekey = (curr_ekey+e8-ZERO_CHAR) << LOG_HYPEREDGES_ALPHABET_SIZE;
    curr_ekey = (curr_ekey+e9-ZERO_CHAR) << LOG_HYPEREDGES_ALPHABET_SIZE;
    curr_ekey = (curr_ekey+e10-ZERO_CHAR) << LOG_HYPEREDGES_ALPHABET_SIZE;
    curr_ekey = (curr_ekey+e11-ZERO_CHAR);
	
    return curr_ekey;
}

void initialize_vertices_labels(Element nkey, char &root, char &a, char &b, char &c)  {
    c = (nkey & NODES_ALPHABET_SIZE) + ZERO_CHAR;  nkey = nkey >> LOG_NODES_ALPHABET_SIZE;
    b = (nkey & NODES_ALPHABET_SIZE) + ZERO_CHAR;  nkey = nkey >> LOG_NODES_ALPHABET_SIZE;
    a = (nkey & NODES_ALPHABET_SIZE) + ZERO_CHAR;  nkey = nkey >> LOG_NODES_ALPHABET_SIZE;
    root = (nkey & NODES_ALPHABET_SIZE) + ZERO_CHAR;
}

void initialize_edges_labels(Element ekey, char &e1, char &e2, char &e3, char &e4, char &e5, char &e6, char &e7, char &e8, char &e9, char &e10, char &e11)  {
    e11 = (ekey & HYPEREDGES_ALPHABET_SIZE) + ZERO_CHAR;  ekey = ekey >> LOG_HYPEREDGES_ALPHABET_SIZE;
    e10 = (ekey & HYPEREDGES_ALPHABET_SIZE) + ZERO_CHAR;  ekey = ekey >> LOG_HYPEREDGES_ALPHABET_SIZE;
    e9 = (ekey & HYPEREDGES_ALPHABET_SIZE) + ZERO_CHAR;  ekey = ekey >> LOG_HYPEREDGES_ALPHABET_SIZE;
    e8 = (ekey & HYPEREDGES_ALPHABET_SIZE) + ZERO_CHAR;  ekey = ekey >> LOG_HYPEREDGES_ALPHABET_SIZE;
    e7 = (ekey & HYPEREDGES_ALPHABET_SIZE) + ZERO_CHAR;  ekey = ekey >> LOG_HYPEREDGES_ALPHABET_SIZE;
    e6 = (ekey & HYPEREDGES_ALPHABET_SIZE) + ZERO_CHAR;  ekey = ekey >> LOG_HYPEREDGES_ALPHABET_SIZE;
    e5 = (ekey & HYPEREDGES_ALPHABET_SIZE) + ZERO_CHAR;  ekey = ekey >> LOG_HYPEREDGES_ALPHABET_SIZE;
    e4 = (ekey & HYPEREDGES_ALPHABET_SIZE) + ZERO_CHAR;  ekey = ekey >> LOG_HYPEREDGES_ALPHABET_SIZE;
    e3 = (ekey & HYPEREDGES_ALPHABET_SIZE) + ZERO_CHAR;  ekey = ekey >> LOG_HYPEREDGES_ALPHABET_SIZE;
    e2 = (ekey & HYPEREDGES_ALPHABET_SIZE) + ZERO_CHAR;  ekey = ekey >> LOG_HYPEREDGES_ALPHABET_SIZE;
    e1 = (ekey & HYPEREDGES_ALPHABET_SIZE) + ZERO_CHAR;
}

Element get_feature_id_nodes(Element nkey, unsigned long hg_type)  {
    Element feature_id(0);
    feature_id = (((Element) hg_type) << (LOG_NODES_ALPHABET_SIZE*NODES_MAX_SIZE)) + nkey;
    return feature_id;
}

Element get_feature_id_hyperedges(Element ekey, unsigned long hg_type)  {
    Element feature_id(0);
    feature_id = (((Element) hg_type) << (LOG_HYPEREDGES_ALPHABET_SIZE*HYPEREDGES_MAX_SIZE)) + ekey;
    return feature_id;
}

Key get_feature_id(Element nkey, Element ekey, unsigned long hg_type)  {
    Element nk(0), ek(0);
    Key feature_id;
    make_key(feature_id, nk, ek);    
    feature_id.first = (((Element) hg_type) << (LOG_NODES_ALPHABET_SIZE*NODES_MAX_SIZE)) + nkey;
    feature_id.second = (((Element) hg_type) << (LOG_HYPEREDGES_ALPHABET_SIZE*HYPEREDGES_MAX_SIZE)) + ekey;
    return feature_id;
}

void increment_match_hash(map<Key,MismatchInfo> &hash, const Key &k, vector<Key> &mismatches_list)  {
    map<Key,MismatchInfo>::iterator it;
    if ((it = hash.find(k)) == hash.end())  {
        hash[k].matches = 1.0;
        hash[k].mismatches = 0.0;
        for (vector<Key>::iterator mismatch_key = mismatches_list.begin(); mismatch_key < mismatches_list.end(); mismatch_key++)  {
            hash[k].mismatchesHypergraph[*mismatch_key] = 0.0;
        }
    }
    else  {
        hash[k].matches = it->second.matches + 1.0;
    }
	mismatches_list.clear();
}

void increment_match_hash(map<Key,MismatchInfo> &hash, const vector<Key> &keys, vector<vector<Key> > &mismatches_list)  {
	for (unsigned i=0; i<keys.size(); i++)  {
    	map<Key,MismatchInfo>::iterator it;
    	if ((it = hash.find(keys[i])) == hash.end())  {
        	hash[keys[i]].matches = 1.0;
        	hash[keys[i]].mismatches = 0.0;
        	for (vector<Key>::iterator mismatch_key = mismatches_list[i].begin(); mismatch_key < mismatches_list[i].end(); mismatch_key++)  {
            	hash[keys[i]].mismatchesHypergraph[*mismatch_key] = 0.0;
        	}
    	}
    	else  {
        	hash[keys[i]].matches = it->second.matches + 1.0;
    	}
		mismatches_list[i].clear();
	}
}

float retrieve_exact_matches_count(map<Key,MismatchInfo> &hash, const Key &k)  {
    float perfect_matches(0.0);
    map<Key,MismatchInfo>::iterator it = hash.find(k);
    if (it != hash.end())  {
        perfect_matches = hash[k].matches ;
    }
    return perfect_matches;
}

float retrieve_edge_mismatch_count(map<Key,MismatchInfo> &hash, const Key &k)  {
    float counts(0.0);
    map<Key,MismatchInfo>::iterator it = hash.find(k);
    if (it != hash.end())  {
        counts = hash[k].matches + hash[k].mismatches ;
    }
    return counts;
}

float retrieve_label_mismatch_count(unsigned long hg_type, map<Key,MismatchInfo> &hash, const Key key)  {
    map<Key,MismatchInfo>::iterator it = hash.find(key);
    float counts(0.0);
    if (it != hash.end())  {
	    counts = hash[key].matches + hash[key].mismatches;
	    for (map<Key,float>::iterator mismatches = hash[key].mismatchesHypergraph.begin(); mismatches != hash[key].mismatchesHypergraph.end(); mismatches++)  {
		    counts += mismatches->second;
	    }
    }
	return counts;
}

void insert_mismatch_counts(map<Key,MismatchInfo> &hash, map<Key,MismatchInfo> &mismatch_hash, const Key &k)  {
    map<Key,MismatchInfo>::iterator it;    
    if ((it = hash.find(k)) == hash.end())  {
        hash[k].matches = mismatch_hash[k].matches;
        hash[k].mismatches = mismatch_hash[k].mismatches;
        for (map<Key,float>::iterator mismatch_key = mismatch_hash[k].mismatchesHypergraph.begin(); mismatch_key != mismatch_hash[k].mismatchesHypergraph.end(); mismatch_key++)  {
            hash[k].mismatchesHypergraph[mismatch_key->first] = mismatch_hash[k].mismatchesHypergraph[mismatch_key->first];
        }
    }
    else  {
        cerr << "Warning: While merging found a double counted hypergraphlet " << print_nkey(k.first) << ";" << print_ekey(k.second) << endl;
    }
}

void insert_mismatches_hash(map<Key,MismatchInfo> &mismatch_hash, const Key &k, vector<Key> mismatches_list)  {
    map<Key,MismatchInfo>::iterator it;
	mismatch_hash[k].matches = 0.0;
    mismatch_hash[k].mismatches = 0.0;
	for (vector<Key>::iterator mismatch_key = mismatches_list.begin(); mismatch_key < mismatches_list.end(); mismatch_key++)  {
		mismatch_hash[k].mismatchesHypergraph[*mismatch_key] = 0.0;
    }
}

// Create all vertex and edge-labeled hypergraphlet permutations for each hypergraphlet found.
Key create_permutations_subset(vector<Key> &mismatches, char root, char a, char b, char c, unsigned long hg_type, char e1, char e2, char e3, char e4, char e5, char e6, char e7, char e8, char e9, char e10, char e11)  {
	Element nk(0), ek(0), curr_nkey(0), curr_ekey(0);
    Key k, curr_key;
	mismatches.clear();

	// Make key label
	switch (hg_type)  {
		case 0:   // R (Root)
			nk = make_nodes_key(root, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
			ek = make_hyperedges_key(ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
            make_key(k, nk, ek);
			// Insert into permutations subset
			mismatches.push_back(k);
			break;
			
		case 1:   //E1={R,A}
            nk = make_nodes_key(root, a, ZERO_CHAR, ZERO_CHAR, hg_type);
		    ek = make_hyperedges_key(e1, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
            make_key(k, nk, ek);
		    // Insert into permutations subset
		    mismatches.push_back(k);
			break;
			
		case 2:   //E1={R,A1,A2}
        case 6:   //E1={R,A1,A2}, E2={A1,A2}
			if (a <= b)  {
				nk = make_nodes_key(root, a, b, ZERO_CHAR, hg_type);
				ek = make_hyperedges_key(e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, b, a, ZERO_CHAR, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
			else  {
				nk = make_nodes_key(root, b, a, ZERO_CHAR, hg_type);
				ek = make_hyperedges_key(e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, ZERO_CHAR, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

		case 4:   //E1={R,A1}, E2={R,A2}
        case 7:	  //E1={R,A1}, E2={R,A2}, E3={A1,A2}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, ZERO_CHAR, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, ZERO_CHAR, hg_type);
                curr_ekey = make_hyperedges_key(e2, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, ZERO_CHAR, hg_type);
				ek = make_hyperedges_key(e2, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, ZERO_CHAR, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e1 > e2)  {
                    nk = make_nodes_key(root, b, a, ZERO_CHAR, hg_type);
                    ek = make_hyperedges_key(e2, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, ZERO_CHAR, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, ZERO_CHAR, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, ZERO_CHAR, hg_type);
                    curr_ekey = make_hyperedges_key(e2, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 9:	  //E1={R,A1,A2}, E2={R,A1}, E3={R,A2}
        case 10:  //E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, ZERO_CHAR, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, ZERO_CHAR, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, ZERO_CHAR, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, ZERO_CHAR, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3)  {
                    nk = make_nodes_key(root, b, a, ZERO_CHAR, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, ZERO_CHAR, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, ZERO_CHAR, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, ZERO_CHAR, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

		case 3:   //E1={R,A}, E2={A,B}
        case 5:   //E1={R,A,B}, E2={R,A}
        case 8:   //E1={R,A,B}, E2={R,A}, E3={A,B}   
			nk = make_nodes_key(root, a, b, ZERO_CHAR, hg_type);
			ek = make_hyperedges_key(e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
            make_key(k, nk, ek);
			// Insert into permutations subset
			mismatches.push_back(k);
			break;

        case 15:  //E1={R,A,B}, E2={B,C}
        case 22:  //E1={R,A}, E2={R,B}, E3={B,C}
        case 23:  //E1={R,A,B}, E2={R,A}, E3={R,C}
        case 27:  //E1={R,A}, E2={A,B}, E3={B,C}
        case 28:  //E1={R,A,B}, E2={R,B}, E3={B,C}
        case 29:  //E1={R,A,B}, E2={R,C}, E3={B,C}
        case 30:  //E1={R,A}, E2={A,B,C}, E3={A,B}
        case 31:  //E1={R,A,B,C}, E2={R,A}, E3={A,B}
        case 32:  //E1={R,A,B}, E2={R,A}, E3={B,C}
        case 37:  //E1={R,A,B}, E2={R,A,C}, E3={R,B}
        case 38:  //E1={R,A,B}, E2={R,A}, E3={A,B,C}
        case 39:  //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}
        case 43:  //E1={R,A,B}, E2={A,B}, E3={A,C}
        case 46:  //E1={R,A,B}, E2={R,A,C}, E3={A,B}
        case 50:  //E1={R,A,B}, E2={A,B,C}, E3={B,C}
        case 51:  //E1={R,A,B,C}, E2={R,A,B}, E3={B,C}
        case 61:  //E1={R,A}, E2={R,B}, E3={A,B}, E4={B,C}
        case 62:  //E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,C}
        case 66:  //E1={R,A,B}, E2={R,A}, E3={R,B}, E4={B,C}
        case 67:  //E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}
        case 68:  //E1={R,A,B}, E2={R,A}, E3={R,C}, E4={B,C}
        case 69:  //E1={R,A}, E2={R,B}, E3={A,B,C}, E4={B,C}
        case 70:  //E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={B,C}
        case 71:  //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}
        case 75:  //E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}
        case 76:  //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}
        case 79:  //E1={R,A,B}, E2={R,A}, E3={A,B}, E4={A,C}
        case 83:  //E1={R,A,B}, E2={R,A}, E3={A,B}, E4={B,C}
        case 84:  //E1={R,A,B}, E2={R,A}, E3={A,C}, E4={B,C}
        case 85:  //E1={R,A,B}, E2={R,C}, E3={A,B}, E4={A,C}
        case 86:  //E1={R,A}, E2={A,B,C}, E3={A,B}, E4={B,C}
        case 87:  //E1={R,A,B,C}, E2={R,A}, E3={A,B}, E4={B,C}
        case 88:  //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B}
        case 89:  //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}
        case 90:  //E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}
        case 91:  //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}
        case 92:  //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={B,C}
        case 93:  //E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,C}
        case 94:  //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,C}
        case 95:  //E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,C}
        case 96:  //E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,C}
        case 97:  //E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,B}
        case 99:  //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,C}
        case 100: //E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={B,C}
        case 101: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={B,C}
        case 108: //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}
        case 109: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}
        case 110: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}
        case 115: //E1={R,A,B}, E2={R,A,C}, E3={A,B}, E4={B,C}
        case 116: //E1={R,A,B}, E3={A,B,C}, E3={A,B}, E4={B,C}
        case 117: //E1={R,A,B,C}, E2={R,A,B}, E3={A,B}, E4={B,C}
        case 122: //E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={A,B}
        case 123: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B}
        case 127: //E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,C}
        case 133: //E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={B,C}
        case 141: //E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B}, E5={B,C}
        case 142: //E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={A,C}
        case 143: //E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,C}, E5={B,C}
        case 144: //E1={R,A}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={B,C}
        case 145: //E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={A,B}, E5={B,C}
        case 146: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}
        case 150: //E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,C}
        case 151: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C}
        case 154: //E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={B,C}
        case 157: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,C}
        case 158: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={B,C}
        case 159: //E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={B,C}
        case 160: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={B,C}
        case 161: //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B}
        case 162: //E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}
        case 163: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}
        case 164: //E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={B,C}
        case 165: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={B,C}
        case 166: //E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={B,C}
        case 168: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}
        case 169: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}
        case 173: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}
        case 174: //E1={R,A,B}, E2={R,A}, E3={A,B}, E4={A,C}, E5={B,C}
        case 179: //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={B,C}
        case 180: //E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={A,C}
        case 181: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={A,C}
        case 185: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B}, E5={B,C}
        case 186: //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={A,C}
        case 187: //E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C}
        case 188: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={B,C}
        case 189: //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,C}, E5={B,C}
        case 190: //E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,C}, E5={B,C}
        case 191: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,C}, E5={B,C}
        case 192: //E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,B}, E5={A,C}
        case 193: //E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B}, E5={A,C}
        case 194: //E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C}
        case 195: //E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B}
        case 196: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B}
        case 197: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B}
        case 198: //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}
        case 199: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}
        case 200: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}
        case 201: //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={B,C}
        case 202: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={B,C}
        case 203: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C}
        case 204: //E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,C}
        case 208: //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C}
        case 209: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,C}
        case 210: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={B,C}
        case 215: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}
        case 223: //E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={A,B}, E5={B,C}
        case 224: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B}, E5={B,C}
        case 225: //E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,B}, E5={A,C}
        case 229: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B}
        case 233: //E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={A,B}, E6={B,C}
        case 237: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B}
        case 241: //E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={B,C}
        case 242: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,C}
        case 249: //E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={A,C}, E6={B,C}
        case 252: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={A,C}
        case 253: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={B,C}
        case 254: //E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C}
        case 255: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B}, E6={B,C}
        case 256: //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B}, E6={B,C}
        case 257: //E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}
        case 258: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={A,C}
        case 259: //E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,C}, E6={B,C}
        case 260: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C}, E6={B,C}
        case 261: //E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C}
        case 263: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}
        case 264: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}
        case 268: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C}
        case 269: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,C}, E6={B,C}
        case 273: //E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={B,C}
        case 274: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={B,C}
        case 276: //E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,C}
        case 277: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C}
        case 278: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,C}
        case 279: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={B,C}
        case 280: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={B,C}
        case 281: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={B,C}
        case 282: //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B}
        case 283: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B}
        case 284: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}
        case 285: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={B,C}
        case 288: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}
        case 291: //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={A,C}, E6={B,C}
        case 292: //E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={B,C}
        case 293: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={A,C}, E6={B,C}
        case 300: //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C}
        case 301: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={B,C}
        case 302: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C}
        case 304: //E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B}, E6={B,C}
        case 305: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C}
        case 306: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B}, E6={B,C}
        case 307: //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={A,C}
        case 308: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={A,C}
        case 309: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C}
        case 310: //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={B,C}
        case 311: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,C}, E6={B,C}
        case 312: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={B,C}
        case 313: //E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}
        case 314: //E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={A,B}
        case 315: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B}
        case 316: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B}
        case 317: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}
        case 318: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={B,C}
        case 322: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,C}
        case 331: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B}, E6={B,C}
        case 337: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B}, E7={B,C}
        case 338: //E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C}
        case 339: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B}, E7={A,C}
        case 344: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}
        case 345: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B}
        case 349: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={B,C}
        case 353: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={A,C}, E7={B,C}
        case 357: //E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C}
        case 358: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={A,C}, E7={B,C}
        case 360: //E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C}
        case 361: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}
        case 362: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C}
        case 363: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C}
        case 364: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={B,C}
        case 365: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C}
        case 366: //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C}
        case 367: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B}, E7={B,C}
        case 368: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C}
        case 369: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C}, E7={B,C}
        case 372: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}
        case 375: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={B,C}
        case 376: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,C}, E7={B,C}
        case 380: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C}
        case 381: //E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}
        case 382: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,C}
        case 383: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}
        case 384: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={B,C}
        case 385: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}
        case 390: //E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C}
        case 391: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={A,C}, E7={B,C}
        case 392: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C}
        case 397: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C}
        case 398: //E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C}
        case 399: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B}, E7={B,C}
        case 400: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C}
        case 401: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}
        case 402: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={B,C}
        case 403: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E7={A,B}
        case 416: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C}
        case 417: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B}, E8={B,C}
        case 418: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C}
        case 422: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={A,B}
        case 426: //E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C}
        case 427: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C}, E8={B,C}
        case 431: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C}
        case 432: //E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C}
        case 433: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,B}, E8={A,C}
        case 434: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C}
        case 435: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={B,C}
        case 436: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C}
        case 440: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={B,C}
        case 442: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,B,C}, E8={A,C}
        case 446: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C}
        case 448: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E7={A,B}, E8={B,C}
        case 457: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={A,B}, E9={B,C}
        case 461: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C}, E9={B,C}
        case 463: //E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,B,C}, E8={A,B}, E9={A,C}
			nk = make_nodes_key(root, a, b, c, hg_type);
			ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
            make_key(k, nk, ek);
			// Insert into permutations subset
			mismatches.push_back(k);
			break;

        case 12:  //E1={R,A1,A2}, E2={R,B}
        case 18:  //E1={R,A1,A2}, E2={A1,A2,B}
        case 19:  //E1={R,A1,A2,B}, E2={R,A1,A2}
        case 33:  //E1={R,A1,A2}, E2={R,B}, E3={A1,A2}
        case 40:  //E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B}
        case 41:  //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}
        case 47:  //E1={R,A1,A2}, E2={A1,A2,B}, E3={A1,A2}
        case 48:  //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2}
        case 52:  //E1={R,A1,A2,B}, E2={A1,A2,B}, E3={A1,A2}
        case 56:  //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B}
        case 102: //E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B}, E4={A1,A2}
        case 103: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2}
        case 111: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}
        case 124: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,A2}
        case 211: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2}
			if (a <= b)  {
				nk = make_nodes_key(root, a, b, c, hg_type);
				ek = make_hyperedges_key(e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, b, a, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
			else  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 24:  //E1={R,A1}, E2={R,A2}, E3={A1,A2,B}
        case 57:  //E1={R,A1}, E2={R,A2}, E3={R,B}, E4={A1,A2}
        case 63:  //E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={A1,A2}
        case 134: //E1={R,A1}, E2={R,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e2, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e2, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e1 > e2)  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e2, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e2, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

		case 25:  //E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}
        case 44:  //E1={R,A1,A2}, E2={A1,B}, E3={A2,B}
        case 58:  //E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}
        case 64:  //E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2}
        case 72:  //E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}
        case 77:  //E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}
        case 121: //E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={A1,A2}
        case 132: //E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2}
        case 135: //E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2}
        case 137: //E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}
        case 147: //E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}
        case 152: //E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}
        case 227: //E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={A1,A2,B}, E5={A1,A2}
        case 238: //E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2}
        case 243: //E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3)  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 73:  //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}
        case 80:  //E1={R,A1,A2}, E2={R,B}, E3={A1,B}, E4={A2,B}
        case 112: //E1={R,A1,A2}, E2={A1,A2}, E3={A1,B}, E4={A2,B}
        case 118: //E1={R,A1,A2}, E2={A1,A2,B}, E3={A1,B}, E4={A2,B}
        case 119: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,B}, E4={A2,B}
        case 138: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}
        case 148: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2}
        case 170: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}
        case 228: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={A1,A2}
        case 239: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2}
        case 247: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}
        case 265: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2}
        case 332: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={A1,A2,B}, E6={A1,A2}
        case 346: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E7={A1,A2}
        case 453: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E7={A1,A2}, E8={A1,B}, E9={A2,B}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e5, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e2, e4, e3, e5, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e3 > e4 || (e3 == e4 && e8 > e9))  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e4, e3, e5, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e5, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 175: //E1={R,A1,A2}, E2={R,B}, E3={A1,A2}, E4={A1,B}, E5={A2,B}
        case 182: //E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B}
        case 183: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,B}, E5={A2,B}
        case 217: //E1={R,A1,A2}, E2={A1,A2,B}, E3={A1,A2}, E4={A1,B}, E5={A2,B}
        case 218: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2}, E4={A1,B}, E5={A2,B}
        case 226: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e1, e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e4 > e5)  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 294: //E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B}
        case 295: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B}
        case 303: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B}
        case 327: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e5 > e6)  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 393: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e2, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e6 > e7)  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 65:  //E1={R,A1}, E2={R,A2}, E3={A1,B}, E4={A2,B}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e2, e1, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e2, e1, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e1 > e2 || (e1 == e2 && e3 > e4))  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e2, e1, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e2, e1, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

		case 140: //E1={R,A1}, E2={R,A2}, E3={A1,A2}, E4={A1,B}, E5={A2,B}
        case 155: //E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e2, e1, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e2, e1, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e1 > e2 || (e1 == e2 && e4 > e5))  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e2, e1, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e2, e1, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 250: //E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e2, e1, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e1 > e2 || (e1 == e2 && e5 > e6))  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e2, e1, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 153: //E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A2,B}
        case 156: //E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A2,B}
        case 167: //E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}
        case 262: //E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2}
        case 286: //E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}
        case 343: //E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={R,B}, E7={A1,A2}
        case 370: //E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,A2}
        case 420: //E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={R,B}, E7={A1,A2,B}, E8={A1,A2}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3 || (e2 == e3 && e4 > e5))  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 234: //E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,B}, E6={A2,B}
        case 248: //E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2}, E5={A1,B}, E6={A2,B}
        case 251: //E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2}, E5={A1,B}, E6={A2,B}
        case 270: //E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B}
        case 275: //E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3 || (e2 == e3 && e5 > e6))  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 333: //E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B}
        case 340: //E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B}
        case 354: //E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B}
        case 359: //E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3 || (e2 == e3 && e6 > e7))  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 410: //E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3 || (e2 == e3 && e7 > e8))  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 271: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,B}, E6={A2,B}
        case 287: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}
		case 371: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2}
        case 386: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}
        case 421: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={R,B}, E8={A1,A2}
        case 437: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,A2}
        case 458: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={R,B}, E8={A1,A2,B}, E9={A1,A2}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e3 > e4 || (e3 == e4 && e5 > e6))  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 341: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,B}, E7={A2,B}
        case 355: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2}, E6={A1,B}, E7={A2,B}
		case 377: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e2, e4, e3, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e3 > e4 || (e3 == e4 && e6 > e7))  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e4, e3, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 411: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B}
        case 419: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E7={A1,B}, E8={A2,B}
        case 428: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
            }
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e2, e4, e3, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e3 > e4 || (e3 == e4 && e7 > e8))  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e4, e3, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 374: //E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,B}, E7={A2,B}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e5, e4, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e5, e4, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3 || (e2 == e3 && e4 > e5) || (e2 == e3 && e4 == e5 && e6 > e7))  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e5, e4, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e5, e4, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 425: //E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2}, E7={A1,B}, E8={A2,B}
        case 438: //E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,B}, E8={A2,B}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3 || (e2 == e3 && e4 > e5) || (e2 == e3 && e4 == e5 && e7 > e8))  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 459: //E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,A2}, E8={A1,B}, E9={A2,B}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3 || (e2 == e3 && e4 > e5) || (e2 == e3 && e4 == e5 && e8 > e9))  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 439: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,B}, E8={A2,B}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e3 > e4 || (e3 == e4 && e5 > e6) || (e3 == e4 && e5 == e6 && e7 > e8))  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 460: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2}, E8={A1,B}, E9={A2,B}
		case 464: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,B}, E9={A2,B}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e3 > e4 || (e3 == e4 && e5 > e6) || (e3 == e4 && e5 == e6 && e8 > e9))  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;
        
        case 470: //E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,A2}, E9={A1,B}, E10={A2,B}
			if (a < b)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, ZERO_CHAR, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e10, e9, ZERO_CHAR, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (a > b)  {
				nk = make_nodes_key(root, b, a, c, hg_type);
				ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e10, e9, ZERO_CHAR, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, ZERO_CHAR, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e3 > e4 || (e3 == e4 && e5 > e6) || (e3 == e4 && e5 == e6 && e9 > e10))  {
                    nk = make_nodes_key(root, b, a, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e10, e9, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, ZERO_CHAR, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, b, a, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e10, e9, ZERO_CHAR, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 13:  //E1={R,A}, E2={A,B1,B2}
        case 14:  //E1={R,A,B1,B2}, E2={R,A}
        case 16:  //E1={R,A,B1,B2}, E2={B1,B2}
        case 34:  //E1={R,A}, E2={A,B1,B2}, E3={B1,B2}
        case 35:  //E1={R,A,B1,B2}, E2={R,A}, E3={B1,B2}
        case 42:  //E1={R,A,B1,B2}, E2={R,A}, E3={A,B1,B2}
        case 104: //E1={R,A,B1,B2}, E2={R,A}, E3={A,B1,B2}, E4={B1,B2}
			if (b <= c)  {
				nk = make_nodes_key(root, a, b, c, hg_type);
				ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, c, b, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
			else  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;	

		case 17:  //E1={R,A,B1}, E2={R,A,B2}
        case 36:  //E1={R,A,B1}, E2={R,A,B2}, E3={R,A}
        case 49:  //E1={R,A,B1}, E2={R,A,B2}, E3={B1,B2}
        case 54:  //E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}
        case 98:  //E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={B1,B2}
        case 105: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}
        case 106: //E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}
        case 125: //E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={B1,B2}
        case 205: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={B1,B2}
        case 206: //E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={B1,B2}
        case 212: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}
        case 319: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E6={B1,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e2, e1, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e2, e1, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e1 > e2)  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e2, e1, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e2, e1, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

		case 26:  //E1={R,A}, E2={A,B1}, E3={A,B2}
        case 45:  //E1={R,A,B1,B2}, E2={A,B1}, E3={A,B2}
        case 55:  //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}
        case 78:  //E1={R,A}, E2={A,B1}, E3={A,B2}, E4={B1,B2}
        case 107: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}
        case 126: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={B1,B2}
        case 130: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}
        case 207: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={B1,B2}
        case 213: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}
        case 214: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}
        case 230: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={B1,B2}
        case 320: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={B1,B2}
        case 321: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={B1,B2}
        case 323: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2}
        case 404: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2}, E7={B1,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3)  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

		case 81:  //E1={R,A}, E2={A,B1,B2}, E3={A,B1}, E4={A,B2}
        case 82:  //E1={R,A,B1,B2}, E2={R,A}, E3={A,B1}, E4={A,B2}
        case 120: //E1={R,A,B1,B2}, E2={A,B1,B2}, E3={A,B1}, E4={A,B2}
        case 176: //E1={R,A}, E2={A,B1,B2}, E3={A,B1}, E4={A,B2}, E5={B1,B2}
        case 177: //E1={R,A,B1,B2}, E2={R,A}, E3={A,B1}, E4={A,B2}, E5={B1,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e1, e2, e4, e3, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e3 > e4)  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e1, e2, e4, e3, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 184: //E1={R,A,B1,B2}, E2={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}
        case 296: //E1={R,A,B1,B2}, E2={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e1, e2, e3, e5, e4, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e1, e2, e3, e5, e4, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e4 > e5)  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e5, e4, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e5, e4, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 74:  //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}
        case 114: //E1={R,A,B1}, E2={R,A,B2}, E3={A,B1}, E4={A,B2}
        case 149: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={B1,B2}
        case 171: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}
        case 216: //E1={R,A,B1}, E2={R,A,B2}, E3={A,B1}, E4={A,B2}, E5={B1,B2}
        case 266: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={B1,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e2, e1, e4, e3, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e2, e1, e4, e3, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e1 > e2 || (e1 == e2 && e3 > e4))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e2, e1, e4, e3, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e2, e1, e4, e3, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 136: //E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}
        case 178: //E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1}, E5={A,B2}
        case 220: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={A,B1}, E5={A,B2}
        case 221: //E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}
		case 240: //E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={B1,B2}
        case 245: //E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}
        case 290: //E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1}, E5={A,B2}, E6={B1,B2}
        case 325: //E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2}
        case 347: //E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={B1,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e2, e1, e3, e5, e4, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e2, e1, e3, e5, e4, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e1 > e2 || (e1 == e2 && e4 > e5))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e2, e1, e3, e5, e4, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e2, e1, e3, e5, e4, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

		case 297: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}
        case 298: //E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}
        case 328: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}
        case 387: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}, E7={B1,B2}
        case 388: //E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2}
        case 454: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e1 > e2 || (e1 == e2 && e5 > e6))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 394: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}
        case 443: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e2, e1, e3, e4, e5, e7, e6, e8, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e2, e1, e3, e4, e5, e7, e6, e8, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e1 > e2 || (e1 == e2 && e6 > e7))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e2, e1, e3, e4, e5, e7, e6, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e2, e1, e3, e4, e5, e7, e6, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 131: //E1={R,A}, E2={R,B1}, E3={R,B2}, E4={A,B1}, E5={A,B2}
        case 172: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}
        case 222: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1}, E5={A,B2}
        case 267: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={B1,B2}
		case 289: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}
        case 326: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2}
        case 373: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={B1,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3 || (e2 == e3 && e4 > e5))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 235: //E1={R,A}, E2={R,B1}, E3={R,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}
        case 246: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}
        case 299: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}
        case 329: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={A,B1}, E6={A,B2}
        case 330: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}
        case 348: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={B1,B2}
        case 352: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}
        case 389: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}, E7={B1,B2}
        case 407: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2}
		case 423: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={B1,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e7, e8, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e7, e8, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3 || (e2 == e3 && e5 > e6))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 395: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1}, E7={A,B2}
        case 396: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}
        case 408: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}
        case 444: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1}, E7={A,B2}, E8={B1,B2}
        case 445: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}
        case 469: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={R,B1}, E7={R,B2}, E8={A,B1,B2}, E9={A,B1}, E10={A,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3 || (e2 == e3 && e6 > e7) || (e2 == e3 && e6 == e7 && e9 > e10))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 447: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}
        case 465: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2}
			if (b < c)  {
				nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e8, e7, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e8, e7, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3 || (e2 == e3 && e7 > e8))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e8, e7, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e8, e7, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 236: //E1={R,A,B1,B2}, E2={R,A}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e3 > e4 || (e3 == e4 && e5 > e6))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 342: //E1={R,A,B1,B2}, E2={R,A}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e5, e7, e6, e8, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e1, e2, e4, e3, e5, e7, e6, e8, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e3 > e4 || (e3 == e4 && e6 > e7))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e1, e2, e4, e3, e5, e7, e6, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e5, e7, e6, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 272: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2}
        case 356: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e2, e1, e4, e3, e6, e5, e7, e8, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e2, e1, e4, e3, e6, e5, e7, e8, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e1 > e2 || (e1 == e2 && e3 > e4) || (e1 == e2 && e3 == e4 && e5 > e6))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e2, e1, e4, e3, e6, e5, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e2, e1, e4, e3, e6, e5, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 378: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}
        case 429: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e2, e1, e4, e3, e5, e7, e6, e8, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e2, e1, e4, e3, e5, e7, e6, e8, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e1 > e2 || (e1 == e2 && e3 > e4) || (e1 == e2 && e3 == e4 && e6 > e7))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e2, e1, e4, e3, e5, e7, e6, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e2, e1, e4, e3, e5, e7, e6, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 336: //E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}
        case 409: //E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e2, e1, e3, e5, e4, e7, e6, e8, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e2, e1, e3, e5, e4, e7, e6, e8, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e1 > e2 || (e1 == e2 && e4 > e5) || (e1 == e2 && e4 == e5 && e6 > e7))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e2, e1, e3, e5, e4, e7, e6, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e2, e1, e3, e5, e4, e7, e6, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 414: //E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}
        case 451: //E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e2, e1, e3, e5, e4, e6, e8, e7, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e2, e1, e3, e5, e4, e6, e8, e7, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e1 > e2 || (e1 == e2 && e4 > e5) || (e1 == e2 && e4 == e5 && e7 > e8))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e2, e1, e3, e5, e4, e6, e8, e7, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e2, e1, e3, e5, e4, e6, e8, e7, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 413: //E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e8, e7, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e8, e7, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e1 > e2 || (e1 == e2 && e5 > e6) || (e1 == e2 && e5 == e6 && e7 > e8))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e8, e7, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e8, e7, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 379: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}
        case 430: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e5, e4, e7, e6, e8, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e5, e4, e7, e6, e8, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3 || (e2 == e3 && e4 > e5) || (e2 == e3 && e4 == e5 && e6 > e7))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e5, e4, e7, e6, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e5, e4, e7, e6, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 441: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}
        case 462: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e8, e7, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e8, e7, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3 || (e2 == e3 && e4 > e5) || (e2 == e3 && e4 == e5 && e7 > e8))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e8, e7, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e8, e7, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 415: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2}
        case 452: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e8, e7, e9, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e8, e7, e9, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3 || (e2 == e3 && e5 > e6) || (e2 == e3 && e5 == e6 && e7 > e8))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e8, e7, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e8, e7, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

		case 456: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2}
        case 468: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2}, E10={B1,B2}
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3 || (e2 == e3 && e5 > e6) || (e2 == e3 && e5 == e6 && e8 > e9))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 455: //E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={R,B1}, E7={R,B2}, E8={A,B1}, E9={A,B2}      
			if (b < c)  {
                nk = make_nodes_key(root, a, b, c, hg_type);
                ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                make_key(k, nk, ek);
                // Generate additional allowed permutations for this hypergraphlet instance.
                curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e9, e8, e10, e11, hg_type);
                make_key(curr_key, curr_nkey, curr_ekey);
			}
			else if (b > c)  {
				nk = make_nodes_key(root, a, c, b, hg_type);
				ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e9, e8, e10, e11, hg_type);
				make_key(k, nk, ek);
				// Generate additional allowed permutations for this hypergraphlet instance.
				curr_nkey = make_nodes_key(root, a, b, c, hg_type);
				curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
				make_key(curr_key, curr_nkey, curr_ekey);
			}
            else  {
                if (e2 > e3 || (e2 == e3 && e6 > e7) || (e2 == e3 && e6 == e7 && e8 > e9))  {
                    nk = make_nodes_key(root, a, c, b, hg_type);
                    ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e9, e8, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, b, c, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
                else  {
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                    // Generate additional allowed permutations for this hypergraphlet instance.
                    curr_nkey = make_nodes_key(root, a, c, b, hg_type);
                    curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e9, e8, e10, e11, hg_type);
                    make_key(curr_key, curr_nkey, curr_ekey);
                }
            }
			// Insert into permutations subset
			mismatches.push_back(k);
			// Insert into permutations subset
			insert_permutation(curr_key, mismatches);
			break;

        case 11:  //E1={R,A1,A2,A3}
        case 20:  //E1={R,A1,A2,A3}, E2={A1,A2,A3}
		case 219: //E1={R,A1,A2,A3}, E2={A1,A2,A3}, E3={A1,A2}, E4={A1,A3}, E5={A2,A3}
			if (a < b)  {
				if (b < c)  { // a,b,c
                    nk = make_nodes_key(root, a, b, c, hg_type);
					ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
					make_key(k, nk, ek);
				}
                else if (a < c)  {
                    if (b > c)  { // a,c,b
                        nk = make_nodes_key(root, a, c, b, hg_type);
                        ek = make_hyperedges_key(e1, e2, e4, e3, e5, e6, e7, e8, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // b == c
                        if (e3 > e4)  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e2, e4, e3, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
				}
                else  { //  c,a,b
                    if (a > c)  {
                        nk = make_nodes_key(root, c, a, b, hg_type);
                        ek = make_hyperedges_key(e1, e2, e4, e5, e3, e6, e7, e8, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e3 > e5)  {
                            nk = make_nodes_key(root, c, a, b, hg_type);
                            ek = make_hyperedges_key(e1, e2, e4, e5, e3, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e2, e4, e3, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
				}
			}
			else  {
				if (a < c)  { // b,a,c
                    if (a > b)  {
                        nk = make_nodes_key(root, b, a, c, hg_type);
                        ek = make_hyperedges_key(e1, e2, e3, e5, e4, e6, e7, e8, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == b
                        if (e4 > e5)  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e5, e4, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
				}
                else if (b < c)  { // b,c,a
                    if (a > c)  {
                        nk = make_nodes_key(root, b, c, a, hg_type);
                        ek = make_hyperedges_key(e1, e2, e5, e3, e4, e6, e7, e8, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e3 > e5)  {
                            nk = make_nodes_key(root, b, c, a, hg_type);
                            ek = make_hyperedges_key(e1, e2, e5, e3, e4, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e5, e4, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
				}
                else  { // c,b,a
                    if (a > b)  {
                        if (b > c)  {
                            nk = make_nodes_key(root, c, b, a, hg_type);
                            ek = make_hyperedges_key(e1, e2, e5, e4, e3, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  { // b == c
                            if (e3 > e4)  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e1, e2, e5, e4, e3, e6, e7, e8, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, b, c, a, hg_type);
                                ek = make_hyperedges_key(e1, e2, e5, e3, e4, e6, e7, e8, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                    }
                    else  { // a == b
                        if (b > c)  {
                            if (e4 > e5)  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e1, e2, e5, e4, e3, e6, e7, e8, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, c, a, b, hg_type);
                                ek = make_hyperedges_key(e1, e2, e4, e5, e3, e6, e7, e8, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                        else  { // b == c
                            if (e3 > e4)  {
                                if (e4 > e5)  {
                                    nk = make_nodes_key(root, c, b, a, hg_type);
                                    ek = make_hyperedges_key(e1, e2, e5, e4, e3, e6, e7, e8, e9, e10, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e3 > e5)  {
                                        nk = make_nodes_key(root, c, a, b, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e4, e5, e3, e6, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, c, b, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e4, e3, e5, e6, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                            else {
                                if (e3 > e5)  {
                                    nk = make_nodes_key(root, b, c, a, hg_type);
                                    ek = make_hyperedges_key(e1, e2, e5, e3, e4, e6, e7, e8, e9, e10, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e4 > e5)  {
                                        nk = make_nodes_key(root, b, a, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e3, e5, e4, e6, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, b, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                        }
                    }
				}
			}
            // Insert into permutations subset
            mismatches.push_back(k);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, b, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, c, b, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e5, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, a, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e3, e5, e4, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, c, a, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e5, e3, e4, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, a, b, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e4, e5, e3, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, b, a, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e5, e4, e3, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
			break;

		case 21:  //E1={R,A1}, E2={R,A2}, E3={R,A3}
		case 59:  //E1={R,A1}, E2={R,A2}, E3={R,A3}, E4={A1,A2,A3}
		case 334: //E1={R,A1}, E2={R,A2}, E3={R,A3}, E4={A1,A2,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3}
            if (a < b)  {
                if (b < c)  { // a,b,c
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                }
                else if (a < c)  {
                    if (b > c)  { // a,c,b
                        nk = make_nodes_key(root, a, c, b, hg_type);
                        ek = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e7, e8, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // b == c
                        if (e2 > e3 || (e2 == e3 && e5 > e6))  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { //  c,a,b
                    if (a > c)  {
                        nk = make_nodes_key(root, c, a, b, hg_type);
                        ek = make_hyperedges_key(e3, e1, e2, e4, e6, e7, e5, e8, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e1 > e3 || (e1 == e3 && e5 > e7))  {
                            nk = make_nodes_key(root, c, a, b, hg_type);
                            ek = make_hyperedges_key(e3, e1, e2, e4, e6, e7, e5, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
            }
            else  {
                if (a < c)  { // b,a,c
                    if (a > b)  {
                        nk = make_nodes_key(root, b, a, c, hg_type);
                        ek = make_hyperedges_key(e2, e1, e3, e4, e5, e7, e6, e8, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == b
                        if (e1 > e2 || (e1 == e2 && e6 > e7))  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e2, e1, e3, e4, e5, e7, e6, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else if (b < c)  { // b,c,a
                    if (a > c)  {
                        nk = make_nodes_key(root, b, c, a, hg_type);
                        ek = make_hyperedges_key(e2, e3, e1, e4, e7, e5, e6, e8, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e1 > e3 || (e1 == e3 && e5 > e7))  {
                            nk = make_nodes_key(root, b, c, a, hg_type);
                            ek = make_hyperedges_key(e2, e3, e1, e4, e7, e5, e6, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e2, e1, e3, e4, e5, e7, e6, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { // c,b,a
                    if (a > b)  {
                        if (b > c)  {
                            nk = make_nodes_key(root, c, b, a, hg_type);
                            ek = make_hyperedges_key(e3, e2, e1, e4, e7, e6, e5, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  { // b == c
                            if (e2 > e3 || (e2 == e3 && e5 > e6))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e3, e2, e1, e4, e7, e6, e5, e8, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, b, c, a, hg_type);
                                ek = make_hyperedges_key(e2, e3, e1, e4, e7, e5, e6, e8, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                    }
                    else  { // a == b
                        if (b > c)  {
                            if (e1 > e2 || (e1 == e2 && e6 > e7))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e3, e2, e1, e4, e7, e6, e5, e8, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, c, a, b, hg_type);
                                ek = make_hyperedges_key(e3, e1, e2, e4, e6, e7, e5, e8, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                        else  { // b == c
                            if (e1 > e2 || (e1 == e2 && e6 > e7))  {
                                if (e2 > e3 || (e2 == e3 && e5 > e6))  {
                                    nk = make_nodes_key(root, c, b, a, hg_type);
                                    ek = make_hyperedges_key(e3, e2, e1, e4, e7, e6, e5, e8, e9, e10, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e1 > e3 || (e1 == e3 && e5 > e7))  {
                                        nk = make_nodes_key(root, c, a, b, hg_type);
                                        ek = make_hyperedges_key(e3, e1, e2, e4, e6, e7, e5, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, c, b, hg_type);
                                        ek = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                            else {
                                if (e1 > e3 || (e1 == e3 && e5 > e7))  {
                                    nk = make_nodes_key(root, b, c, a, hg_type);
                                    ek = make_hyperedges_key(e2, e3, e1, e4, e7, e5, e6, e8, e9, e10, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e2 > e3 || (e2 == e3 && e5 > e6))  {
                                        nk = make_nodes_key(root, b, a, c, hg_type);
                                        ek = make_hyperedges_key(e2, e1, e3, e4, e5, e7, e6, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, b, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // Insert into permutations subset
            mismatches.push_back(k);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, b, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, c, b, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, a, c, hg_type);
            curr_ekey = make_hyperedges_key(e2, e1, e3, e4, e5, e7, e6, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, c, a, hg_type);
            curr_ekey = make_hyperedges_key(e2, e3, e1, e4, e7, e5, e6, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, a, b, hg_type);
            curr_ekey = make_hyperedges_key(e3, e1, e2, e4, e6, e7, e5, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, b, a, hg_type);
            curr_ekey = make_hyperedges_key(e3, e2, e1, e4, e7, e6, e5, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
			break;

        case 53:  //E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}
        case 128: //E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={A1,A2,A3}
        case 405: //E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={A1,A2,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3}
            if (a < b)  {
                if (b < c)  { // a,b,c
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                }
                else if (a < c)  {
                    if (b > c)  { // a,c,b
                        nk = make_nodes_key(root, a, c, b, hg_type);
                        ek = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e7, e8, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // b == c
                        if (e1 > e2 || (e1 == e2 && e5 > e6))  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { //  c,a,b
                    if (a > c)  {
                        nk = make_nodes_key(root, c, a, b, hg_type);
                        ek = make_hyperedges_key(e3, e1, e2, e4, e6, e7, e5, e8, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e1 > e3 || (e1 == e3 && e5 > e7))  {
                            nk = make_nodes_key(root, c, a, b, hg_type);
                            ek = make_hyperedges_key(e3, e1, e2, e4, e6, e7, e5, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
            }
            else  {
                if (a < c)  { // b,a,c
                    if (a > b)  {
                        nk = make_nodes_key(root, b, a, c, hg_type);
                        ek = make_hyperedges_key(e2, e1, e3, e4, e5, e7, e6, e8, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == b
                        if (e2 > e3 || (e2 == e3 && e6 > e7))  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e2, e1, e3, e4, e5, e7, e6, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else if (b < c)  { // b,c,a
                    if (a > c)  {
                        nk = make_nodes_key(root, b, c, a, hg_type);
                        ek = make_hyperedges_key(e2, e3, e1, e4, e7, e5, e6, e8, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e1 > e3 || (e1 == e3 && e5 > e7))  {
                            nk = make_nodes_key(root, b, c, a, hg_type);
                            ek = make_hyperedges_key(e2, e3, e1, e4, e7, e5, e6, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e2, e1, e3, e4, e5, e7, e6, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { // c,b,a
                    if (a > b)  {
                        if (b > c)  {
                            nk = make_nodes_key(root, c, b, a, hg_type);
                            ek = make_hyperedges_key(e3, e2, e1, e4, e7, e6, e5, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  { // b == c
                            if (e1 > e2 || (e1 == e2 && e5 > e6))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e3, e2, e1, e4, e7, e6, e5, e8, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, b, c, a, hg_type);
                                ek = make_hyperedges_key(e2, e3, e1, e4, e7, e5, e6, e8, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                    }
                    else  { // a == b
                        if (b > c)  {
                            if (e2 > e3 || (e2 == e3 && e6 > e7))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e3, e2, e1, e4, e7, e6, e5, e8, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, c, a, b, hg_type);
                                ek = make_hyperedges_key(e3, e1, e2, e4, e6, e7, e5, e8, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                        else  { // b == c
                            if (e2 > e3 || (e2 == e3 && e6 > e7))  {
                                if (e2 > e3 || (e2 == e3 && e5 > e6))  {
                                    nk = make_nodes_key(root, c, b, a, hg_type);
                                    ek = make_hyperedges_key(e3, e2, e1, e4, e7, e6, e5, e8, e9, e10, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e1 > e3 || (e1 == e3 && e5 > e7))  {
                                        nk = make_nodes_key(root, c, a, b, hg_type);
                                        ek = make_hyperedges_key(e3, e1, e2, e4, e6, e7, e5, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, c, b, hg_type);
                                        ek = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                            else {
                                if (e1 > e3 || (e1 == e3 && e5 > e7))  {
                                    nk = make_nodes_key(root, b, c, a, hg_type);
                                    ek = make_hyperedges_key(e2, e3, e1, e4, e7, e5, e6, e8, e9, e10, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e1 > e2 || (e1 == e2 && e5 > e6))  {
                                        nk = make_nodes_key(root, b, a, c, hg_type);
                                        ek = make_hyperedges_key(e2, e1, e3, e4, e5, e7, e6, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, b, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // Insert into permutations subset
            mismatches.push_back(k);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, b, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, c, b, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e6, e5, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, a, c, hg_type);
            curr_ekey = make_hyperedges_key(e2, e1, e3, e4, e5, e7, e6, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, c, a, hg_type);
            curr_ekey = make_hyperedges_key(e2, e3, e1, e4, e7, e5, e6, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, a, b, hg_type);
            curr_ekey = make_hyperedges_key(e3, e1, e2, e4, e6, e7, e5, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, b, a, hg_type);
            curr_ekey = make_hyperedges_key(e3, e2, e1, e4, e7, e6, e5, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            break;
            
		case 60:  //E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={R,A3}
        case 139: //E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={R,A3}, E5={A1,A2,A3}
        case 412: //E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={R,A3}, E5={A1,A2,A3}, E6={A1,A2}, E7={A1,A3}, E8={A2,A3}
            if (a < b)  {
                if (b < c)  { // a,b,c
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                }
                else if (a < c)  {
                    if (b > c)  { // a,c,b
                        nk = make_nodes_key(root, a, c, b, hg_type);
                        ek = make_hyperedges_key(e1, e2, e4, e3, e5, e7, e6, e8, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // b == c
                        if (e3 > e4 || (e3 == e4 && e6 > e7))  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e2, e4, e3, e5, e7, e6, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { //  c,a,b
                    if (a > c)  {
                        nk = make_nodes_key(root, c, a, b, hg_type);
                        ek = make_hyperedges_key(e1, e4, e2, e3, e5, e7, e8, e6, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e2 > e4 || (e2 == e4 && e6 > e8))  {
                            nk = make_nodes_key(root, c, a, b, hg_type);
                            ek = make_hyperedges_key(e1, e4, e2, e3, e5, e7, e8, e6, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e2, e4, e3, e5, e7, e6, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
            }
            else  {
                if (a < c)  { // b,a,c
                    if (a > b)  {
                        nk = make_nodes_key(root, b, a, c, hg_type);
                        ek = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e8, e7, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == b
                        if (e2 > e3 || (e2 == e3 && e7 > e8))  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e8, e7, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else if (b < c)  { // b,c,a
                    if (a > c)  {
                        nk = make_nodes_key(root, b, c, a, hg_type);
                        ek = make_hyperedges_key(e1, e3, e4, e2, e5, e8, e6, e7, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e2 > e4 || (e2 == e4 && e6 > e8))  {
                            nk = make_nodes_key(root, b, c, a, hg_type);
                            ek = make_hyperedges_key(e1, e3, e4, e2, e5, e8, e6, e7, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e8, e7, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { // c,b,a
                    if (a > b)  {
                        if (b > c)  {
                            nk = make_nodes_key(root, c, b, a, hg_type);
                            ek = make_hyperedges_key(e1, e4, e3, e2, e5, e8, e7, e6, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  { // b == c
                            if (e3 > e4 || (e3 == e4 && e6 > e7))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e3, e2, e5, e8, e7, e6, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, b, c, a, hg_type);
                                ek = make_hyperedges_key(e1, e3, e4, e2, e5, e8, e6, e7, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                    }
                    else  { // a == b
                        if (b > c)  {
                            if (e2 > e3 || (e2 == e3 && e7 > e8))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e3, e2, e5, e8, e7, e6, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, c, a, b, hg_type);
                                ek = make_hyperedges_key(e1, e4, e2, e3, e5, e7, e8, e6, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                        else  { // b == c
                            if (e2 > e3 || (e2 == e3 && e7 > e8))  {
                                if (e3 > e4 || (e3 == e4 && e6 > e7))  {
                                    nk = make_nodes_key(root, c, b, a, hg_type);
                                    ek = make_hyperedges_key(e1, e4, e3, e2, e5, e8, e7, e6, e9, e10, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e2 > e4 || (e2 == e4 && e6 > e8))  {
                                        nk = make_nodes_key(root, c, a, b, hg_type);
                                        ek = make_hyperedges_key(e1, e4, e2, e3, e5, e7, e8, e6, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, c, b, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e4, e3, e5, e7, e6, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                            else {
                                if (e2 > e4 || (e2 == e4 && e6 > e8))  {
                                    nk = make_nodes_key(root, b, c, a, hg_type);
                                    ek = make_hyperedges_key(e1, e3, e4, e2, e5, e8, e6, e7, e9, e10, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e3 > e4 || (e3 == e4 && e6 > e7))  {
                                        nk = make_nodes_key(root, b, a, c, hg_type);
                                        ek = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e8, e7, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, b, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // Insert into permutations subset
            mismatches.push_back(k);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, b, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, c, b, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e5, e7, e6, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, a, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e8, e7, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, c, a, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e4, e2, e5, e8, e6, e7, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, a, b, hg_type);
            curr_ekey = make_hyperedges_key(e1, e4, e2, e3, e5, e7, e8, e6, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, b, a, hg_type);
            curr_ekey = make_hyperedges_key(e1, e4, e3, e2, e5, e8, e7, e6, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
			break;

        case 113: //E1={R,A1,A2,A3}, E2={A1,A2}, E3={A1,A3}, E4={A2,A3}
        case 129: //E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}
        case 231: //E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={A1,A2,A3}
        case 449: //E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={A1,A2,A3}, E6={A1,A2}, E7={A1,A3}, E8={A2,A3}
            if (a < b)  {
                if (b < c)  { // a,b,c
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                }
                else if (a < c)  {
                    if (b > c)  { // a,c,b
                        nk = make_nodes_key(root, a, c, b, hg_type);
                        ek = make_hyperedges_key(e1, e2, e4, e3, e5, e7, e6, e8, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // b == c
                        if (e2 > e3 || (e2 == e3 && e6 > e7))  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e2, e4, e3, e5, e7, e6, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { //  c,a,b
                    if (a > c)  {
                        nk = make_nodes_key(root, c, a, b, hg_type);
                        ek = make_hyperedges_key(e1, e4, e2, e3, e5, e7, e8, e6, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e2 > e4 || (e2 == e4 && e6 > e8))  {
                            nk = make_nodes_key(root, c, a, b, hg_type);
                            ek = make_hyperedges_key(e1, e4, e2, e3, e5, e7, e8, e6, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e2, e4, e3, e5, e7, e6, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
            }
            else  {
                if (a < c)  { // b,a,c
                    if (a > b)  {
                        nk = make_nodes_key(root, b, a, c, hg_type);
                        ek = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e8, e7, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == b
                        if (e3 > e4 || (e3 == e4 && e7 > e8))  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e8, e7, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else if (b < c)  { // b,c,a
                    if (a > c)  {
                        nk = make_nodes_key(root, b, c, a, hg_type);
                        ek = make_hyperedges_key(e1, e3, e4, e2, e5, e8, e6, e7, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e2 > e4 || (e2 == e4 && e6 > e8))  {
                            nk = make_nodes_key(root, b, c, a, hg_type);
                            ek = make_hyperedges_key(e1, e3, e4, e2, e5, e8, e6, e7, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e8, e7, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { // c,b,a
                    if (a > b)  {
                        if (b > c)  {
                            nk = make_nodes_key(root, c, b, a, hg_type);
                            ek = make_hyperedges_key(e1, e4, e3, e2, e5, e8, e7, e6, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  { // b == c
                            if (e2 > e3 || (e2 == e3 && e6 > e7))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e3, e2, e5, e8, e7, e6, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, b, c, a, hg_type);
                                ek = make_hyperedges_key(e1, e3, e4, e2, e5, e8, e6, e7, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                    }
                    else  { // a == b
                        if (b > c)  {
                            if (e3 > e4 || (e3 == e4 && e7 > e8))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e3, e2, e5, e8, e7, e6, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, c, a, b, hg_type);
                                ek = make_hyperedges_key(e1, e4, e2, e3, e5, e7, e8, e6, e9, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                        else  { // b == c
                            if (e3 > e4 || (e3 == e4 && e7 > e8))  {
                                if (e2 > e3 || (e2 == e3 && e6 > e7))  {
                                    nk = make_nodes_key(root, c, b, a, hg_type);
                                    ek = make_hyperedges_key(e1, e4, e3, e2, e5, e8, e7, e6, e9, e10, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e2 > e4 || (e2 == e4 && e6 > e8))  {
                                        nk = make_nodes_key(root, c, a, b, hg_type);
                                        ek = make_hyperedges_key(e1, e4, e2, e3, e5, e7, e8, e6, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, c, b, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e4, e3, e5, e7, e6, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                            else {
                                if (e2 > e4 || (e2 == e4 && e6 > e8))  {
                                    nk = make_nodes_key(root, b, c, a, hg_type);
                                    ek = make_hyperedges_key(e1, e3, e4, e2, e5, e8, e6, e7, e9, e10, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e2 > e3 || (e2 == e3 && e6 > e7))  {
                                        nk = make_nodes_key(root, b, a, c, hg_type);
                                        ek = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e8, e7, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, b, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // Insert into permutations subset
            mismatches.push_back(k);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, b, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, c, b, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e5, e7, e6, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, a, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e6, e8, e7, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, c, a, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e4, e2, e5, e8, e6, e7, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, a, b, hg_type);
            curr_ekey = make_hyperedges_key(e1, e4, e2, e3, e5, e7, e8, e6, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, b, a, hg_type);
            curr_ekey = make_hyperedges_key(e1, e4, e3, e2, e5, e8, e7, e6, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            break;
            
        case 232: //E1={R,A1}, E2={R,A2}, E3={R,A3}, E4={A1,A2}, E5={A1,A3}, E6={A2,A3}
            if (a < b)  {
                if (b < c)  { // a,b,c
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                }
                else if (a < c)  {
                    if (b > c)  { // a,c,b
                        nk = make_nodes_key(root, a, c, b, hg_type);
                        ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // b == c
                        if (e2 > e3 || (e2 == e3 && e4 > e5))  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { //  c,a,b
                    if (a > c)  {
                        nk = make_nodes_key(root, c, a, b, hg_type);
                        ek = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e7, e9, e10, e8, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e1 > e3 || (e1 == e3 && e4 > e6))  {
                            nk = make_nodes_key(root, c, a, b, hg_type);
                            ek = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e7, e9, e10, e8, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
            }
            else  {
                if (a < c)  { // b,a,c
                    if (a > b)  {
                        nk = make_nodes_key(root, b, a, c, hg_type);
                        ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e10, e9, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == b
                        if (e1 > e2 || (e1 == e2 && e5 > e6))  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e10, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else if (b < c)  { // b,c,a
                    if (a > c)  {
                        nk = make_nodes_key(root, b, c, a, hg_type);
                        ek = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e7, e10, e8, e9, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e1 > e3 || (e1 == e3 && e4 > e6))  {
                            nk = make_nodes_key(root, b, c, a, hg_type);
                            ek = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e7, e10, e8, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e10, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { // c,b,a
                    if (a > b)  {
                        if (b > c)  {
                            nk = make_nodes_key(root, c, b, a, hg_type);
                            ek = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e7, e10, e9, e8, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  { // b == c
                            if (e2 > e3 || (e2 == e3 && e4 > e5))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e7, e10, e9, e8, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, b, c, a, hg_type);
                                ek = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e7, e10, e8, e9, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                    }
                    else  { // a == b
                        if (b > c)  {
                            if (e1 > e2 || (e1 == e2 && e5 > e6))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e7, e10, e9, e8, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, c, a, b, hg_type);
                                ek = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e7, e9, e10, e8, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                        else  { // b == c
                            if (e1 > e2 || (e1 == e2 && e5 > e6))  {
                                if (e2 > e3 || (e2 == e3 && e4 > e5))  {
                                    nk = make_nodes_key(root, c, b, a, hg_type);
                                    ek = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e7, e10, e9, e8, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e1 > e3 || (e1 == e3 && e4 > e6))  {
                                        nk = make_nodes_key(root, c, a, b, hg_type);
                                        ek = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e7, e9, e10, e8, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, c, b, hg_type);
                                        ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                            else {
                                if (e1 > e3 || (e1 == e3 && e4 > e6))  {
                                    nk = make_nodes_key(root, b, c, a, hg_type);
                                    ek = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e7, e10, e8, e9, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e2 > e3 || (e2 == e3 && e4 > e5))  {
                                        nk = make_nodes_key(root, b, a, c, hg_type);
                                        ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e10, e9, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, b, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // Insert into permutations subset
            mismatches.push_back(k);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, b, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, c, b, hg_type);
            curr_ekey = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, a, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e10, e9, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, c, a, hg_type);
            curr_ekey = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e7, e10, e8, e9, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, a, b, hg_type);
            curr_ekey = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e7, e9, e10, e8, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, b, a, hg_type);
            curr_ekey = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e7, e10, e9, e8, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
			break;

        case 324: //E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={A1,A2}, E5={A1,A3}, E6={A2,A3}
            if (a < b)  {
                if (b < c)  { // a,b,c
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                }
                else if (a < c)  {
                    if (b > c)  { // a,c,b
                        nk = make_nodes_key(root, a, c, b, hg_type);
                        ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // b == c
                        if (e1 > e2 || (e1 == e2 && e4 > e5))  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { //  c,a,b
                    if (a > c)  {
                        nk = make_nodes_key(root, c, a, b, hg_type);
                        ek = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e7, e9, e10, e8, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e1 > e3 || (e1 == e3 && e4 > e6))  {
                            nk = make_nodes_key(root, c, a, b, hg_type);
                            ek = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e7, e9, e10, e8, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
            }
            else  {
                if (a < c)  { // b,a,c
                    if (a > b)  {
                        nk = make_nodes_key(root, b, a, c, hg_type);
                        ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e10, e9, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == b
                        if (e2 > e3 || (e2 == e3 && e5 > e6))  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e10, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else if (b < c)  { // b,c,a
                    if (a > c)  {
                        nk = make_nodes_key(root, b, c, a, hg_type);
                        ek = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e7, e10, e8, e9, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e1 > e3 || (e1 == e3 && e4 > e6))  {
                            nk = make_nodes_key(root, b, c, a, hg_type);
                            ek = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e7, e10, e8, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e10, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { // c,b,a
                    if (a > b)  {
                        if (b > c)  {
                            nk = make_nodes_key(root, c, b, a, hg_type);
                            ek = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e7, e10, e9, e8, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  { // b == c
                            if (e1 > e2 || (e1 == e2 && e4 > e5))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e7, e10, e9, e8, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, b, c, a, hg_type);
                                ek = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e7, e10, e8, e9, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                    }
                    else  { // a == b
                        if (b > c)  {
                            if (e2 > e3 || (e2 == e3 && e5 > e6))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e7, e10, e9, e8, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, c, a, b, hg_type);
                                ek = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e7, e9, e10, e8, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                        else  { // b == c
                            if (e2 > e3 || (e2 == e3 && e5 > e6))  {
                                if (e1 > e2 || (e1 == e2 && e4 > e5))  {
                                    nk = make_nodes_key(root, c, b, a, hg_type);
                                    ek = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e7, e10, e9, e8, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e1 > e3 || (e1 == e3 && e4 > e6))  {
                                        nk = make_nodes_key(root, c, a, b, hg_type);
                                        ek = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e7, e9, e10, e8, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, c, b, hg_type);
                                        ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                            else {
                                if (e1 > e3 || (e1 == e3 && e4 > e6))  {
                                    nk = make_nodes_key(root, b, c, a, hg_type);
                                    ek = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e7, e10, e8, e9, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e1 > e2 || (e1 == e2 && e4 > e5))  {
                                        nk = make_nodes_key(root, b, a, c, hg_type);
                                        ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e10, e9, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, b, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // Insert into permutations subset
            mismatches.push_back(k);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, b, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, c, b, hg_type);
            curr_ekey = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, a, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e10, e9, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, c, a, hg_type);
            curr_ekey = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e7, e10, e8, e9, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, a, b, hg_type);
            curr_ekey = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e7, e9, e10, e8, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, b, a, hg_type);
            curr_ekey = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e7, e10, e9, e8, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            break;

        case 244: //E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}
        case 350: //E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={A1,A2,A3}
        case 466: //E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={A1,A2,A3}, E8={A1,A2}, E9={A1,A3}, E10={A2,A3}
            if (a < b)  {
                if (b < c)  { // a,b,c
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                }
                else if (a < c)  {
                    if (b > c)  { // a,c,b
                        nk = make_nodes_key(root, a, c, b, hg_type);
                        ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // b == c
                        if (e1 > e2 || (e1 == e2 && e5 > e6) || (e1 == e2 && e5 == e6 && e8 > e9))  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { //  c,a,b
                    if (a > c)  {
                        nk = make_nodes_key(root, c, a, b, hg_type);
                        ek = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e7, e9, e10, e8, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e1 > e3 || (e1 == e3 && e4 > e6) || (e1 == e3 && e4 == e6 && e8 > e10))  {
                            nk = make_nodes_key(root, c, a, b, hg_type);
                            ek = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e7, e9, e10, e8, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
            }
            else  {
                if (a < c)  { // b,a,c
                    if (a > b)  {
                        nk = make_nodes_key(root, b, a, c, hg_type);
                        ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e10, e9, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == b
                        if (e2 > e3 || (e2 == e3 && e4 > e5) || (e2 == e3 && e4 == e5 && e9 > e10))  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e10, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else if (b < c)  { // b,c,a
                    if (a > c)  {
                        nk = make_nodes_key(root, b, c, a, hg_type);
                        ek = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e7, e10, e8, e9, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e1 > e3 || (e1 == e3 && e4 > e6) || (e1 == e3 && e4 == e6 && e8 > e10))  {
                            nk = make_nodes_key(root, b, c, a, hg_type);
                            ek = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e7, e10, e8, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e10, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { // c,b,a
                    if (a > b)  {
                        if (b > c)  {
                            nk = make_nodes_key(root, c, b, a, hg_type);
                            ek = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e7, e10, e9, e8, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  { // b == c
                            if (e1 > e2 || (e1 == e2 && e5 > e6) || (e1 == e2 && e5 == e6 && e8 > e9))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e7, e10, e9, e8, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, b, c, a, hg_type);
                                ek = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e7, e10, e8, e9, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                    }
                    else  { // a == b
                        if (b > c)  {
                            if (e2 > e3 || (e2 == e3 && e4 > e5) || (e2 == e3 && e4 == e5 && e9 > e10))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e7, e10, e9, e8, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, c, a, b, hg_type);
                                ek = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e7, e9, e10, e8, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                        else  { // b == c
                            if (e2 > e3 || (e2 == e3 && e4 > e5) || (e2 == e3 && e4 == e5 && e9 > e10))  {
                                if (e1 > e2 || (e1 == e2 && e5 > e6) || (e1 == e2 && e5 == e6 && e8 > e9))  {
                                    nk = make_nodes_key(root, c, b, a, hg_type);
                                    ek = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e7, e10, e9, e8, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e1 > e3 || (e1 == e3 && e4 > e6) || (e1 == e3 && e4 == e6 && e8 > e10))  {
                                        nk = make_nodes_key(root, c, a, b, hg_type);
                                        ek = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e7, e9, e10, e8, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, c, b, hg_type);
                                        ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                            else {
                                if (e1 > e3 || (e1 == e3 && e4 > e6) || (e1 == e3 && e4 == e6 && e8 > e10))  {
                                    nk = make_nodes_key(root, b, c, a, hg_type);
                                    ek = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e7, e10, e8, e9, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e1 > e2 || (e1 == e2 && e5 > e6) || (e1 == e2 && e5 == e6 && e8 > e9))  {
                                        nk = make_nodes_key(root, b, a, c, hg_type);
                                        ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e10, e9, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, b, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // Insert into permutations subset
            mismatches.push_back(k);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, b, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, c, b, hg_type);
            curr_ekey = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e7, e9, e8, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, a, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e8, e10, e9, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, c, a, hg_type);
            curr_ekey = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e7, e10, e8, e9, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, a, b, hg_type);
            curr_ekey = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e7, e9, e10, e8, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, b, a, hg_type);
            curr_ekey = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e7, e10, e9, e8, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            break;

        case 335: //E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={R,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3}
            if (a < b)  {
                if (b < c)  { // a,b,c
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                }
                else if (a < c)  {
                    if (b > c)  { // a,c,b
                        nk = make_nodes_key(root, a, c, b, hg_type);
                        ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // b == c
                        if (e3 > e4 || (e3 == e4 && e5 > e6))  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { //  c,a,b
                    if (a > c)  {
                        nk = make_nodes_key(root, c, a, b, hg_type);
                        ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e2 > e4 || (e2 == e4 && e5 > e7))  {
                            nk = make_nodes_key(root, c, a, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
            }
            else  {
                if (a < c)  { // b,a,c
                    if (a > b)  {
                        nk = make_nodes_key(root, b, a, c, hg_type);
                        ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == b
                        if (e2 > e3 || (e2 == e3 && e6 > e7))  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else if (b < c)  { // b,c,a
                    if (a > c)  {
                        nk = make_nodes_key(root, b, c, a, hg_type);
                        ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e2 > e4 || (e2 == e4 && e5 > e7))  {
                            nk = make_nodes_key(root, b, c, a, hg_type);
                            ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { // c,b,a
                    if (a > b)  {
                        if (b > c)  {
                            nk = make_nodes_key(root, c, b, a, hg_type);
                            ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  { // b == c
                            if (e3 > e4 || (e3 == e4 && e5 > e6))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, b, c, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                    }
                    else  { // a == b
                        if (b > c)  {
                            if (e2 > e3 || (e2 == e3 && e6 > e7))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, c, a, b, hg_type);
                                ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                        else  { // b == c
                            if (e2 > e3 || (e2 == e3 && e6 > e7))  {
                                if (e3 > e4 || (e3 == e4 && e5 > e6))  {
                                    nk = make_nodes_key(root, c, b, a, hg_type);
                                    ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e2 > e4 || (e2 == e4 && e5 > e7))  {
                                        nk = make_nodes_key(root, c, a, b, hg_type);
                                        ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, c, b, hg_type);
                                        ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                            else {
                                if (e2 > e4 || (e2 == e4 && e5 > e7))  {
                                    nk = make_nodes_key(root, b, c, a, hg_type);
                                    ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e3 > e4 || (e3 == e4 && e5 > e6))  {
                                        nk = make_nodes_key(root, b, a, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, b, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // Insert into permutations subset
            mismatches.push_back(k);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, b, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, c, b, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, a, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, c, a, hg_type);
            curr_ekey = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, a, b, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, b, a, hg_type);
            curr_ekey = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
			break;

        case 351: //E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3}
            if (a < b)  {
                if (b < c)  { // a,b,c
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                }
                else if (a < c)  {
                    if (b > c)  { // a,c,b
                        nk = make_nodes_key(root, a, c, b, hg_type);
                        ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // b == c
                        if (e2 > e3 || (e2 == e3 && e6 > e7))  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { //  c,a,b
                    if (a > c)  {
                        nk = make_nodes_key(root, c, a, b, hg_type);
                        ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e2 > e4 || (e2 == e4 && e5 > e7))  {
                            nk = make_nodes_key(root, c, a, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
            }
            else  {
                if (a < c)  { // b,a,c
                    if (a > b)  {
                        nk = make_nodes_key(root, b, a, c, hg_type);
                        ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == b
                        if (e3 > e4 || (e3 == e4 && e5 > e6))  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else if (b < c)  { // b,c,a
                    if (a > c)  {
                        nk = make_nodes_key(root, b, c, a, hg_type);
                        ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e2 > e4 || (e2 == e4 && e5 > e7))  {
                            nk = make_nodes_key(root, b, c, a, hg_type);
                            ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { // c,b,a
                    if (a > b)  {
                        if (b > c)  {
                            nk = make_nodes_key(root, c, b, a, hg_type);
                            ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  { // b == c
                            if (e2 > e3 || (e2 == e3 && e6 > e7))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, b, c, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                    }
                    else  { // a == b
                        if (b > c)  {
                            if (e3 > e4 || (e3 == e4 && e5 > e6))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, c, a, b, hg_type);
                                ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                        else  { // b == c
                            if (e3 > e4 || (e3 == e4 && e5 > e6))  {
                                if (e2 > e3 || (e2 == e3 && e6 > e7))  {
                                    nk = make_nodes_key(root, c, b, a, hg_type);
                                    ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e2 > e4 || (e2 == e4 && e5 > e7))  {
                                        nk = make_nodes_key(root, c, a, b, hg_type);
                                        ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, c, b, hg_type);
                                        ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                            else {
                                if (e2 > e4 || (e2 == e4 && e5 > e7))  {
                                    nk = make_nodes_key(root, b, c, a, hg_type);
                                    ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e2 > e3 || (e2 == e3 && e6 > e7))  {
                                        nk = make_nodes_key(root, b, a, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, b, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // Insert into permutations subset
            mismatches.push_back(k);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, b, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, c, b, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, a, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, c, a, hg_type);
            curr_ekey = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, a, b, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, b, a, hg_type);
            curr_ekey = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            break;

        case 406: //E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3}
            if (a < b)  {
                if (b < c)  { // a,b,c
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                }
                else if (a < c)  {
                    if (b > c)  { // a,c,b
                        nk = make_nodes_key(root, a, c, b, hg_type);
                        ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // b == c
                        if (e2 > e3 || (e2 == e3 && e5 > e6))  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { //  c,a,b
                    if (a > c)  {
                        nk = make_nodes_key(root, c, a, b, hg_type);
                        ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e2 > e4 || (e2 == e4 && e5 > e7))  {
                            nk = make_nodes_key(root, c, a, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
            }
            else  {
                if (a < c)  { // b,a,c
                    if (a > b)  {
                        nk = make_nodes_key(root, b, a, c, hg_type);
                        ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == b
                        if (e3 > e4 || (e3 == e4 && e6 > e7))  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else if (b < c)  { // b,c,a
                    if (a > c)  {
                        nk = make_nodes_key(root, b, c, a, hg_type);
                        ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e2 > e4 || (e2 == e4 && e5 > e7))  {
                            nk = make_nodes_key(root, b, c, a, hg_type);
                            ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { // c,b,a
                    if (a > b)  {
                        if (b > c)  {
                            nk = make_nodes_key(root, c, b, a, hg_type);
                            ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  { // b == c
                            if (e2 > e3 || (e2 == e3 && e5 > e7))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, b, c, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                    }
                    else  { // a == b
                        if (b > c)  {
                            if (e3 > e4 || (e3 == e4 && e6 > e7))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, c, a, b, hg_type);
                                ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                        else  { // b == c
                            if (e3 > e4 || (e3 == e4 && e6 > e7))  {
                                if (e2 > e3 || (e2 == e3 && e5 > e6))  {
                                    nk = make_nodes_key(root, c, b, a, hg_type);
                                    ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e2 > e4 || (e2 == e4 && e5 > e7))  {
                                        nk = make_nodes_key(root, c, a, b, hg_type);
                                        ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, c, b, hg_type);
                                        ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                            else {
                                if (e2 > e4 || (e2 == e4 && e5 > e7))  {
                                    nk = make_nodes_key(root, b, c, a, hg_type);
                                    ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e2 > e3 || (e2 == e3 && e5 > e6))  {
                                        nk = make_nodes_key(root, b, a, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, b, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // Insert into permutations subset
            mismatches.push_back(k);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, b, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, c, b, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, a, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, c, a, hg_type);
            curr_ekey = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, a, b, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, b, a, hg_type);
            curr_ekey = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            break;

        case 424: //E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3}, E8={A1,A2,A3}
        case 471: //E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3}, E8={A1,A2,A3}, E9={A1,A2}, E10={A1,A3}, E11={A2,A3}
            if (a < b)  {
                if (b < c)  { // a,b,c
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                }
                else if (a < c)  {
                    if (b > c)  { // a,c,b
                        nk = make_nodes_key(root, a, c, b, hg_type);
                        ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // b == c
                        if (e2 > e3 || (e2 == e3 && e6 > e7) || (e2 == e3 && e6 == e7 && e9 > e10))  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { //  c,a,b
                    if (a > c)  {
                        nk = make_nodes_key(root, c, a, b, hg_type);
                        ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e2 > e4 || (e2 == e4 && e5 > e7) || (e2 == e4 && e5 == e7 && e9 > e11))  {
                            nk = make_nodes_key(root, c, a, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
            }
            else  {
                if (a < c)  { // b,a,c
                    if (a > b)  {
                        nk = make_nodes_key(root, b, a, c, hg_type);
                        ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == b
                        if (e3 > e4 || (e3 == e4 && e5 > e6) || (e3 == e4 && e5 == e6 && e10 > e11))  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else if (b < c)  { // b,c,a
                    if (a > c)  {
                        nk = make_nodes_key(root, b, c, a, hg_type);
                        ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e2 > e4 || (e2 == e4 && e5 > e7) || (e2 == e4 && e5 == e7 && e9 > e11))  {
                            nk = make_nodes_key(root, b, c, a, hg_type);
                            ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { // c,b,a
                    if (a > b)  {
                        if (b > c)  {
                            nk = make_nodes_key(root, c, b, a, hg_type);
                            ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  { // b == c
                            if (e2 > e3 || (e2 == e3 && e6 > e7) || (e2 == e3 && e6 == e7 && e9 > e10))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, b, c, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                    }
                    else  { // a == b
                        if (b > c)  {
                            if (e3 > e4 || (e3 == e4 && e5 > e6) || (e3 == e4 && e5 == e6 && e10 > e11))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, c, a, b, hg_type);
                                ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                        else  { // b == c
                            if (e3 > e4 || (e3 == e4 && e5 > e6) || (e3 == e4 && e5 == e6 && e10 > e11))  {
                                if (e2 > e3 || (e2 == e3 && e6 > e7) || (e2 == e3 && e6 == e7 && e9 > e10))  {
                                    nk = make_nodes_key(root, c, b, a, hg_type);
                                    ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e2 > e4 || (e2 == e4 && e5 > e7) || (e2 == e4 && e5 == e7 && e9 > e11))  {
                                        nk = make_nodes_key(root, c, a, b, hg_type);
                                        ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, c, b, hg_type);
                                        ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                            else {
                                if (e2 > e4 || (e2 == e4 && e5 > e7) || (e2 == e4 && e5 == e7 && e9 > e11))  {
                                    nk = make_nodes_key(root, b, c, a, hg_type);
                                    ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e2 > e3 || (e2 == e3 && e6 > e7) || (e2 == e3 && e6 == e7 && e9 > e10))  {
                                        nk = make_nodes_key(root, b, a, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, b, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // Insert into permutations subset
            mismatches.push_back(k);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, b, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, c, b, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e8, e10, e9, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, a, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, e10, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, c, a, hg_type);
            curr_ekey = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e8, e11, e9, e10, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, a, b, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, e9, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, b, a, hg_type);
            curr_ekey = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e8, e11, e10, e9, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            break;

        case 450: //E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={A1,A2}, E8={A1,A3}, E9={A2,A3}
            if (a < b)  {
                if (b < c)  { // a,b,c
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                }
                else if (a < c)  {
                    if (b > c)  { // a,c,b
                        nk = make_nodes_key(root, a, c, b, hg_type);
                        ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e8, e7, e9, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // b == c
                        if (e1 > e2 || (e1 == e2 && e5 > e6) || (e1 == e2 && e5 == e6 && e7 > e8))  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e8, e7, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { //  c,a,b
                    if (a > c)  {
                        nk = make_nodes_key(root, c, a, b, hg_type);
                        ek = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e8, e9, e7, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e1 > e3 || (e1 == e3 && e4 > e6) || (e1 == e3 && e4 == e6 && e7 > e9))  {
                            nk = make_nodes_key(root, c, a, b, hg_type);
                            ek = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e8, e9, e7, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e8, e7, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
            }
            else  {
                if (a < c)  { // b,a,c
                    if (a > b)  {
                        nk = make_nodes_key(root, b, a, c, hg_type);
                        ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e9, e8, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == b
                        if (e2 > e3 || (e2 == e3 && e4 > e5) || (e2 == e3 && e4 == e5 && e8 > e9))  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e9, e8, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else if (b < c)  { // b,c,a
                    if (a > c)  {
                        nk = make_nodes_key(root, b, c, a, hg_type);
                        ek = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e9, e7, e8, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e1 > e3 || (e1 == e3 && e4 > e6) || (e1 == e3 && e4 == e6 && e7 > e9))  {
                            nk = make_nodes_key(root, b, c, a, hg_type);
                            ek = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e9, e7, e8, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e9, e8, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { // c,b,a
                    if (a > b)  {
                        if (b > c)  {
                            nk = make_nodes_key(root, c, b, a, hg_type);
                            ek = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e9, e8, e7, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  { // b == c
                            if (e1 > e2 || (e1 == e2 && e5 > e6) || (e1 == e2 && e5 == e6 && e7 > e8))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e9, e8, e7, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, b, c, a, hg_type);
                                ek = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e9, e7, e8, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                    }
                    else  { // a == b
                        if (b > c)  {
                            if (e2 > e3 || (e2 == e3 && e4 > e5) || (e2 == e3 && e4 == e5 && e8 > e9))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e9, e8, e7, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, c, a, b, hg_type);
                                ek = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e8, e9, e7, e10, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                        else  { // b == c
                            if (e2 > e3 || (e2 == e3 && e4 > e5) || (e2 == e3 && e4 == e5 && e8 > e9))  {
                                //E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={A1,A2}, E8={A1,A3}, E9={A2,A3}
                                if (e1 > e2 || (e1 == e2 && e5 > e6) || (e1 == e2 && e5 == e6 && e7 > e8))  { //JLM
                                    nk = make_nodes_key(root, c, b, a, hg_type);
                                    ek = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e9, e8, e7, e10, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e1 > e3 || (e1 == e3 && e4 > e6) || (e1 == e3 && e4 == e6 && e7 > e9))  {
                                        nk = make_nodes_key(root, c, a, b, hg_type);
                                        ek = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e8, e9, e7, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, c, b, hg_type);
                                        ek = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e8, e7, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                            else {
                                if (e1 > e3 || (e1 == e3 && e4 > e6) || (e1 == e3 && e4 == e6 && e7 > e9))  {
                                    nk = make_nodes_key(root, b, c, a, hg_type);
                                    ek = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e9, e7, e8, e10, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e1 > e2 || (e1 == e2 && e5 > e6) || (e1 == e2 && e5 == e6 && e7 > e8))  {
                                        nk = make_nodes_key(root, b, a, c, hg_type);
                                        ek = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e9, e8, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, b, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // Insert into permutations subset
            mismatches.push_back(k);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, b, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, c, b, hg_type);
            curr_ekey = make_hyperedges_key(e2, e1, e3, e4, e6, e5, e8, e7, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, a, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e2, e5, e4, e6, e7, e9, e8, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, c, a, hg_type);
            curr_ekey = make_hyperedges_key(e3, e1, e2, e5, e6, e4, e9, e7, e8, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, a, b, hg_type);
            curr_ekey = make_hyperedges_key(e2, e3, e1, e6, e4, e5, e8, e9, e7, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, b, a, hg_type);
            curr_ekey = make_hyperedges_key(e3, e2, e1, e6, e5, e4, e9, e8, e7, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
			break;

        case 467: //E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3}, E8={A1,A2}, E9={A1,A3}, E10={A2,A3}
            if (a < b)  {
                if (b < c)  { // a,b,c
                    nk = make_nodes_key(root, a, b, c, hg_type);
                    ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                    make_key(k, nk, ek);
                }
                else if (a < c)  {
                    if (b > c)  { // a,c,b
                        nk = make_nodes_key(root, a, c, b, hg_type);
                        ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e9, e8, e10, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // b == c
                        if (e2 > e3 || (e2 == e3 && e6 > e7) || (e2 == e3 && e6 == e7 && e8 > e9))  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e9, e8, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { //  c,a,b
                    if (a > c)  {
                        nk = make_nodes_key(root, c, a, b, hg_type);
                        ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e9, e10, e8, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e2 > e4 || (e2 == e4 && e5 > e7) || (e2 == e4 && e5 == e7 && e8 > e10))  {
                            nk = make_nodes_key(root, c, a, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e9, e10, e8, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, c, b, hg_type);
                            ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e9, e8, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
            }
            else  {
                if (a < c)  { // b,a,c
                    if (a > b)  {
                        nk = make_nodes_key(root, b, a, c, hg_type);
                        ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e10, e9, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == b
                        if (e3 > e4 || (e3 == e4 && e5 > e6) || (e3 == e4 && e5 == e6 && e9 > e10))  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e10, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, a, b, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else if (b < c)  { // b,c,a
                    if (a > c)  {
                        nk = make_nodes_key(root, b, c, a, hg_type);
                        ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e10, e8, e9, e11, hg_type);
                        make_key(k, nk, ek);
                    }
                    else  { // a == c
                        if (e2 > e4 || (e2 == e4 && e5 > e7) || (e2 == e4 && e5 == e7 && e8 > e10))  {
                            nk = make_nodes_key(root, b, c, a, hg_type);
                            ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e10, e8, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  {
                            nk = make_nodes_key(root, b, a, c, hg_type);
                            ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e10, e9, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                    }
                }
                else  { // c,b,a
                    if (a > b)  {
                        if (b > c)  {
                            nk = make_nodes_key(root, c, b, a, hg_type);
                            ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e10, e9, e8, e11, hg_type);
                            make_key(k, nk, ek);
                        }
                        else  { // b == c
                            if (e2 > e3 || (e2 == e3 && e6 > e7) || (e2 == e3 && e6 == e7 && e8 > e9))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e10, e9, e8, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, b, c, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e10, e8, e9, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                    }
                    else  { // a == b
                        if (b > c)  {
                            if (e3 > e4 || (e3 == e4 && e5 > e6) || (e3 == e4 && e5 == e6 && e9 > e10))  {
                                nk = make_nodes_key(root, c, b, a, hg_type);
                                ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e10, e9, e8, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                            else  {
                                nk = make_nodes_key(root, c, a, b, hg_type);
                                ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e9, e10, e8, e11, hg_type);
                                make_key(k, nk, ek);
                            }
                        }
                        else  { // b == c
                            if (e3 > e4 || (e3 == e4 && e5 > e6) || (e3 == e4 && e5 == e6 && e9 > e10))  {
                                if (e2 > e3 || (e2 == e3 && e6 > e7) || (e2 == e3 && e6 == e7 && e8 > e9))  {
                                    nk = make_nodes_key(root, c, b, a, hg_type);
                                    ek = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e10, e9, e8, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e2 > e4 || (e2 == e4 && e5 > e7) || (e2 == e4 && e5 == e7 && e8 > e10))  {
                                        nk = make_nodes_key(root, c, a, b, hg_type);
                                        ek = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e9, e10, e8, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, c, b, hg_type);
                                        ek = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e9, e8, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                            else {
                                if (e2 > e4 || (e2 == e4 && e5 > e7) || (e2 == e4 && e5 == e7 && e8 > e10))  {
                                    nk = make_nodes_key(root, b, c, a, hg_type);
                                    ek = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e10, e8, e9, e11, hg_type);
                                    make_key(k, nk, ek);
                                }
                                else  {
                                    if (e2 > e3 || (e2 == e3 && e6 > e7) || (e2 == e3 && e6 == e7 && e8 > e9))  {
                                        nk = make_nodes_key(root, b, a, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e10, e9, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                    else  {
                                        nk = make_nodes_key(root, a, b, c, hg_type);
                                        ek = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
                                        make_key(k, nk, ek);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // Insert into permutations subset
            mismatches.push_back(k);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, b, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, a, c, b, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e2, e4, e5, e7, e6, e9, e8, e10, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, a, c, hg_type);
            curr_ekey = make_hyperedges_key(e1, e2, e4, e3, e6, e5, e7, e8, e10, e9, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, b, c, a, hg_type);
            curr_ekey = make_hyperedges_key(e1, e4, e2, e3, e6, e7, e5, e10, e8, e9, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, a, b, hg_type);
            curr_ekey = make_hyperedges_key(e1, e3, e4, e2, e7, e5, e6, e9, e10, e8, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            // Generate additional allowed permutations for this hypergraphlet instance.
            curr_nkey = make_nodes_key(root, c, b, a, hg_type);
            curr_ekey = make_hyperedges_key(e1, e4, e3, e2, e7, e6, e5, e10, e9, e8, e11, hg_type);
            make_key(curr_key, curr_nkey, curr_ekey);
            // Insert into permutations subset
            insert_permutation(curr_key, mismatches);
            break;
	} //End of switch

	return k;
}

vector<Key> generate_labels(vector<vector<Key> > &mismatches, char root, char a, char b, char c, unsigned long hg_type, vector<char> e1s, vector<char> e2s, vector<char> e3s, vector<char> e4s, vector<char> e5s, vector<char> e6s, vector<char> e7s, vector<char> e8s, vector<char> e9s, vector<char> e10s, vector<char> e11s)  {
    Key key;
	vector<Key> keys, mismatch_list;
	
	if (hg_type == 0)  {
		key = create_permutations_subset(mismatch_list, root, a, b, c, hg_type, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
		keys.push_back(key);
		mismatches.push_back(mismatch_list);
	}
	else if ((hg_type >= 1 && hg_type <= 2) || (hg_type == 11))  { // 1 hyperedge
		for (unsigned i1=0; i1 < e1s.size(); i1++)  {
			key = create_permutations_subset(mismatch_list, root, a, b, c, hg_type, e1s[i1], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			keys.push_back(key);
			mismatches.push_back(mismatch_list);
		}
	}
	else if ((hg_type >= 3 && hg_type <= 6) || (hg_type >= 12 && hg_type <= 20))  { // 2 hyperedges
		for (unsigned i1=0; i1 < e1s.size(); i1++)  {
			for (unsigned i2=0; i2 < e2s.size(); i2++)  {
				key = create_permutations_subset(mismatch_list, root, a, b, c, hg_type, e1s[i1], e2s[i2], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				keys.push_back(key);
				mismatches.push_back(mismatch_list);
			}	
		}			
	}
	else if ((hg_type >= 7 && hg_type <= 9) || (hg_type >= 21 && hg_type <= 56))  { // 3 hyperedges
		for (unsigned i1=0; i1 < e1s.size(); i1++)  {
			for (unsigned i2=0; i2 < e2s.size(); i2++)  {
				for (unsigned i3=0; i3 < e3s.size(); i3++)  {
					key = create_permutations_subset(mismatch_list, root, a, b, c, hg_type, e1s[i1], e2s[i2], e3s[i3], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
					keys.push_back(key);
					mismatches.push_back(mismatch_list);
				}
			}	
		}
	}
	else if ((hg_type == 10) || (hg_type >= 57 && hg_type <= 130))  { // 4 hyperedges
		for (unsigned i1=0; i1 < e1s.size(); i1++)  {
			for (unsigned i2=0; i2 < e2s.size(); i2++)  {
				for (unsigned i3=0; i3 < e3s.size(); i3++)  {
					for (unsigned i4=0; i4 < e4s.size(); i4++)  {
						key = create_permutations_subset(mismatch_list, root, a, b, c, hg_type, e1s[i1], e2s[i2], e3s[i3], e4s[i4], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
						keys.push_back(key);
						mismatches.push_back(mismatch_list);
					}
				}
			}	
		}
	}
	else if (hg_type >= 131 && hg_type <= 231)  { // 5 hyperedges
		for (unsigned i1=0; i1 < e1s.size(); i1++)  {
			for (unsigned i2=0; i2 < e2s.size(); i2++)  {
				for (unsigned i3=0; i3 < e3s.size(); i3++)  {
					for (unsigned i4=0; i4 < e4s.size(); i4++)  {
						for (unsigned i5=0; i5 < e5s.size(); i5++)  {
							key = create_permutations_subset(mismatch_list, root, a, b, c, hg_type, e1s[i1], e2s[i2], e3s[i3], e4s[i4], e5s[i5], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
							keys.push_back(key);
							mismatches.push_back(mismatch_list);
						}
					}
				}
			}	
		}
	}
	else if (hg_type >= 232 && hg_type <= 332)  { // 6 hyperedges
		for (unsigned i1=0; i1 < e1s.size(); i1++)  {
			for (unsigned i2=0; i2 < e2s.size(); i2++)  {
				for (unsigned i3=0; i3 < e3s.size(); i3++)  {
					for (unsigned i4=0; i4 < e4s.size(); i4++)  {
						for (unsigned i5=0; i5 < e5s.size(); i5++)  {
							for (unsigned i6=0; i6 < e6s.size(); i6++)  {
								key = create_permutations_subset(mismatch_list, root, a, b, c, hg_type, e1s[i1], e2s[i2], e3s[i3], e4s[i4], e5s[i5], e6s[i6], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
								keys.push_back(key);
								mismatches.push_back(mismatch_list);
							}
						}
					}
				}
			}	
		}
	}
	else if (hg_type >= 333 && hg_type <= 408)  { // 7 hyperedges
		for (unsigned i1=0; i1 < e1s.size(); i1++)  {
			for (unsigned i2=0; i2 < e2s.size(); i2++)  {
				for (unsigned i3=0; i3 < e3s.size(); i3++)  {
					for (unsigned i4=0; i4 < e4s.size(); i4++)  {
						for (unsigned i5=0; i5 < e5s.size(); i5++)  {
							for (unsigned i6=0; i6 < e6s.size(); i6++)  {
								for (unsigned i7=0; i7 < e7s.size(); i7++)  {
									key = create_permutations_subset(mismatch_list, root, a, b, c, hg_type, e1s[i1], e2s[i2], e3s[i3], e4s[i4], e5s[i5], e6s[i6], e7s[i7], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
									keys.push_back(key);
									mismatches.push_back(mismatch_list);
								}
							}
						}
					}
				}
			}	
		}
	}
	else if (hg_type >= 409 && hg_type <= 449)  { // 8 hyperedges
		for (unsigned i1=0; i1 < e1s.size(); i1++)  {
			for (unsigned i2=0; i2 < e2s.size(); i2++)  {
				for (unsigned i3=0; i3 < e3s.size(); i3++)  {
					for (unsigned i4=0; i4 < e4s.size(); i4++)  {
						for (unsigned i5=0; i5 < e5s.size(); i5++)  {
							for (unsigned i6=0; i6 < e6s.size(); i6++)  {
								for (unsigned i7=0; i7 < e7s.size(); i7++)  {
									for (unsigned i8=0; i8 < e8s.size(); i8++)  {
										key = create_permutations_subset(mismatch_list, root, a, b, c, hg_type, e1s[i1], e2s[i2], e3s[i3], e4s[i4], e5s[i5], e6s[i6], e7s[i7], e8s[i8], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
										keys.push_back(key);
										mismatches.push_back(mismatch_list);
									}
								}
							}
						}
					}
				}
			}	
		}
	}
	else if (hg_type >= 450 && hg_type <= 465)  { // 9 hyperedges
		for (unsigned i1=0; i1 < e1s.size(); i1++)  {
			for (unsigned i2=0; i2 < e2s.size(); i2++)  {
				for (unsigned i3=0; i3 < e3s.size(); i3++)  {
					for (unsigned i4=0; i4 < e4s.size(); i4++)  {
						for (unsigned i5=0; i5 < e5s.size(); i5++)  {
							for (unsigned i6=0; i6 < e6s.size(); i6++)  {
								for (unsigned i7=0; i7 < e7s.size(); i7++)  {
									for (unsigned i8=0; i8 < e8s.size(); i8++)  {
										for (unsigned i9=0; i9 < e9s.size(); i9++)  {
											key = create_permutations_subset(mismatch_list, root, a, b, c, hg_type, e1s[i1], e2s[i2], e3s[i3], e4s[i4], e5s[i5], e6s[i6], e7s[i7], e8s[i8], e9s[i9], ZERO_CHAR, ZERO_CHAR);
											keys.push_back(key);
											mismatches.push_back(mismatch_list);
										}
									}
								}
							}
						}
					}
				}
			}	
		}
	}
	else if (hg_type >= 466 && hg_type <= 470)  { // 10 hyperedges
		for (unsigned i1=0; i1 < e1s.size(); i1++)  {
			for (unsigned i2=0; i2 < e2s.size(); i2++)  {
				for (unsigned i3=0; i3 < e3s.size(); i3++)  {
					for (unsigned i4=0; i4 < e4s.size(); i4++)  {
						for (unsigned i5=0; i5 < e5s.size(); i5++)  {
							for (unsigned i6=0; i6 < e6s.size(); i6++)  {
								for (unsigned i7=0; i7 < e7s.size(); i7++)  {
									for (unsigned i8=0; i8 < e8s.size(); i8++)  {
										for (unsigned i9=0; i9 < e9s.size(); i9++)  {
											for (unsigned i10=0; i10 < e10s.size(); i10++)  {
												key = create_permutations_subset(mismatch_list, root, a, b, c, hg_type, e1s[i1], e2s[i2], e3s[i3], e4s[i4], e5s[i5], e6s[i6], e7s[i7], e8s[i8], e9s[i9], e10s[i10], ZERO_CHAR);
												keys.push_back(key);
												mismatches.push_back(mismatch_list);
											}
										}
									}
								}
							}
						}
					}
				}
			}	
		}
	}
	else if (hg_type == 471)  { // 11 hyperedges
		for (unsigned i1=0; i1 < e1s.size(); i1++)  {
			for (unsigned i2=0; i2 < e2s.size(); i2++)  {
				for (unsigned i3=0; i3 < e3s.size(); i3++)  {
					for (unsigned i4=0; i4 < e4s.size(); i4++)  {
						for (unsigned i5=0; i5 < e5s.size(); i5++)  {
							for (unsigned i6=0; i6 < e6s.size(); i6++)  {
								for (unsigned i7=0; i7 < e7s.size(); i7++)  {
									for (unsigned i8=0; i8 < e8s.size(); i8++)  {
										for (unsigned i9=0; i9 < e9s.size(); i9++)  {
											for (unsigned i10=0; i10 < e10s.size(); i10++)  {
												for (unsigned i11=0; i11 < e11s.size(); i11++)  {
													key = create_permutations_subset(mismatch_list, root, a, b, c, hg_type, e1s[i1], e2s[i2], e3s[i3], e4s[i4], e5s[i5], e6s[i6], e7s[i7], e8s[i8], e9s[i9], e10s[i10], e11s[i11]);
													keys.push_back(key);
													mismatches.push_back(mismatch_list);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}	
		}
	} 
	
	return keys;
}

void insert_hypergraphlet_mismatch_neighborhood(list<Key> &neighborhood, Key k)  {
    list<Key>::iterator list_it;
    for (list_it = neighborhood.begin(); list_it != neighborhood.end(); list_it++)  {
        if (k.first == list_it->first && k.second == list_it->second)
            return;
    }
    neighborhood.push_back(k);
}

inline float get_sim_score(char label1, char label2, map<string, float> &sim_matrix)  { 
    string lookup;
    lookup += toupper(label1);
    lookup += toupper(label2);
    map<string,float>::iterator git = sim_matrix.find(lookup);
    if(git != sim_matrix.end())  {
        return git->second;
    }
    return 0.0;
}

void generate_hypergraphlet_mismatch_neighborhood_m1(list<Key> &neighborhood, string ALPHABET_ROOT, string ALPHABET, map<string, float> &sim_vlm_matrix, unsigned long hg_type, Element nkey, Element ekey)  {
    Key k;
    char root, a, b, c;
    char e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11;
    vector<Key> mismatches;
    float sim_score(0.0);
    
    initialize_vertices_labels(nkey, root, a, b, c);
    initialize_edges_labels(ekey, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
    
    for (unsigned i=0; i<ALPHABET_ROOT.length(); i++)  {
		sim_score = get_sim_score(root, ALPHABET_ROOT[i], sim_vlm_matrix);
        if (ALPHABET_ROOT[i] != root && sim_score >= NODES_SIMILARITY_THRESHOLD)  {
            k = create_permutations_subset(mismatches, ALPHABET_ROOT[i], a, b, c, hg_type, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
            insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
        }
    }

    for (unsigned i=0; i<ALPHABET.length(); i++)  {
		sim_score = get_sim_score(a, ALPHABET[i], sim_vlm_matrix);
        if (ALPHABET[i] != a && sim_score >= NODES_SIMILARITY_THRESHOLD)  {
            k = create_permutations_subset(mismatches, root, ALPHABET[i], b, c, hg_type, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
            insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
        }
        if (get_hypergraphlet_length(hg_type) > 2 && ALPHABET[i] != b)  {
            sim_score = get_sim_score(b, ALPHABET[i], sim_vlm_matrix);
			if (sim_score >= NODES_SIMILARITY_THRESHOLD)  {
				k = create_permutations_subset(mismatches, root, a, ALPHABET[i], c, hg_type, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
				insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
			}
        }
        if (get_hypergraphlet_length(hg_type) > 3 && ALPHABET[i] != c)  {
            sim_score = get_sim_score(c, ALPHABET[i], sim_vlm_matrix);
			if (sim_score >= NODES_SIMILARITY_THRESHOLD)  {
				k = create_permutations_subset(mismatches, root, a, b, ALPHABET[i], hg_type, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
				insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
			}
        }
    }
}

void generate_hypergraphlet_mismatch_neighborhood_m2(list<Key> &neighborhood, string ALPHABET_ROOT, string ALPHABET, map<string, float> &sim_vlm_matrix, unsigned long hg_type, Element nkey, Element ekey)  {
    Key k;
	char root, a, b, c;
    char e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11;
	vector<Key> mismatches;
	float sim_score1(0.0), sim_score2(0.0);

	initialize_vertices_labels(nkey, root, a, b, c);
	initialize_edges_labels(ekey, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);

	for (unsigned i=0; i<ALPHABET_ROOT.length(); i++)  {
		sim_score1 = get_sim_score(root, ALPHABET_ROOT[i], sim_vlm_matrix);
        if (sim_score1 >= NODES_SIMILARITY_THRESHOLD)  {
			for (unsigned j=0; j<ALPHABET.length(); j++)  {
				sim_score2 = get_sim_score(a, ALPHABET[j], sim_vlm_matrix);
                if (sim_score2 >= NODES_SIMILARITY_THRESHOLD)  {
					k = create_permutations_subset(mismatches, ALPHABET_ROOT[i], ALPHABET[j], b, c, hg_type, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
					insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
				}

				if (get_hypergraphlet_length(hg_type) > 2)  {
					sim_score2 = get_sim_score(b, ALPHABET[j], sim_vlm_matrix);
                    if (sim_score2 >= NODES_SIMILARITY_THRESHOLD)  {
						k = create_permutations_subset(mismatches, ALPHABET_ROOT[i], a, ALPHABET[j], c, hg_type, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
						insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
					}
				}

				if (get_hypergraphlet_length(hg_type) > 3)  {
					sim_score2 = get_sim_score(c, ALPHABET[j], sim_vlm_matrix);
                    if (sim_score2 >= NODES_SIMILARITY_THRESHOLD)  {
						k = create_permutations_subset(mismatches, ALPHABET_ROOT[i], a, b, ALPHABET[j], hg_type, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
						insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
					}
				}
			}
		}
    }

    for (unsigned i=0; i<ALPHABET.length(); i++)  {
        for (unsigned j=0; j<ALPHABET.length(); j++)  {
            if (get_hypergraphlet_length(hg_type) > 2)  {
				sim_score1 = get_sim_score(a, ALPHABET[i], sim_vlm_matrix);
                sim_score2 = get_sim_score(b, ALPHABET[j], sim_vlm_matrix);
                if (sim_score1 >= NODES_SIMILARITY_THRESHOLD && sim_score2 >= NODES_SIMILARITY_THRESHOLD)  {
					k = create_permutations_subset(mismatches, root, ALPHABET[i], ALPHABET[j], c, hg_type, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
					insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
				}
            }
            
            if (get_hypergraphlet_length(hg_type) > 3)  {
                sim_score2 = get_sim_score(c, ALPHABET[j], sim_vlm_matrix);
                if (sim_score2 >= NODES_SIMILARITY_THRESHOLD)  {
                    sim_score1 = get_sim_score(a, ALPHABET[i], sim_vlm_matrix);
                    if (sim_score1 >= NODES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, ALPHABET[i], b, ALPHABET[j], hg_type, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(b, ALPHABET[i], sim_vlm_matrix);
                    if (sim_score1 >= NODES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, ALPHABET[i], ALPHABET[j], hg_type, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                }
            }
        }
    }
}

void generate_hypergraphlet_mismatch_neighborhood_for_edges_m1(list<Key> &neighborhood, string EDGES_ALPHABET, map<string, float> &sim_elm_matrix, unsigned long hg_type, Element nkey, Element ekey)  {
	Key k;
	char root, a, b, c;
    char e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11;
	vector<Key> mismatches;
    float sim_score(0.0);
	unsigned long total_edges = get_hyperedges_number(hg_type);

	initialize_vertices_labels(nkey, root, a, b, c);
	initialize_edges_labels(ekey, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);

    for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
		if (total_edges >= 1)  {
            sim_score = get_sim_score(e1, EDGES_ALPHABET[i], sim_elm_matrix);
            if (sim_score >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                k = create_permutations_subset(mismatches, root, a, b, c, hg_type, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
                insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
            }
			if (total_edges >= 2 && EDGES_ALPHABET[i] != e2)  {
                sim_score = get_sim_score(e2, EDGES_ALPHABET[i], sim_elm_matrix);
                if (sim_score >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, e8, e9, e10, e11);
                    insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                }
			}
			if (total_edges >= 3 && EDGES_ALPHABET[i] != e3)  {
                sim_score = get_sim_score(e3, EDGES_ALPHABET[i], sim_elm_matrix);
                if (sim_score >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, e9, e10, e11);
                    insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                }
			}
			if (total_edges >= 4 && EDGES_ALPHABET[i] != e4)  {
                sim_score = get_sim_score(e4, EDGES_ALPHABET[i], sim_elm_matrix);
                if (sim_score >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, EDGES_ALPHABET[i], e5, e6, e7, e8, e9, e10, e11);
                    insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                }
			}
			if (total_edges >= 5 && EDGES_ALPHABET[i] != e5)  {
                sim_score = get_sim_score(e5, EDGES_ALPHABET[i], sim_elm_matrix);
                if (sim_score >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, EDGES_ALPHABET[i], e6, e7, e8, e9, e10, e11);
                    insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                }
			}
			if (total_edges >= 6 && EDGES_ALPHABET[i] != e6)  {
                sim_score = get_sim_score(e6, EDGES_ALPHABET[i], sim_elm_matrix);
                if (sim_score >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e7, e8, e9, e10, e11);
                    insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                }
			}
			if (total_edges >= 7 && EDGES_ALPHABET[i] != e7)  {
                sim_score = get_sim_score(e7, EDGES_ALPHABET[i], sim_elm_matrix);
                if (sim_score >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e8, e9, e10, e11);
                    insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                }
			}
			if (total_edges >= 8 && EDGES_ALPHABET[i] != e8)  {
                sim_score = get_sim_score(e8, EDGES_ALPHABET[i], sim_elm_matrix);
                if (sim_score >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], e9, e10, e11);
                    insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                }
			}
			if (total_edges >= 9 && EDGES_ALPHABET[i] != e9)  {
                sim_score = get_sim_score(e9, EDGES_ALPHABET[i], sim_elm_matrix);
                if (sim_score >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], e10, e11);
                    insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                }
			}
			if (total_edges >= 10 && EDGES_ALPHABET[i] != e10)  {
                sim_score = get_sim_score(e10, EDGES_ALPHABET[i], sim_elm_matrix);
                if (sim_score >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, e6, e7, e8, e9, EDGES_ALPHABET[i], e11);
                    insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                }
			}
			if (total_edges >= 11 && EDGES_ALPHABET[i] != e11)  {
                sim_score = get_sim_score(e11, EDGES_ALPHABET[i], sim_elm_matrix);
                if (sim_score >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, EDGES_ALPHABET[i]);
                    insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                }
			}
		}
	}
}

void generate_hypergraphlet_mismatch_neighborhood_for_edges_m2(list<Key> &neighborhood, string EDGES_ALPHABET, map<string, float> &sim_elm_matrix, unsigned long hg_type, Element nkey, Element ekey)  {
	Key k;
	char root, a, b, c;
    char e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11;
	vector<Key> mismatches;
    float sim_score1(0.0), sim_score2(0.0);
	unsigned long total_edges = get_hyperedges_number(hg_type);

	initialize_vertices_labels(nkey, root, a, b, c);
	initialize_edges_labels(ekey, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);

	for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
		if (total_edges == 1)  {
            sim_score1 = get_sim_score(e1, EDGES_ALPHABET[i], sim_elm_matrix);
            if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                k = create_permutations_subset(mismatches, root, a, b, c, hg_type, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
                insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
            }
		}
		for (unsigned j=0; j<EDGES_ALPHABET.length(); j++)  {
            if (total_edges >= 2)  {
                sim_score1 = get_sim_score(e1, EDGES_ALPHABET[i], sim_elm_matrix);
                sim_score2 = get_sim_score(e2, EDGES_ALPHABET[j], sim_elm_matrix);
                if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD && sim_score2 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    k = create_permutations_subset(mismatches, root, a, b, c, hg_type, EDGES_ALPHABET[i], EDGES_ALPHABET[j], e3, e4, e5, e6, e7, e8, e9, e10, e11);
                    insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                }
            }
            if (total_edges >= 3)  {
                sim_score2 = get_sim_score(e3, EDGES_ALPHABET[j], sim_elm_matrix);
                if (sim_score2 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    sim_score1 = get_sim_score(e1, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, EDGES_ALPHABET[i], e2, EDGES_ALPHABET[j], e4, e5, e6, e7, e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e2, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, EDGES_ALPHABET[i], EDGES_ALPHABET[j], e4, e5, e6, e7, e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                }
            }
            if (total_edges >= 4)  {
                sim_score2 = get_sim_score(e4, EDGES_ALPHABET[j], sim_elm_matrix);
                if (sim_score2 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    sim_score1 = get_sim_score(e1, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, EDGES_ALPHABET[i], e2, e3, EDGES_ALPHABET[j], e5, e6, e7, e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e2, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, EDGES_ALPHABET[i], e3, EDGES_ALPHABET[j], e5, e6, e7, e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e3, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, EDGES_ALPHABET[i], EDGES_ALPHABET[j], e5, e6, e7, e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                }
            }
            if (total_edges >= 5)  {
                sim_score2 = get_sim_score(e5, EDGES_ALPHABET[j], sim_elm_matrix);
                if (sim_score2 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    sim_score1 = get_sim_score(e1, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, EDGES_ALPHABET[i], e2, e3, e4, EDGES_ALPHABET[j], e6, e7, e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e2, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, EDGES_ALPHABET[i], e3, e4, EDGES_ALPHABET[j], e6, e7, e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e3, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, EDGES_ALPHABET[i], e4, EDGES_ALPHABET[j], e6, e7, e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }

                    sim_score1 = get_sim_score(e4, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, EDGES_ALPHABET[i], EDGES_ALPHABET[j], e6, e7, e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                }
            }
            if (total_edges >= 6)  {
                sim_score2 = get_sim_score(e6, EDGES_ALPHABET[j], sim_elm_matrix);
                if (sim_score2 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    sim_score1 = get_sim_score(e1, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, EDGES_ALPHABET[i], e2, e3, e4, e5, EDGES_ALPHABET[j], e7, e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e2, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, EDGES_ALPHABET[i], e3, e4, e5, EDGES_ALPHABET[j], e7, e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e3, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, EDGES_ALPHABET[i], e4, e5, EDGES_ALPHABET[j], e7, e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }

                    sim_score1 = get_sim_score(e4, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, EDGES_ALPHABET[i], e5, EDGES_ALPHABET[j], e7, e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e5, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, EDGES_ALPHABET[i], EDGES_ALPHABET[j], e7, e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                }
            }
            if (total_edges >= 7)  {
                sim_score2 = get_sim_score(e7, EDGES_ALPHABET[j], sim_elm_matrix);
                if (sim_score2 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    sim_score1 = get_sim_score(e1, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, EDGES_ALPHABET[j], e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e2, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, EDGES_ALPHABET[i], e3, e4, e5, e6, EDGES_ALPHABET[j], e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e3, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, EDGES_ALPHABET[i], e4, e5, e6, EDGES_ALPHABET[j], e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }

                    sim_score1 = get_sim_score(e4, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, EDGES_ALPHABET[i], e5, e6, EDGES_ALPHABET[j], e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e5, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, EDGES_ALPHABET[i], e6, EDGES_ALPHABET[j], e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }

                    sim_score1 = get_sim_score(e6, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], EDGES_ALPHABET[j], e8, e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                }
            }
            if (total_edges >= 8)  {
                sim_score2 = get_sim_score(e8, EDGES_ALPHABET[j], sim_elm_matrix);
                if (sim_score2 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    sim_score1 = get_sim_score(e1, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[j], e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e2, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, EDGES_ALPHABET[j], e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e3, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, EDGES_ALPHABET[i], e4, e5, e6, e7, EDGES_ALPHABET[j], e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }

                    sim_score1 = get_sim_score(e4, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, EDGES_ALPHABET[i], e5, e6, e7, EDGES_ALPHABET[j], e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e5, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, EDGES_ALPHABET[i], e6, e7, EDGES_ALPHABET[j], e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }

                    sim_score1 = get_sim_score(e6, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e7, EDGES_ALPHABET[j], e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e7, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], EDGES_ALPHABET[j], e9, e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                }
            }
            if (total_edges >= 9)  {
                sim_score2 = get_sim_score(e9, EDGES_ALPHABET[j], sim_elm_matrix);
                if (sim_score2 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    sim_score1 = get_sim_score(e1, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[j], e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e2, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[j], e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e3, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, EDGES_ALPHABET[j], e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }

                    sim_score1 = get_sim_score(e4, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, EDGES_ALPHABET[i], e5, e6, e7, e8, EDGES_ALPHABET[j], e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e5, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, EDGES_ALPHABET[i], e6, e7, e8, EDGES_ALPHABET[j], e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }

                    sim_score1 = get_sim_score(e6, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e7, e8, EDGES_ALPHABET[j], e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e7, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e8, EDGES_ALPHABET[j], e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }

                    sim_score1 = get_sim_score(e8, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], EDGES_ALPHABET[j], e10, e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                }
            }
            if (total_edges >= 10)  {
                sim_score2 = get_sim_score(e10, EDGES_ALPHABET[j], sim_elm_matrix);
                if (sim_score2 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    sim_score1 = get_sim_score(e1, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, e8, e9, EDGES_ALPHABET[j], e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e2, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, e8, e9, EDGES_ALPHABET[j], e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e3, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, e9, EDGES_ALPHABET[j], e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }

                    sim_score1 = get_sim_score(e4, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, EDGES_ALPHABET[i], e5, e6, e7, e8, e9, EDGES_ALPHABET[j], e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e5, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, EDGES_ALPHABET[i], e6, e7, e8, e9, EDGES_ALPHABET[j], e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }

                    sim_score1 = get_sim_score(e6, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e7, e8, e9, EDGES_ALPHABET[j], e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e7, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e8, e9, EDGES_ALPHABET[j], e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }

                    sim_score1 = get_sim_score(e8, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], e9, EDGES_ALPHABET[j], e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }

                    sim_score1 = get_sim_score(e9, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], EDGES_ALPHABET[j], e11);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                }
            }
            if (total_edges >= 11)  {
                sim_score2 = get_sim_score(e11, EDGES_ALPHABET[j], sim_elm_matrix);
                if (sim_score2 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                    sim_score1 = get_sim_score(e1, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, e8, e9, e10, EDGES_ALPHABET[j]);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e2, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, e8, e9, e10, EDGES_ALPHABET[j]);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e3, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, e9, e10, EDGES_ALPHABET[j]);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }

                    sim_score1 = get_sim_score(e4, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, EDGES_ALPHABET[i], e5, e6, e7, e8, e9, e10, EDGES_ALPHABET[j]);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e5, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, EDGES_ALPHABET[i], e6, e7, e8, e9, e10, EDGES_ALPHABET[j]);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }

                    sim_score1 = get_sim_score(e6, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e7, e8, e9, e10, EDGES_ALPHABET[j]);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                    
                    sim_score1 = get_sim_score(e7, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e8, e9, e10, EDGES_ALPHABET[j]);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }

                    sim_score1 = get_sim_score(e8, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], e9, e10, EDGES_ALPHABET[j]);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }

                    sim_score1 = get_sim_score(e9, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], e10, EDGES_ALPHABET[j]);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }

                    sim_score1 = get_sim_score(e10, EDGES_ALPHABET[i], sim_elm_matrix);
                    if (sim_score1 >= HYPEREDGES_SIMILARITY_THRESHOLD)  {
                        k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, e6, e7, e8, e9, EDGES_ALPHABET[i], EDGES_ALPHABET[j]);
                        insert_hypergraphlet_mismatch_neighborhood(neighborhood, k);
                    }
                }
            }
        }
	}
}

// Generate corresponding vertex label mismatch hypergraphlets for each hypergraphlet found.	 
void generate_vertex_label_mismatch_hypergraphlets(map<Key, list<Key> > &vl_mismatch_neighborhood, map<Key,MismatchInfo> &hash, map<Key,MismatchInfo> &mismatch_hash, Key key, unsigned long hg_type, string ALPHABET_ROOT, string ALPHABET, map<string, float> &sim_vlm_matrix, int VLM)  {
    char root, a, b, c;
    char e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11;
	list<Key>::iterator list_it;
	map<Key, list<Key> >::iterator lit;

	if ((lit = vl_mismatch_neighborhood.find(key)) == vl_mismatch_neighborhood.end())  {
		if (VLM == 1)  {
			generate_hypergraphlet_mismatch_neighborhood_m1(vl_mismatch_neighborhood[key], ALPHABET_ROOT, ALPHABET, sim_vlm_matrix, hg_type, key.first, key.second);
		}
		if (VLM == 2)  {
			generate_hypergraphlet_mismatch_neighborhood_m2(vl_mismatch_neighborhood[key], ALPHABET_ROOT, ALPHABET, sim_vlm_matrix, hg_type, key.first, key.second);
		}
    }

    for (list_it = vl_mismatch_neighborhood[key].begin(); list_it != vl_mismatch_neighborhood[key].end(); list_it++)  {
		map<Key,MismatchInfo>::iterator it;
		map<Key,MismatchInfo>::iterator mit;
		if (((it = hash.find(*list_it)) == hash.end()) && ((mit = mismatch_hash.find(*list_it)) == mismatch_hash.end()))  {
            vector<Key> mismatches;
			initialize_vertices_labels(list_it->first, root, a, b, c);
			initialize_edges_labels(list_it->second, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
			Key k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
			// Insert mismatch hypergraphlets into hash
			insert_mismatches_hash(mismatch_hash, k, mismatches);
		}
	}		
}

// Generate corresponding edge label mismatch hypergraphlets for each hypergraphlet found.
void generate_edge_label_mismatch_hypergraphlets(map<Key, list<Key> > &el_mismatch_neighborhood, map<Key,MismatchInfo> &hash, map<Key,MismatchInfo> &mismatch_hash, Key key, unsigned long hg_type, string EDGES_ALPHABET, map<string, float> &sim_elm_matrix, int ELM)  {
    char root, a, b, c;
	char e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11;
	list<Key>::iterator list_it;
	map<Key, list<Key> >::iterator lit;

	if ((lit = el_mismatch_neighborhood.find(key)) == el_mismatch_neighborhood.end())  {
		if (ELM == 1)  {
			generate_hypergraphlet_mismatch_neighborhood_for_edges_m1(el_mismatch_neighborhood[key], EDGES_ALPHABET, sim_elm_matrix, hg_type, key.first, key.second);
		}
		if (ELM == 2)  {
			generate_hypergraphlet_mismatch_neighborhood_for_edges_m2(el_mismatch_neighborhood[key], EDGES_ALPHABET, sim_elm_matrix, hg_type, key.first, key.second);
		}
	}

	for (list_it = el_mismatch_neighborhood[key].begin(); list_it != el_mismatch_neighborhood[key].end(); list_it++)  {
		map<Key,MismatchInfo>::iterator it;
		map<Key,MismatchInfo>::iterator mit;
		if (((it = hash.find(*list_it)) == hash.end()) && ((mit = mismatch_hash.find(*list_it)) == mismatch_hash.end()))  {
            vector<Key> mismatches;            
			initialize_vertices_labels(list_it->first, root, a, b, c);
			initialize_edges_labels(list_it->second, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
			Key k = create_permutations_subset(mismatches, root, a, b, c, hg_type, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);
			// Insert mismatch graphlets into hash
			insert_mismatches_hash(mismatch_hash, k, mismatches);
		}
	}
}

void increment_mismatch_count(map<Key,MismatchInfo> &hash, const Key &key, const Key &mismatch_key, float sim_score, float mult_factor)  {
	map<Key,MismatchInfo>::iterator it = hash.find(key);
    if (sim_score >= HYPERGRAPHLET_SIMILARITY_THRESHOLD)  {
        if (it != hash.end())  {
		    map<Key,float>::iterator mismatch = hash[it->first].mismatchesHypergraph.find(mismatch_key);
		    if (mismatch != hash[key].mismatchesHypergraph.end())  {
			    hash[it->first].mismatchesHypergraph[mismatch_key] = hash[it->first].mismatchesHypergraph[mismatch_key] + (mult_factor * sim_score);
		    }
			else  {
				cerr << "ERROR: Mismatch hypergraphlet permutation " << print_nkey(mismatch_key.first) << ";" << print_ekey(mismatch_key.second) << " cannot be found among subset of allowed permutations for mismatch hypergraphlet " << print_nkey(key.first) << ";" << print_ekey(key.second) << "." << endl; exit(1);
			}
	    }
		else  {
            cerr << "ERROR: Mismatch derived hypergraphlet " << print_nkey(key.first) << ";" << print_ekey(key.second) << " cannot be found." << endl; exit(1);
        }
    }
}

float compare_hypergraphlets_vertex_labels(Element nkey1, Element nkey2, unsigned long hg_type, map<string, float> &sim_vlm_matrix, float &sim_vlm_score)  {
	string key1_str = get_nkey(nkey1), key2_str = get_nkey(nkey2);
	float distance(0.0);
    sim_vlm_score = 1.0;

	for (unsigned i=0; i<get_hypergraphlet_length(hg_type); i++)  {
        if(key1_str[i] != key2_str[i])  {
            distance = distance + 1.0;
            if (key1_str[i] == ZERO_CHAR || key2_str[i] == ZERO_CHAR)
                continue;
            string lookup;
		    lookup += toupper(key2_str[i]); 
		    lookup += toupper(key1_str[i]);
            map<string,float>::iterator git = sim_vlm_matrix.find(lookup);
		    if(git != sim_vlm_matrix.end())  {
                sim_vlm_score *= git->second;
		    }
		    else {
		        cerr << "ERROR: Substitution pair  " << lookup << " cannot be found in vertex labels similarity matrix." << endl; exit(1);
		    }
        }
	}
	return distance;
}

float compare_hypergraphlets_edge_labels(Element ekey1, Element ekey2, unsigned long hg_type, map<string, float> &sim_elm_matrix, float &sim_elm_score)  {
	string key1_str = get_ekey(ekey1), key2_str = get_ekey(ekey2);
	float distance(0.0);
	sim_elm_score = 1.0;

	for (unsigned i=0; i<get_hyperedges_number(hg_type); i++)  {
        if(key1_str[i] != key2_str[i])  {
            distance = distance + 1.0;
            if (key1_str[i] == ZERO_CHAR || key2_str[i] == ZERO_CHAR)
                continue;
            string lookup;
		    lookup += toupper(key2_str[i]);
		    lookup += toupper(key1_str[i]);
            map<string,float>::iterator git = sim_elm_matrix.find(lookup);
		    if(git != sim_elm_matrix.end())  {
			    sim_elm_score *= git->second;
		    }
		    else {
		        cerr << "ERROR: Amino acid substiution pair  " << lookup << " cannot be found in edge labels similarity matrix." << endl; exit(1);
		    }
        }
	}
	return distance;
}

void update_mismatch_count(map<Key,MismatchInfo> &hash, Key k, float mult_factor, unsigned long hg_type, map<string, float> sim_vlm_matrix, map<string, float> sim_elm_matrix, int VLM, int ELM, bool eq)  {
	float curr_ndist, curr_edist, curr_dist, min_dist;
    float min_score, sim_vlm_score, sim_elm_score;
	Element nk(0), ek(0);
	Key min_key, min_graphlet;
	
	if (mult_factor > 0.0 && (VLM > 0 || ELM > 0))  { 
        for (map<Key,MismatchInfo>::iterator it = hash.begin(); it != hash.end(); it++)  {
			if (it->first != k) {
                min_dist = float(get_hypergraphlet_length(hg_type)) + float(get_hyperedges_number(hg_type)) + 1.0;
                min_score = 0.0;
				nk = make_nodes_key(ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				ek = make_hyperedges_key(ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, hg_type);
				make_key(min_graphlet, nk, ek);
				make_key(min_key, nk, ek);
				for (map<Key,float>::iterator mismatches_hash = hash[(it->first)].mismatchesHypergraph.begin(); mismatches_hash != hash[(it->first)].mismatchesHypergraph.end(); mismatches_hash++)  {
					curr_ndist = compare_hypergraphlets_vertex_labels(mismatches_hash->first.first, k.first, hg_type, sim_vlm_matrix, sim_vlm_score);
                    curr_edist = compare_hypergraphlets_edge_labels(mismatches_hash->first.second, k.second, hg_type, sim_elm_matrix, sim_elm_score);
                    curr_dist = curr_ndist + curr_edist;
					if (curr_dist < min_dist || (curr_dist == min_dist && (sim_vlm_score + sim_elm_score) > min_score))  {
						min_dist = curr_dist;                        
						make_key(min_key, it->first.first, it->first.second);
						make_key(min_graphlet, mismatches_hash->first.first, mismatches_hash->first.second);
						min_score = sim_vlm_score * sim_elm_score;
					}
				}
                if (eq)  {
			        if (min_dist == VLM || min_dist == ELM)  {
				        increment_mismatch_count(hash, min_key, min_graphlet, min_score, mult_factor);
			        }
                }
                else  {
			        if (min_dist <= VLM || min_dist <= ELM)  {
				        increment_mismatch_count(hash, min_key, min_graphlet, min_score, mult_factor);
			        }
                }
            }
		}
    }
}

void increment_edge_mismatch_hash(map<Key,MismatchInfo> &hash, map<Key,MismatchInfo> &mismatch_hash, const Key &k, float mult_factor, vector<Key> &mismatches_list)  {
    map<Key,MismatchInfo>::iterator it = hash.find(k);
    map<Key,MismatchInfo>::iterator mit = mismatch_hash.find(k);
    if (it != hash.end())  {
        hash[k].mismatches = it->second.mismatches + mult_factor;
    }
    else  {
        if (mit == mismatch_hash.end())  {
            mismatch_hash[k].matches = 0.0;
            mismatch_hash[k].mismatches = mult_factor;
            for (vector<Key>::iterator mismatch_key = mismatches_list.begin(); mismatch_key < mismatches_list.end(); mismatch_key++)  {
                mismatch_hash[k].mismatchesHypergraph[*mismatch_key] = 0.0;
            }
            mismatches_list.clear();
        }
        else  {
            mismatch_hash[k].mismatches = mit->second.mismatches + mult_factor;
        }
    }
}

void insert_edge_mismatch_hypergraphlet(list<pair <unsigned long, Key> > &EM_set, pair <unsigned long, Key> hypergraphlet, unsigned index)  {
    list<pair <unsigned long, Key> > :: iterator list_it;
    for (list_it = EM_set.begin(); list_it != EM_set.end(); list_it++)  {
        if (list_it->first == hypergraphlet.first && list_it->second == hypergraphlet.second)
            return;
    }
    EM_set.push_back(hypergraphlet);
}
   
void update_edge_mismatch_count(vector<list<pair <unsigned long, Key> > > &EM_set, Key k, unsigned long hg_type, unsigned EDGE_MISMATCHES_ALLOWED, unsigned vindex, string EDGES_ALPHABET)  {
	Element nk(0), ek(0);
	Key key(k), curr_key;
	make_key(curr_key, nk, ek);
	char root, a, b, c;
    char e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11;
    pair <unsigned long, Key> p (0,curr_key);
	vector<Key> mismatches;

    if (EDGE_MISMATCHES_ALLOWED <= 0)
        return;    

	initialize_vertices_labels(key.first, root, a, b, c);
	initialize_edges_labels(key.second, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);

    switch (hg_type)  {
        case 0: // R
            // There are no edges indels for this case.
            break;
            
        case 1: // E1={R,A}
            // There are no edges indels for this case.
            break;

        case 2: // E1={R,A1,A2}
            // E1={R,A,B}, E2={R,A} (Edge indel by adding edge E2={R,A1})
            p.first = 5;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e1, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}           		

            // E1={R,A,B}, E2={R,B} (Edge indel by adding edge E2={R,A2}) 
            p.first = 5;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, ZERO_CHAR, p.first, e1, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}           		

            // E1={R,A1,A2}, E2={A1,A2} (Edge indel by adding edge E2={A1,A2})
            p.first = 6;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e1, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}           		
            break;

        case 3: // E1={R,A}, E2={A,B}        
            // E1={R,A1}, E2={A1,A2}, E3={R,A2} (Edge indel by adding edge E3={R,B})
            p.first = 7;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A}, E2={A,B}, E3={R,A,B} (Edge indel by adding edge E3={R,A,B})
            p.first = 8;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, EDGES_ALPHABET[i], e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 4: // E1={R,A1}, E2={R,A2}        
            // E1={R,A1}, E2={R,A2}, E3={A1,A2} (Edge indel by adding edge E3={A1,A2})
            p.first = 7;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

            // E1={R,A1}, E2={R,A2}, E3={R,A1,A2} (Edge indel by adding edge E3={R,A1,A2})
            p.first = 9;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, EDGES_ALPHABET[i], e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 5: // E1={R,A,B}, E2={R,A}
            // E1={R,A1,A2} (Edge indel by removing edge E2={R,A})
            p.first = 2;
            p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e1, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2} (Edge indel by adding edge E3={R,B})
            p.first = 9;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			} 

            // E1={R,A,B}, E2={R,A}, E3={A,B} (Edge indel by adding edge E3={A,B})
            p.first = 8;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			} 
            break;

        case 6: // E1={R,A1,A2}, E2={A1,A2}
            // E1={R,A1,A2} (Edge indel by removing edge E2={A1,A2})
            p.first = 2;
            p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e1, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={A,B}, E3={R,A} (Edge indel by adding edge E3={R,A1})
            p.first = 8;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			} 

            // E1={R,A,B}, E2={A,B}, E3={R,B} (Edge indel by adding edge E3={R,A2})
            p.first = 8;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, ZERO_CHAR, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			} 
            break;

        case 7: // E1={R,A1}, E2={R,A2}, E3={A1,A2}
            // E2={R,A2}, E3={A1,A2} (Edge indel by removing edge E1={R,A1})
            p.first = 3;        
            p.second = create_permutations_subset(mismatches, root, b, a, ZERO_CHAR, p.first, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E3={A1,A2} (Edge indel by removing edge E2={R,A2})
            p.first = 3;
            p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={R,A2} (Edge indel by removing edge from E3={A1,A2})
            p.first = 4;
            p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={R,A2}, E3={A1,A2}, E4={R,A1,A2} (Edge indel by adding edge E4={R,A1,A2})
            p.first = 10;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			} 
            break;

        case 8: // E1={R,A,B}, E2={R,A}, E3={A,B}
            // E2={R,A}, E3={A,B} (Edge indel by removing edge E1={R,A,B})
            p.first = 3;
            p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={A,B} (Edge indel by removing edge E2={R,A})
            p.first = 6;
            p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A} (Edge indel by removing edge E3={A,B})
            p.first = 5;
            p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={A,B}, E4={R,B} (Edge indel by adding edge from E4={R,B})
            p.first = 10;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 9: // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}
            // E2={R,A1}, E3={R,A2} (Edge indel by removing edge E1={R,A1,A2})
            p.first = 4;
            p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E3={R,A2} (Edge indel by removing edge E2={R,A1})
            p.first = 5;
            p.second = create_permutations_subset(mismatches, root, b, a, ZERO_CHAR, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1} (Edge indel by removing edge E3={R,A2})
            p.first = 5;
            p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            
            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2} (Edge indel by adding edge E4={A1,A2})
            p.first = 10;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 10: // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2}
            // E2={R,A1}, E3={R,A2}, E4={A1,A2} (Edge indel by removing edge E1={R,A1,A2})
            p.first = 7;
            p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E3={R,A2}, E4={A1,A2} (Edge indel by removing edge E2={R,A1})
            p.first = 8;
            p.second = create_permutations_subset(mismatches, root, b, a, ZERO_CHAR, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1}, E4={A1,A2} (Edge indel by removing edge E3={R,A2})
            p.first = 8;
            p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            
            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2} (Edge indel by removing edge E4={A1,A2})
            p.first = 9;
            p.second = create_permutations_subset(mismatches, root, a, b, ZERO_CHAR, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            break;

        case 11: // E1={R,A1,A2,A3}
            // E1={R,A,B1,B2}, E2={R,A} (Edge indel by adding edge E2={R,A1})
            p.first = 14;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A} (Edge indel by adding edge E2={R,A2})
            p.first = 14;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            
            // E1={R,A,B1,B2}, E2={R,A} (Edge indel by adding edge E2={R,A3})
            p.first = 14;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={B1,B2} (Edge indel by adding edge E2={A1,A2})
            p.first = 16;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={B1,B2} (Edge indel by adding edge E2={A1,A3})
            p.first = 16;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={B1,B2} (Edge indel by adding edge E2={A2,A3})
            p.first = 16;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2} (Edge indel by adding edge E2={R,A1,A2})
            p.first = 19;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2} (Edge indel by adding edge E2={R,A1,A3})
            p.first = 19;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2} (Edge indel by adding edge E2={R,A2,A3})
            p.first = 19;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,A3}, E2={A1,A2,A3} (Edge indel by adding edge E2={A1,A2,A3})
            p.first = 20;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            break;

        case 12: // E1={R,A1,A2}, E2={R,B}
            // E1={R,A1,A2}, E2={R,B}, E3={R,A1} (Edge indel by adding edge E3={R,A1})
            p.first = 23;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,B}, E3={R,A2} (Edge indel by adding edge E3={R,A2})
            p.first = 23;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,B}, E3={A1,A2} (Edge indel by adding edge E3={A1,A2})
            p.first = 33;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,B}, E3={A1,B} (Edge indel by adding edge E3={A1,B})
            p.first = 29;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,B}, E3={A2,B} (Edge indel by adding edge E3={A2,B})
            p.first = 29;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,B}, E3={R,A,B} (Edge indel by adding edge E3={R,A1,B})
            p.first = 37;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,B}, E3={R,A,B} (Edge indel by adding edge E3={R,A2,B})
            p.first = 37;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B} (Edge indel by adding edge E3={A1,A2,B})
            p.first = 40;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,B}, E3={R,A1,A2,B} (Edge indel by adding edge E3={R,A1,A2,B})
            p.first = 41;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            break;

        case 13: // E1={R,A}, E2={A,B1,B2}
            // E1={R,A}, E2={A,B1,B2}, E3={R,B1} (Edge indel by adding edge E3={R,B1})
            p.first = 24;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={A,B1,B2}, E3={R,B2} (Edge indel by adding edge E3={R,B2})
            p.first = 24;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            
            // E1={R,A}, E2={A,B1,B2}, E3={A,B1} (Edge indel by adding edge E3={A,B1})
            p.first = 30;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={A,B1,B2}, E3={A,B1} (Edge indel by adding edge E3={A,B2})
            p.first = 30;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={A,B1,B2}, E3={A,B1} (Edge indel by adding edge E3={B1,B2})
            p.first = 34;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            
            // E1={R,A}, E2={A,B,C}, E3={R,A,B} (Edge indel by adding edge E3={R,A,B1})
            p.first = 38;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            
            // E1={R,A}, E2={A,B,C}, E3={R,A,B} (Edge indel by adding edge E3={R,A,B2})
            p.first = 38;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,B}, E2={A1,A2,B}, E3={R,A1,A2} (Edge indel by adding edge E3={R,B1,B2})
            p.first = 40;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={A,B1,B2}, E3={R,A,B1,B2} (Edge indel by adding edge E3={R,A,B1,B2})
            p.first = 42;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            break;
            
        case 14: // E1={R,A,B1,B2}, E2={R,A}
            // E1={R,A1,A2,A3} (Edge indel by removing edge E2={R,A})
            p.first = 11;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            
            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2} (Edge indel by adding edge E3={R,B1})
            p.first = 25;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            
            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2} (Edge indel by adding edge E3={R,B2})
            p.first = 25;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={A,B} (Edge indel by adding edge E3={A,B1})
            p.first = 31;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={A,B} (Edge indel by adding edge E3={A,B2})
            p.first = 31;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A}, E3={B1,B2} (Edge indel by adding edge E3={B1,B2})
            p.first = 35;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={R,A,B} (Edge indel by adding edge E3={R,A,B1})
            p.first = 39;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={R,A,B} (Edge indel by adding edge E3={R,A,B2})
            p.first = 39;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,B}, E3={R,A1,A2} (Edge indel by adding edge E3={R,B1,B2})
            p.first = 41 ;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A}, E3={A,B1,B2} (Edge indel by adding edge E3={A,B1,B2})
            p.first = 42;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            break;

        case 15: // E1={R,A,B}, E2={B,C}
            // E1={R,A,B}, E2={B,C}, E3={R,A} (Edge indel by adding edge E3={R,A})
            p.first = 32;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={A,C}, E3={R,A} (Edge indel by adding edge E3={R,B})
            p.first = 28;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={B,C}, E3={R,C} (Edge indel by adding edge E3={R,C})
            p.first = 29;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={A,C}, E3={A,B} (Edge indel by adding edge E3={A,B})
            p.first = 43;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={A2,B}, E3={A1,B} (Edge indel by adding edge E3={A,C})
            p.first = 44;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={B1,B2}, E3={R,A,B2} (Edge indel by adding edge E3={R,A,C})
            p.first = 49;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={A,B}, E3={R,A,B} (Edge indel by adding edge E3={R,B,C})
            p.first = 46;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={B,C}, E3={A,B,C} (Edge indel by adding edge E3={A,B,C})
            p.first = 50;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={B,C}, E3={R,A,B,C} (Edge indel by adding edge E3={R,A,B,C})
            p.first = 51;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            break;

        case 16: // E1={R,A,B1,B2}, E2={B1,B2}
            // E1={R,A1,A2,A3} (Edge indel by removing edge E2={B1,B2})
            p.first = 11;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={B1,B2}, E3={R,A} (Edge indel by adding edge E3={R,A})
            p.first = 35;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={A,B}, E3={R,A} (Edge indel by adding edge E3={R,B1})
            p.first = 31;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={A,B}, E3={R,A} (Edge indel by adding edge E3={R,B2})
            p.first = 31;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, b, a, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={A,B2}, E3={A,B1} (Edge indel by adding edge E3={A,B1})
            p.first = 45;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={A,B2}, E3={A,B1} (Edge indel by adding edge E3={A,B2})
            p.first = 45;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={B,C}, E3={R,A,B} (Edge indel by adding edge E3={R,A,B1})
            p.first = 51;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={B,C}, E3={R,A,B} (Edge indel by adding edge E3={R,A,B2})
            p.first = 51;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={A1,A2}, E3={A1,A2,B} (Edge indel by adding edge E3={A,B1,B2})
            p.first = 52;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            break;

        case 17: // E1={R,A,B1}, E2={R,A,B2}
            // E1={R,A,B1}, E2={R,A,B2}, E3={R,A} (Edge indel by adding edge E3={R,A})
            p.first = 36;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,B} (Edge indel by adding edge E3={R,B1})
            p.first = 37;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,B} (Edge indel by adding edge E3={R,B2})
            p.first = 37;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={A,B} (Edge indel by adding edge E3={A,B1})
            p.first = 46;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={A,B} (Edge indel by adding edge E3={A,B2})
            p.first = 46;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={B1,B2} (Edge indel by adding edge E3={B1,B2})
            p.first = 49;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3} (Edge indel by adding edge E3={R,B1,B2})
            p.first = 53;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2} (Edge indel by adding edge E3={A,B1,B2})
            p.first = 54;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,A,B1,B2} (Edge indel by adding edge E3={R,A,B1,B2})
            p.first = 55;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            break;

        case 18: // E1={R,A1,A2}, E2={A1,A2,B}
            // E1={R,A,B}, E2={A,B,C}, E3={R,A} (Edge indel by adding edge E3={R,A1})
            p.first = 38;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={A,B,C}, E3={R,A} (Edge indel by adding edge E3={R,A2})
            p.first = 38;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={A1,A2,B}, E3={R,B} (Edge indel by adding edge E3={R,B})
            p.first = 40;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={A1,A2,B}, E3={A1,A2} (Edge indel by adding edge E3={A1,A2})
            p.first = 47;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={A,B,C}, E3={B,C} (Edge indel by adding edge E3={A1,B})
            p.first = 50;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={A,B,C}, E3={B,C} (Edge indel by adding edge E3={A2,B})
            p.first = 50;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={A,B1,B2}, E3={R,A,B2} (Edge indel by adding edge E3={R,A1,B})
            p.first = 54;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={A,B1,B2}, E3={R,A,B2} (Edge indel by adding edge E3={R,A2,B})
            p.first = 54;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={A1,A2,B}, E3={R,A1,A2,B} (Edge indel by adding edge E3={R,A1,A2,B})
            p.first = 56;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            break;

        case 19: // E1={R,A1,A2,B}, E2={R,A1,A2}
            // E1={R,A1,A2,A3} (Edge indel by removing edge E2={R,A1,A2})
            p.first = 11;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A} (Edge indel by adding edge E3={R,A1})
            p.first = 39;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A} (Edge indel by adding edge E3={R,A2})
            p.first = 39;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B} (Edge indel by adding edge E3={R,B})
            p.first = 41;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2} (Edge indel by adding edge E3={A1,A2})
            p.first = 48;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={B,C} (Edge indel by adding edge E3={A1,B})
            p.first = 51;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={B,C} (Edge indel by adding edge E3={A2,B})
            p.first = 51;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2} (Edge indel by adding edge E3={R,A1,B})
            p.first = 55;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2} (Edge indel by adding edge E3={R,A2,B})
            p.first = 55;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B} (Edge indel by adding edge E3={A1,A2,B})
            p.first = 56;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 20: // E1={R,A1,A2,A3}, E2={A1,A2,A3}
            // E1={R,A1,A2,A3} (Edge indel by removing edge E2={A1,A2,A3})
            p.first = 11;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={A,B1,B2}, E3={R,A} (Edge indel by adding edge E3={R,A1})
            p.first = 42;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={A,B1,B2}, E3={R,A} (Edge indel by adding edge E3={R,A2})
            p.first = 42;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={A,B1,B2}, E3={R,A} (Edge indel by adding edge E3={R,A3})
            p.first = 42;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={A1,A2,B}, E3={A1,A2} (Edge indel by adding edge E3={A1,A2})
            p.first = 52;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={A1,A2,B}, E3={A1,A2} (Edge indel by adding edge E3={A1,A3})
            p.first = 52;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={A1,A2,B}, E3={A1,A2} (Edge indel by adding edge E3={A2,A3})
            p.first = 52;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={A1,A2,B}, E3={R,A1,A2} (Edge indel by adding edge E3={R,A1,A2})
            p.first = 56;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={A1,A2,B}, E3={R,A1,A2} (Edge indel by adding edge E3={R,A1,A3})
            p.first = 56;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={A1,A2,B}, E3={R,A1,A2} (Edge indel by adding edge E3={R,A2,A3})
            p.first = 56;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            break;

        case 21: // E1={R,A1}, E2={R,A2}, E3={R,A3}
			// E1={R,A1}, E2={R,A2}, E3={R,B}, E4={A1,A2} (Edge indel by adding edge E4={A1,A2})
            p.first = 57;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={R,A2}, E3={R,B}, E4={A1,A2} (Edge indel by adding edge E4={A1,A3})
            p.first = 57;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={R,A2}, E3={R,B}, E4={A1,A2} (Edge indel by adding edge E4={A2,A3})
            p.first = 57;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e2, e3, e1, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={R,A2}, E3={R,B}, E4={R,A1,A2} (Edge indel by adding edge E4={R,A1,A2})
            p.first = 58;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={R,A2}, E3={R,B}, E4={R,A1,A2} (Edge indel by adding edge E4={R,A1,A3})
            p.first = 58;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e3, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={R,A2}, E3={R,B}, E4={R,A1,A2} (Edge indel by adding edge E4={R,A2,A3})
            p.first = 58;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e2, e3, e1, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={R,A2}, E3={R,A3}, E4={A1,A2,A3} (Edge indel by adding edge E4={A1,A2,A3})
            p.first = 59;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={R,A2}, E3={R,A3}, E4={R,A1,A2,A3} (Edge indel by adding edge E4={R,A1,A2,A3})
            p.first = 60;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            break;

        case 22: // E1={R,A}, E2={R,B}, E3={B,C}
			// E1={R,B}, E2={R,A1}, E3={A1,A2}, E4={R,A2} (Edge indel by adding edge E4={R,C})
            p.first = 57;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e2, EDGES_ALPHABET[i], e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={R,B}, E3={B,C}, E4={A,B} (Edge indel by adding edge E4={A,B})
            p.first = 61;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={R,B}, E3={B,C}, E4={A,C} (Edge indel by adding edge E4={A,C})
            p.first = 65;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={R,B}, E3={B,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A,B})
            p.first = 66;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={R,C}, E3={B,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A,C})
            p.first = 68;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,C}, E2={R,A}, E3={A,B}, E4={R,A,B} (Edge indel by adding edge E4={R,B,C})
            p.first = 67;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e2, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={R,B}, E3={B,C}, E4={A,B,C} (Edge indel by adding edge E4={A,B,C})
            p.first = 69;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={R,B}, E3={B,C}, E4={R,A,B,C} (Edge indel by adding edge E4={R,A,B,C})
            p.first = 70;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            break;

        case 23: // E1={R,A,B}, E2={R,A}, E3={R,C}
            // E1={R,A1,A2}, E3={R,B} (Edge indel by removing edge E2={R,A})
            p.first = 12;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,B}, E4={R,A2} (Edge indel by adding edge E4={R,B})
            p.first = 58;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B} (Edge indel by adding edge E4={A,B})
            p.first = 67;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,C} (Edge indel by adding edge E4={A,C})
            p.first = 62;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={B,C} (Edge indel by adding edge E4={B,C})
            p.first = 68;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A}, E3={R,B}, E4={R,A,B} (Edge indel by adding edge E4={R,A,C})
            p.first = 71;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,B1}, E3={R,B2}, E4={R,A,B2} (Edge indel by adding edge E4={R,B,C})
            p.first = 74;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C} (Edge indel by adding edge E4={A,B,C})
            p.first = 75;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={R,A,B,C} (Edge indel by adding edge E4={R,A,B,C})
            p.first = 76;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 24: // E1={R,A1}, E2={R,A2}, E3={A1,A2,B}
            // E2={R,A}, E3={A,B,C} (Edge indel by removing edge E1={R,A1})
            p.first = 13;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E3={A,B,C} (Edge indel by removing edge E1={R,A2})
            p.first = 13;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1}, E2={R,A2}, E3={A1,A2,A3}, E4={R,A3} (Edge indel by adding edge E4={R,B})
            p.first = 59;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={A1,A2} (Edge indel by adding edge E4={A1,A2})
            p.first = 63;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,B}, E2={R,A}, E3={A,B,C}, E4={B,C} (Edge indel by adding edge E4={A1,B})
            p.first = 69;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e1, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={R,B}, E3={A,B,C}, E4={B,C} (Edge indel by adding edge E4={A2,B})
            p.first = 69;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={R,A1,A2} (Edge indel by adding edge E4={R,A1,A2})
            p.first = 73;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={R,C}, E3={A,B,C}, E4={R,A,C} (Edge indel by adding edge E4={R,A1,B})
            p.first = 75;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,C}, E2={R,A}, E3={A,B,C}, E4={R,A,C} (Edge indel by adding edge E4={R,A2,B})
            p.first = 75;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e2, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={R,A1,A2,B} (Edge indel by adding edge E4={R,A1,A2,B})
            p.first = 77;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            break;

        case 25: // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}
            // E1={R,A,B1,B2}, E3={R,A} (Edge indel by removing edge E2={R,A1})
            p.first = 14;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,A} (Edge indel by removing edge E2={R,A2})
            p.first = 14;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={R,A3} (Edge indel by adding edge E4={R,B})
            p.first = 60;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2} (Edge indel by adding edge E4={A1,A2})
            p.first = 64;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,B}, E3={R,A}, E4={B,C} (Edge indel by adding edge E4={A1,B})
            p.first = 70;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={B,C} (Edge indel by adding edge E4={A2,B})
            p.first = 70;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={R,A1,A2} (Edge indel by adding edge E4={R,A1,A2})
            p.first = 73;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={R,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A1,B})
            p.first = 76;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,C}, E3={R,A}, E4={R,A,B} (Edge indel by adding edge E4={R,A2,B})
            p.first = 76;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B} (Edge indel by adding edge E4={A1,A2,B})
            p.first = 77;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            break;

        case 26: // E1={R,A}, E2={A,B1}, E3={A,B2}
			// E1={R,B}, E2={A,B}, E3={A,C}, E4={R,A} (Edge indel by adding edge E4={R,B1})
            p.first = 61;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,B}, E2={A,C}, E3={A,B}, E4={R,A} (Edge indel by adding edge E4={R,B2})
            p.first = 61;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, EDGES_ALPHABET[i], e1, e3, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={A,B1}, E3={A,B2}, E4={B1,B2} (Edge indel by adding edge E4={B1,B2})
            p.first = 78;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={A,B}, E3={A,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A,B1})
            p.first = 79;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={A,C}, E3={A,B}, E4={R,A,B} (Edge indel by adding edge E4={R,A,B2})
            p.first = 79;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e3, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,B}, E2={A1,B}, E3={A2,B}, E4={R,A1,A2} (Edge indel by adding edge E4={R,B1,B2})
            p.first = 80;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={A,B1}, E3={A,B2}, E4={A,B1,B2} (Edge indel by adding edge E4={A,B1,B2})
            p.first = 81;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={A,B1}, E3={A,B2}, E4={R,A,B1,B2} (Edge indel by adding edge E4={R,A,B1,B2})
            p.first = 82;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            break;

        case 27: // E1={R,A}, E2={A,B}, E3={B,C}
			// E1={R,A}, E2={A,B}, E3={B,C}, E4={R,B} (Edge indel by adding edge E4={R,B})
            p.first = 61;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={A1,B}, E3={A2,B}, E4={R,A2} (Edge indel by adding edge E4={R,C})
            p.first = 65;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={A,B1}, E3={B1,B2}, E4={A,B2} (Edge indel by adding edge E4={A,C})
            p.first = 78;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={A,B}, E3={B,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A,B})
            p.first = 83;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={A,C}, E3={B,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A,C})
            p.first = 84;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,C}, E2={A,C}, E3={A,B}, E4={R,A,B} (Edge indel by adding edge E4={R,B,C})
            p.first = 85;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e3, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={A,B}, E3={B,C}, E4={A,B,C} (Edge indel by adding edge E4={A,B,C})
            p.first = 86;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={A,B}, E3={B,C}, E4={R,A,B,C} (Edge indel by adding edge E4={R,A,B,C})
            p.first = 87;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            break;

        case 28: // E1={R,A,B}, E2={R,B}, E3={B,C}
			// E1={R,A,B}, E3={B,C} (Edge indel by removing edge E2={R,B})
            p.first = 15;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B}, E3={B,C}, E4={R,A} (Edge indel by adding edge E4={R,A})
            p.first = 66;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,C}, E4={R,C} (Edge indel by adding edge E4={R,C})
            p.first = 62;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,C}, E4={A,B} (Edge indel by adding edge E4={A,B})
            p.first = 79;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,C}, E4={B,C} (Edge indel by adding edge E4={A,C})
            p.first = 84;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={B,C}, E4={R,A,C} (Edge indel by adding edge E4={R,A,C})
            p.first = 92;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A}, E3={A,B}, E4={R,A,B} (Edge indel by adding edge E4={R,B,C})
            p.first = 88;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,C}, E4={A,B,C} (Edge indel by adding edge E4={A,B,C})
            p.first = 93;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,C}, E4={R,A,B,C} (Edge indel by adding edge E4={R,A,B,C})
            p.first = 94;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            break;

        case 29: // E1={R,A,B}, E2={R,C}, E3={B,C}
			// E1={R,A,B}, E3={B,C} (Edge indel by removing edge E2={R,C})
            p.first = 15;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,B} (Edge indel by removing edge E3={B,C})
            p.first = 12;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,C}, E3={B,C}, E4={R,A} (Edge indel by adding edge E4={R,A})
            p.first = 68;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,C}, E3={A,C}, E4={R,A} (Edge indel by adding edge E4={R,B})
            p.first = 62;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,C}, E3={A,C}, E4={A,B} (Edge indel by adding edge E4={A,B})
            p.first = 85;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,C}, E3={B,C}, E4={A,C} (Edge indel by adding edge E4={A,C})
            p.first = 80;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,B}, E3={B,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A,C})
            p.first = 92;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,B}, E3={B,C}, E4={R,A,B} (Edge indel by adding edge E4={R,B,C})
            p.first = 89;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,C}, E3={A,C}, E4={A,B,C} (Edge indel by adding edge E4={A,B,C})
            p.first = 95;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,C}, E3={A,C}, E4={R,A,B,C} (Edge indel by adding edge E4={R,A,B,C})
            p.first = 96;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            break;

        case 30: // E1={R,A}, E2={A,B,C}, E3={A,B}
			// E1={R,A}, E2={A,B1,B2} (Edge indel by removing edge E3={A,B})
            p.first = 13;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1}, E2={A1,A2,B}, E3={A1,A2}, E4={R,A2} (Edge indel by adding edge E4={R,B})
            p.first = 63;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,B}, E2={A,B,C}, E3={B,C}, E4={R,A} (Edge indel by adding edge E4={R,C})
            p.first = 69;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={A,B1,B2}, E3={A,B1}, E4={A,B2} (Edge indel by adding edge E4={A,C})
            p.first = 81;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={A,B,C}, E3={A,B}, E4={B,C} (Edge indel by adding edge E4={B,C})
            p.first = 86;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={A,B,C}, E3={A,B}, E4={R,A,B} (Edge indel by adding edge E4={R,A,B})
            p.first = 90;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={A,B,C}, E3={A,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A,C})
            p.first = 93;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,C}, E2={A,B,C}, E3={A,C}, E4={R,A,B} (Edge indel by adding edge E4={R,B,C})
            p.first = 95;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={A,B,C}, E3={A,B}, E4={R,A,B,C} (Edge indel by adding edge E4={R,A,B,C})
            p.first = 97;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
            break;

        case 31: // E1={R,A,B,C}, E2={R,A}, E3={A,B}
			// E1={R,A,B1,B2}, E3={B1,B2} (Edge indel by removing edge E2={R,A})
            p.first = 16;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A} (Edge indel by removing edge E2={A,B})
            p.first = 14;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={A1,A2}, E4={R,A2} (Edge indel by adding edge E4={R,B})
            p.first = 64;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,B}, E3={B,C}, E4={R,A} (Edge indel by adding edge E4={R,C})
            p.first = 70;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A}, E3={A,B1}, E4={A,B2} (Edge indel by adding edge E4={A,C})
            p.first = 82;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A}, E3={A,B}, E4={B,C} (Edge indel by adding edge E4={B,C})
            p.first = 87;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A}, E3={A,B}, E4={R,A,B} (Edge indel by adding edge E4={R,A,B})
            p.first = 91;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A}, E3={A,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A,C})
            p.first = 94;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,C}, E3={A,C}, E4={R,A,B} (Edge indel by adding edge E4={R,B,C})
            p.first = 96;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A}, E3={A,B}, E4={A,B,C} (Edge indel by adding edge E4={A,B,C})
            p.first = 97;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 32: // E1={R,A,B}, E2={R,A}, E3={B,C}
			// E1={R,A,B}, E3={B,C} (Edge indel by removing edge E2={R,A})
            p.first = 15;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={B,C}, E4={R,B} (Edge indel by adding edge E4={R,B})
            p.first = 66;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A}, E3={B,C}, E4={R,C} (Edge indel by adding edge E4={R,C})
            p.first = 68;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A}, E3={B,C}, E4={A,B} (Edge indel by adding edge E4={A,B})
            p.first = 83;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A}, E3={B,C}, E4={A,C} (Edge indel by adding edge E4={A,C})
            p.first = 84;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A}, E3={B1,B2}, E4={R,A,B2} (Edge indel by adding edge E4={R,A,C})
            p.first = 98;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,B}, E3={A,C}, E4={R,A,C} (Edge indel by adding edge E4={R,B,C})
            p.first = 99;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A}, E3={B,C}, E4={A,B,C} (Edge indel by adding edge E4={A,B,C})
            p.first = 100;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A}, E3={B,C}, E4={R,A,B,C} (Edge indel by adding edge E4={R,A,B,C})
            p.first = 101;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 33: // E1={R,A1,A2}, E2={R,B}, E3={A1,A2}
			// E1={R,A1,A2}, E2={R,B} (Edge indel by removing edge E2={A1,A2})
            p.first = 12;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,C}, E3={A,B}, E4={R,A} (Edge indel by adding edge E4={R,A1})
            p.first = 67;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,C}, E3={A,B}, E4={R,A} (Edge indel by adding edge E4={R,A2})
            p.first = 67;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,C}, E3={A,B}, E4={A,C} (Edge indel by adding edge E4={A1,B})
            p.first = 85;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,C}, E3={A,B}, E4={A,C} (Edge indel by adding edge E4={A2,B})
            p.first = 85;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,C}, E2={R,B}, E3={A,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A1,B})
            p.first = 99;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,C}, E2={R,B}, E3={A,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A2,B})
            p.first = 99;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,B}, E3={A1,A2}, E4={A1,A2,B} (Edge indel by adding edge E4={A1,A2,B})
            p.first = 102;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,B}, E3={A1,A2}, E4={R,A1,A2,B} (Edge indel by adding edge E4={R,A1,A2,B})
            p.first = 103;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 34: // E1={R,A}, E2={A,B1,B2}, E3={B1,B2}
			// E1={R,A}, E2={A,B1,B2} (Edge indel by removing edge E3={B1,B2})
            p.first = 13;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A}, E2={A,B,C}, E3={B,C}, E4={R,B} (Edge indel by adding edge E4={R,B1})
            p.first = 69;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A}, E2={A,B,C}, E3={B,C}, E4={R,B} (Edge indel by adding edge E4={R,B2})
            p.first = 69;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A}, E2={A,B,C}, E3={B,C}, E4={A,B} (Edge indel by adding edge E4={A,B1})
            p.first = 86;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A}, E2={A,B,C}, E3={B,C}, E4={A,B} (Edge indel by adding edge E4={A,B2})
            p.first = 86;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A}, E2={A,B,C}, E3={B,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A,B1})
            p.first = 100;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A}, E2={A,B,C}, E3={B,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A,B2})
            p.first = 100;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,B}, E2={A1,A2,B}, E3={A1,A2}, E4={R,A1,A2} (Edge indel by adding edge E4={R,B1,B2})
            p.first = 102;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A}, E2={A,B1,B2}, E3={B1,B2}, E4={R,A,B1,B2} (Edge indel by adding edge E4={R,B1,B2})
            p.first = 104;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 35: // E1={R,A,B1,B2}, E2={R,A}, E3={B1,B2}
			// E1={R,A,B1,B2}, E3={B1,B2} (Edge indel by removing edge E2={R,A})
            p.first = 16;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A} (Edge indel by removing edge E3={B1,B2})
            p.first = 14;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A}, E3={B,C}, E4={R,B} (Edge indel by adding edge E4={R,B1})
            p.first = 70;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A}, E3={B,C}, E4={R,B} (Edge indel by adding edge E4={R,B2})
            p.first = 70;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A}, E3={B,C}, E4={A,B} (Edge indel by adding edge E4={A,B1})
            p.first = 87;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A}, E3={B,C}, E4={A,C} (Edge indel by adding edge E4={A,B2})
            p.first = 87;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A}, E3={B,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A,B1})
            p.first = 101;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A}, E3={B,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A,B2})
            p.first = 101;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,B}, E3={A1,A2}, E4={R,A1,A2} (Edge indel by adding edge E4={R,B1,B2})
            p.first = 103;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A}, E3={B1,B2}, E4={A,B1,B2} (Edge indel by adding edge E4={A,B1,B2})
            p.first = 104;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

        case 36: // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}
			// E1={R,A,B1}, E2={R,A,B2} (Edge indel by removing edge E3={R,A})
            p.first = 17;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B} (Edge indel by adding edge E4={R,B1})
            p.first = 71;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={R,B} (Edge indel by adding edge E4={R,B2})
            p.first = 71;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B} (Edge indel by adding edge E4={A,B1})
            p.first = 88;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={A,B} (Edge indel by adding edge E4={A,B2})
            p.first = 88;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={B1,B2} (Edge indel by adding edge E4={B1,B2})
            p.first = 98;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1,B2} (Edge indel by adding edge E4={R,B1,B2})
            p.first = 105;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2} (Edge indel by adding edge E4={A,B1,B2})
            p.first = 106;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,A,B1,B2} (Edge indel by adding edge E4={R,A,B1,B2})
            p.first = 107;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 37: // E1={R,A,B}, E2={R,A,C}, E3={R,B}
			// E2={R,A,B}, E3={R,C} (Edge indel by removing edge E1={R,A,B})
            p.first = 12;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2} (Edge indel by removing edge E3={R,B})
            p.first = 17;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,A} (Edge indel by adding edge E4={R,A})
            p.first = 71;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2} (Edge indel by adding edge E4={R,C})
            p.first = 74;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B} (Edge indel by adding edge E4={A,B})
            p.first = 89;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,C} (Edge indel by adding edge E4={A,C})
            p.first = 99;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A}, E4={R,A,B2} (Edge indel by adding edge E4={R,B,C})
            p.first = 105;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C} (Edge indel by adding edge E4={A,B,C})
            p.first = 108;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,A,B,C} (Edge indel by adding edge E4={R,A,B,C})
            p.first = 109;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 38: // E1={R,A,B}, E2={R,A}, E3={A,B,C}
			// E2={R,A}, E3={A,B,C} (Edge indel by removing edge E1={R,A,B})
            p.first = 13;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={A1,A2,B} (Edge indel by removing edge E2={R,A})
            p.first = 18;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={A1,A2,B}, E4={R,A2} (Edge indel by adding edge E4={R,B})
            p.first = 72;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={R,C} (Edge indel by adding edge E4={R,C})
            p.first = 75;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B} (Edge indel by adding edge E4={A,B})
            p.first = 90;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,C} (Edge indel by adding edge E4={A,C})
            p.first = 93;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={B,C} (Edge indel by adding edge E4={B,C})
            p.first = 100;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A}, E3={A,B1,B2}, E4={R,A,B2} (Edge indel by adding edge E4={R,A,C})
            p.first = 106;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,B}, E3={A,B,C}, E4={R,A,C} (Edge indel by adding edge E4={R,B,C})
            p.first = 108;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={R,A,B,C} (Edge indel by adding edge E4={R,A,B,C})
            p.first = 110;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 39:  // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}
			// E1={R,A,B,C}, E3={R,A} (Edge indel by removing edge E2={R,A,B})
            p.first = 14;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2} (Edge indel by removing edge E3={R,A})
            p.first = 19;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2} (Edge indel by adding edge E4={R,B})
            p.first = 73;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C} (Edge indel by adding edge E4={R,C})
            p.first = 76;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B} (Edge indel by adding edge E4={A,B})
            p.first = 91;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,C} (Edge indel by adding edge E4={A,C})
            p.first = 94;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={B,C} (Edge indel by adding edge E4={B,C})
            p.first = 101;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A}, E4={R,A,B2} (Edge indel by adding edge E4={R,A,C})
            p.first = 107;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A,C} (Edge indel by adding edge E4={R,B,C})
            p.first = 109;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C} (Edge indel by adding edge E4={A,B,C})
            p.first = 110;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 40: // E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B}
			// E2={R,A}, E3={A,B1,B2} (Edge indel by removing edge E1={R,A1,A2})
            p.first = 13;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={A1,A2,B} (Edge indel by removing edge E2={R,B})
            p.first = 18;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,B} (Edge indel by removing edge E3={A1,A2,B})
            p.first = 12;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={R,A} (Edge indel by adding edge E4={R,A1})
            p.first = 75;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={R,A} (Edge indel by adding edge E4={R,A2})
            p.first = 75;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B}, E4={A1,A2} (Edge indel by adding edge E4={A1,A2})
            p.first = 102;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,C} (Edge indel by adding edge E4={A1,B})
            p.first = 92;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,C} (Edge indel by adding edge E4={A2,B})
            p.first = 92;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,C}, E2={R,B}, E3={A,B,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A1,B})
            p.first = 108;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,C}, E2={R,B}, E3={A,B,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A2,B})
            p.first = 108;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B}, E4={R,A1,A2,B} (Edge indel by adding edge E4={R,A1,A2,B})
            p.first = 111;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 41: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}
			// E2={R,A1,A2}, E3={R,B} (Edge indel by removing edge E1={R,A1,A2,B})
            p.first = 12;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A} (Edge indel by removing edge E2={R,A1,A2})
            p.first = 14;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2} (Edge indel by removing edge E3={R,B})
            p.first = 19;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={R,A} (Edge indel by adding edge E4={R,A1})
            p.first = 76;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={R,A} (Edge indel by adding edge E4={R,A2})
            p.first = 76;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2} (Edge indel by adding edge E4={A1,A2})
            p.first = 103;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,C} (Edge indel by adding edge E4={A1,B})
            p.first = 96;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,C} (Edge indel by adding edge E4={A2,B})
            p.first = 96;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={R,A,B} (Edge indel by adding edge E4={R,A1,B})
            p.first = 109;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={R,A,B} (Edge indel by adding edge E4={R,A2,B})
            p.first = 109;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B} (Edge indel by adding edge E4={A1,A2,B})
            p.first = 111;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 42:// E1={R,A,B1,B2}, E2={R,A}, E3={A,B1,B2}
			// E2={R,A}, E3={A,B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
            p.first = 13;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E3={A1,A2,A3} (Edge indel by removing edge E2={R,A})
            p.first = 20;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A} (Edge indel by removing edge E3={A,B1,B2})
            p.first = 14;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={A1,A2,B}, E4={R,A2} (Edge indel by adding edge E4={R,B1})
            p.first = 77;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1}, E3={A1,A2,B}, E4={R,A2} (Edge indel by adding edge E4={R,B2})
            p.first = 77;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,B} (Edge indel by adding edge E4={A,B1})
            p.first = 97;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,B} (Edge indel by adding edge E4={A,B2})
            p.first = 97;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A}, E3={A,B1,B2}, E4={B1,B2} (Edge indel by adding edge E4={B1,B2})
            p.first = 104;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A,B1})
            p.first = 110;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A,B2})
            p.first = 110;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,B}, E3={A1,A2,B}, E4={R,A1,A2} (Edge indel by adding edge E4={R,B1,B2})
            p.first = 111;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 43: // E1={R,A,B}, E2={A,B}, E3={A,C}
			// E1={R,A,B}, E3={B,C} (Edge indel by removing edge E2={A,B})
            p.first = 15;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={A,B}, E3={A,C}, E4={R,A} (Edge indel by adding edge E4={R,A})
            p.first = 79;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={A,B}, E3={B,C}, E4={R,A} (Edge indel by adding edge E4={R,B})
            p.first = 83;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={A,B}, E3={A,C}, E4={R,C} (Edge indel by adding edge E4={R,C})
            p.first = 85;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={A,B1}, E3={A,B2}, E4={R,A,B2} (Edge indel by adding edge E4={R,A,C})
            p.first = 114;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={A,B}, E3={B,C}, E4={R,A,C} (Edge indel by adding edge E4={R,B,C})
            p.first = 115;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={A,B}, E3={B,C}, E4={A,B,C} (Edge indel by adding edge E4={A,B,C})
            p.first = 116;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={A,B}, E3={B,C}, E4={R,A,B,C} (Edge indel by adding edge E4={R,A,B,C})
            p.first = 117;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 44: // E1={R,A1,A2}, E2={A1,B}, E3={A2,B}
			// E1={R,A,B}, E3={B,C} (Edge indel by removing edge E2={A1,B})
            p.first = 15;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={B,C} (Edge indel by removing edge E3={A2,B})
            p.first = 15;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={A,C}, E3={B,C}, E4={R,A} (Edge indel by adding edge E4={R,A1})
            p.first = 84;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={B,C}, E3={A,C}, E4={R,A} (Edge indel by adding edge E4={R,A2})
            p.first = 84;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={A1,B}, E3={A2,B}, E4={R,B} (Edge indel by adding edge E4={R,B})
            p.first = 80;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={A1,B}, E3={A2,B}, E4={A1,A2} (Edge indel by adding edge E4={A1,A2})
            p.first = 112;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,C}, E2={A,B}, E3={B,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A1,B})
            p.first = 115;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,C}, E2={B,C}, E3={A,B}, E4={R,A,B} (Edge indel by adding edge E4={R,A2,B})
            p.first = 115;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, EDGES_ALPHABET[i], e1, e3, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={A1,B}, E3={A2,B}, E4={A1,A2,B} (Edge indel by adding edge E4={A1,A2,B})
            p.first = 118;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={A1,B}, E3={A2,B}, E4={R,A1,A2,B} (Edge indel by adding edge E4={R,A1,A2,B})
            p.first = 119;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 45: // E1={R,A,B1,B2}, E2={A,B1}, E3={A,B2}
			// E1={R,A,B1,B2}, E3={B1,B2} (Edge indel by removing edge E2={A,B1})
            p.first = 16;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={B1,B2} (Edge indel by removing edge E3={A,B2})
            p.first = 16;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={A,B1}, E3={A,B2}, E4={R,A} (Edge indel by adding edge E4={R,A})
            p.first = 82;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={A,B}, E3={B,C}, E4={R,A} (Edge indel by adding edge E4={R,B1})
            p.first = 87;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={B,C}, E3={A,B}, E4={R,A} (Edge indel by adding edge E4={R,B2})
            p.first = 87;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, EDGES_ALPHABET[i], e3, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={A,B1}, E3={A,B2}, E4={B1,B2} (Edge indel by adding edge E4={B1,B2})
            p.first = 113;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={A,B}, E3={B,C}, E4={R,A,B} (Edge indel by adding edge E4={R,A,B1})
            p.first = 117;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={B,C}, E3={A,B}, E4={R,A,B} (Edge indel by adding edge E4={R,A,B2})
            p.first = 117;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, EDGES_ALPHABET[i], e3, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={A1,B}, E3={A2,B}, E4={R,A1,A2} (Edge indel by adding edge E4={R,B1,B2})
            p.first = 119;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={A,B1}, E3={A,B2}, E4={A,B1,B2} (Edge indel by adding edge E4={A,B1,B2})
            p.first = 120;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 46: // E1={R,A,B}, E2={R,A,C}, E3={A,B}
			// E2={R,A,B}, E3={B,C} (Edge indel by removing edge E1={R,A,B})
            p.first = 15;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2} (Edge indel by removing edge E3={A,B})
            p.first = 17;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={A,B}, E4={R,A} (Edge indel by adding edge E4={R,A})
            p.first = 88;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A,C}, E3={A,B}, E4={R,B} (Edge indel by adding edge E4={R,B})
            p.first = 89;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,C}, E2={R,A,B}, E3={B,C}, E4={R,B} (Edge indel by adding edge E4={R,C})
            p.first = 99;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={A,B1}, E4={A,B2} (Edge indel by adding edge E4={A,C})
            p.first = 114;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A,C}, E3={A,B}, E4={B,C} (Edge indel by adding edge E4={B,C})
            p.first = 115;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,A1,B}, E3={A1,A2}, E4={R,A2,B} (Edge indel by adding edge E4={R,B,C})
            p.first = 121;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A,C}, E3={A,B}, E4={A,B,C} (Edge indel by adding edge E4={A,B,C})
            p.first = 122;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A,C}, E3={A,B}, E4={R,A,B,C} (Edge indel by adding edge E4={R,A,B,C})
            p.first = 123;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 47: // E1={R,A1,A2}, E2={A1,A2,B}, E3={A1,A2}
			// E1={R,A1,A2}, E2={A1,A2,B} (Edge indel by removing edge E3={A1,A2})
			p.first = 18;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={A,B,C}, E3={A,B}, E4={R,A} (Edge indel by adding edge E4={R,A1})
			p.first = 90;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={A,B,C}, E3={A,B}, E4={R,A} (Edge indel by adding edge E4={R,A2})
			p.first = 90;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={A1,A2,B}, E3={A1,A2}, E4={R,B} (Edge indel by adding edge E4={R,B})
			p.first = 102;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={A,B,C}, E3={A,B}, E4={B,C} (Edge indel by adding edge E4={A1,B})
			p.first = 116;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={A,B,C}, E3={A,B}, E4={B,C} (Edge indel by adding edge E4={A2,B})
			p.first = 116;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={A,B,C}, E3={A,B}, E4={R,A,B} (Edge indel by adding edge E4={R,A1,B})
			p.first = 122;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={A,B,C}, E3={A,B}, E4={R,A,B} (Edge indel by adding edge E4={R,A2,B})
			p.first = 122;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={A1,A2,B}, E3={A1,A2}, E4={R,A1,A2,B} (Edge indel by adding edge E4={R,A1,A2,B})
			p.first = 124;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 48: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2}
			// E1={R,A,B1,B2}, E3={B1,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 16;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2} (Edge indel by removing edge E3={A1,A2})
			p.first = 19;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={A,B,C}, E3={A,B}, E4={R,A} (Edge indel by adding edge E4={R,A1})
			p.first = 91;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={A,B,C}, E3={A,B}, E4={R,A} (Edge indel by adding edge E4={R,A2})
			p.first = 91;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2}, E4={R,B} (Edge indel by adding edge E4={R,B})
			p.first = 103;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B}, E4={A,C} (Edge indel by adding edge E4={A1,B})
			p.first = 117;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B}, E4={A,C} (Edge indel by adding edge E4={A2,B})
			p.first = 117;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B}, E4={R,A,C} (Edge indel by adding edge E4={R,A1,B})
			p.first = 123;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B}, E4={R,A,C} (Edge indel by adding edge E4={R,A2,B})
			p.first = 123;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2}, E4={A1,A2,B} (Edge indel by adding edge E4={A1,A2,B})
			p.first = 124;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 49: // E1={R,A,B1}, E2={R,A,B2}, E3={B1,B2}
			// E2={R,A,B}, E3={B,C} (Edge indel by removing edge E1={R,A,B1})
			p.first = 15;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={B,C} (Edge indel by removing edge E1={R,A,B2}) 
			p.first = 15;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2} (Edge indel by removing edge E3={B1,B2})
			p.first = 17;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			
			// E1={R,A,B1}, E2={R,A,B2}, E3={B1,B2}, E4={R,A} (Edge indel by adding edge E4={R,A})
			p.first = 98;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A,C}, E3={B,C}, E4={R,B} (Edge indel by adding edge E4={R,B1})
			p.first = 92;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,C}, E2={R,A,B}, E3={B,C}, E4={R,B} (Edge indel by adding edge E4={R,B2})
			p.first = 92;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A,C}, E3={B,C}, E4={A,B} (Edge indel by adding edge E4={A,B1})
			p.first = 115;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,C}, E2={R,A,B}, E3={B,C}, E4={A,B} (Edge indel by adding edge E4={A,B2})
			p.first = 115;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,B}, E2={R,A2,B}, E3={A1,A2}, E4={R,A1,A2} (Edge indel by adding edge E4={R,B1,B2}) 
			p.first = 121;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={B1,B2}, E4={A,B1,B2} (Edge indel by adding edge E4={A,B1,B2})
			p.first = 125;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={B1,B2}, E4={R,A,B1,B2} (Edge indel by adding edge E4={R,A,B1,B2})
			p.first = 126;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 50: // E1={R,A,B}, E2={A,B,C}, E3={B,C}
			// E1={R,A,B}, E3={B,C} (Edge indel by removing edge E2={A,B,C})
			p.first = 15;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={A1,A2,B} (Edge indel by removing edge E3={B,C})
			p.first = 18;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={A,B,C}, E3={B,C}, E4={R,A} (Edge indel by adding edge E4={R,A})
			p.first = 100;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={A,B,C}, E3={A,C}, E4={R,A} (Edge indel by adding edge E4={R,B})
			p.first = 93;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={A,B,C}, E3={A,C}, E4={R,C} (Edge indel by adding edge E4={R,C})
			p.first = 95;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={A,B,C}, E3={B,C}, E4={A,B} (Edge indel by adding edge E4={A,B})
			p.first = 116;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={A1,A2,B}, E3={A2,B}, E4={A1,B} (Edge indel by adding edge E4={A,C})
			p.first = 118;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={A,B1,B2}, E3={B1,B2}, E4={R,A,B2} (Edge indel by adding edge E4={R,A,C})
			p.first = 125;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,C}, E2={A,B,C}, E3={A,B}, E4={R,A,B} (Edge indel by adding edge E4={R,B,C})
			p.first = 122;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={A,B,C}, E3={A,C}, E4={R,A,B,C} (Edge indel by adding edge E4={R,A,B,C})
			p.first = 127;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 51: // E1={R,A,B,C}, E2={R,A,B}, E3={B,C}
        	// E2={R,A,B}, E3={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 15;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={B1,B2} (Edge indel by removing edge  E2={R,A,B})
			p.first = 16;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2} (Edge indel by removing edge  E3={B,C})
			p.first = 19;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={B,C}, E4={R,A} (Edge indel by adding edge E4={R,A})
			p.first = 101;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,C}, E4={R,A} (Edge indel by adding edge E4={R,B})
			p.first = 94;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,C}, E4={R,C} (Edge indel by adding edge E4={R,C})
			p.first = 96;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={B,C}, E4={A,B} (Edge indel by adding edge E4={A,B})
			p.first = 117;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A2,B}, E4={A1,B} (Edge indel by adding edge E4={A,C})
			p.first = 119;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={B1,B2}, E4={R,A,B2} (Edge indel by adding edge E4={R,A,C})
			p.first = 126;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,C}, E3={A,B}, E4={R,A,B} (Edge indel by adding edge E4={R,B,C})
			p.first = 123;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={B,C}, E4={A,B,C} (Edge indel by adding edge E4={A,B,C})
			p.first = 127;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

		case 52: // E1={R,A1,A2,B}, E2={A1,A2,B}, E3={A1,A2}
			// E1={R,A,B1,B2}, E3={B1,B2} (Edge indel by removing edge E2={A1,A2,B})
			p.first = 16;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={A1,A2,A3} (Edge indel by removing edge E3={A1,A2})
			p.first = 20;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={A,B,C}, E3={A,B}, E4={R,A} (Edge indel by adding edge E4={R,A1})
			p.first = 97;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={A,B,C}, E3={A,B}, E4={R,A} (Edge indel by adding edge E4={R,A2})
			p.first = 97;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={A,B1,B2}, E3={B1,B2}, E4={R,A} (Edge indel by adding edge E4={R,B})
			p.first = 104;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={A,B1,B2}, E3={A,B1}, E4={A,B2} (Edge indel by adding edge E4={A1,B})
			p.first = 120;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={A,B1,B2}, E3={A,B1}, E4={A,B2} (Edge indel by adding edge E4={A2,B})
			p.first = 120;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={A1,A2,B}, E3={A1,A2}, E4={R,A1,A2} (Edge indel by adding edge E4={R,A1,A2})
			p.first = 124;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={A,B,C}, E3={A,C}, E4={R,A,C} (Edge indel by adding edge E4={R,A1,B})
			p.first = 127;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={A,B,C}, E3={A,C}, E4={R,A,C} (Edge indel by adding edge E4={R,A2,B})
			p.first = 127;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 53: // E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}
			// E2={R,A,B1}, E3={R,A,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 17;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E3={R,A,B2} (Edge indel by removing edge E2={R,A1,A3})
			p.first = 17;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2} (Edge indel by removing edge E3={R,A2,A3})
			p.first = 17;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A} (Edge indel by adding edge E4={R,A1})
			p.first = 105;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E4={R,A} (Edge indel by adding edge E4={R,A2})
			p.first = 105;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A} (Edge indel by adding edge E4={R,A3})
			p.first = 105;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e1, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={A1,A2} (Edge indel by adding edge E4={A1,A2})
			p.first = 121;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={A1,A2} (Edge indel by adding edge E4={A1,A3})
			p.first = 121;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,A1,A2}, E4={A1,A2} (Edge indel by adding edge E4={A2,A3})
			p.first = 121;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e3, e1, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={A1,A2,A3} (Edge indel by adding edge E4={A1,A2,A3})
			p.first = 128;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1,A2,A3} (Edge indel by adding edge E1={R,A1,A2,A3})
			p.first = 129;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 54: // E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}
        	// E2={R,A1,A2}, E3={A1,A2,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 18;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={A1,A2,B} (Edge indel by removing edge E2={R,A,B2})
			p.first = 18;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2} (Edge indel by removing edge E3={A,B1,B2})
			p.first = 17;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={R,A} (Edge indel by adding edge E4={R,A})
			p.first = 106;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={R,B} (Edge indel by adding edge E4={R,B1})
			p.first = 108;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,C}, E2={R,A,B}, E3={A,B,C}, E4={R,B} (Edge indel by adding edge E4={R,B2})
			p.first = 108;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={A,B} (Edge indel by adding edge E4={A,B1})
			p.first = 122;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,C}, E2={R,A,B}, E3={A,B,C}, E4={A,B} (Edge indel by adding edge E4={A,B2})
			p.first = 122;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={B1,B2} (Edge indel by adding edge E4={B1,B2})
			p.first = 125;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={A1,A2,A3}, E4={R,A2,A3} (Edge indel by adding edge E4={R,B1,B2})
			p.first = 128;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={R,A,B1,B2} (Edge indel by adding edge E4={R,A,B1,B2})
			p.first = 130;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 55: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}
        	// E2={R,A,B1}, E3={R,A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 17;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1,A2} (Edge indel by removing edge E2={R,A,B1})
			p.first = 19;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2} (Edge indel by removing edge E3={R,A,B2})
			p.first = 19;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A} (Edge indel by adding edge E4={R,A})
			p.first = 107;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B} (Edge indel by adding edge E4={R,B})
			p.first = 109;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B} (Edge indel by adding edge E4={R,C})
			p.first = 109;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B1} (Edge indel by adding edge E4={A,B1})
			p.first = 123;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={A,B2} (Edge indel by adding edge E4={A,B2})
			p.first = 123;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={B1,B2} (Edge indel by adding edge E4={B1,B2})
			p.first = 126;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A2,A3} (Edge indel by adding edge E4={R,B1,B2})
			p.first = 129;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2} (Edge indel by adding edge E4={A,B1,B2})
			p.first = 130;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;
		
		case 56: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B}
        	// E2={R,A1,A2}, E3={A1,A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 18;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E3={A1,A2,A3} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 20;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2} (Edge indel by removing edge E3={A1,A2,B})
			p.first = 19;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={R,A} (Edge indel by adding edge E4={R,A1})
			p.first = 110;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={R,A} (Edge indel by adding edge E4={R,A2})
			p.first = 110;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B}, E4={R,B} (Edge indel by adding edge E4={R,B})
			p.first = 111;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,A2} (Edge indel by adding edge E4={A1,A2})
			p.first = 124;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,C} (Edge indel by adding edge E4={A1,B})
			p.first = 127;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,C} (Edge indel by adding edge E4={A2,B})
			p.first = 127;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={A,B1,B2}, E4={R,A,B2} (Edge indel by adding edge E4={R,A1,B})
			p.first = 130;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={A,B1,B2}, E4={R,A,B2} (Edge indel by adding edge E4={R,A2,B})
			p.first = 130;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;
		
		case 57: // E1={R,A1}, E2={R,A2}, E3={R,B}, E4={A1,A2}
			// E2={R,B}, E3={R,A}, E4={B,C} (Edge indel by removing edge E1={R,A1})
			p.first = 22;
			p.second = create_permutations_subset(mismatches, root, c, b, a, p.first, e3, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,B}, E3={R,A}, E4={B,C} (Edge indel by removing edge E2={R,A2})
			p.first = 22;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e3, e1, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			
			// E1={R,A1}, E2={R,A2}, E3={R,A3} (Edge indel by removing edge E4={A1,A2})
			p.first = 21;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			
			// E1={R,A}, E2={R,B1}, E3={R,B2}, E4={A,B1}, E5={A,B2} (Edge indel by adding edge E5={A1,B})
			p.first = 131;
			for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

            // E1={R,B1}, E2={R,A}, E3={R,B2}, E4={A,B1}, E5={A,B2} (Edge indel by adding edge E5={A2,B})
            p.first = 131;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={R,C}, E4={A1,A2}, E5={R,A1,A2} (Edge indel by adding edge E5={R,A1,A2})
            p.first = 132;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,B}, E2={R,C}, E3={R,A}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A1,B})
            p.first = 133;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, EDGES_ALPHABET[i], e3, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,C}, E2={R,B}, E3={R,A}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A2,B})
            p.first = 133;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, b, a, p.first, EDGES_ALPHABET[i], e3, e2, e1, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={R,B}, E4={A1,A2}, E5={A1,A2,B} (Edge indel by adding edge E5={A1,A2,B})
            p.first = 134;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={R,B}, E4={A1,A2}, E5={R,A1,A2,B} (Edge indel by adding edge E5={R,A1,A2,B})
            p.first = 135;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 58: // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,C}
            // E2={R,A1}, E3={R,A2}, E4={R,A3} (Edge indel by removing edge E1={R,A1,A2})
            p.first = 21;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,A}, E4={R,C} (Edge indel by removing edge E2={R,A1})
            p.first = 23;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E4={R,C} (Edge indel by removing edge E3={R,A2})
            p.first = 23;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,C}, E5={A1,A2} (Edge indel by adding edge E5={A1,A2})
            p.first = 132;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E5={B,C} (Edge indel by adding edge E5={A1,C})
            p.first = 133;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={B,C} (Edge indel by adding edge E5={A2,C})
            p.first = 133;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A}, E3={R,B1}, E4={R,B2}, E5={R,A,B2} (Edge indel by adding edge E5={R,A1,B})
            p.first = 136;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,B1}, E3={R,A}, E4={R,B2}, E2={R,A,B2} (Edge indel by adding edge E5={R,A2,B})
            p.first = 136;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B} (Edge indel by adding edge E5={A1,A2,C})
            p.first = 137;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={R,A1,A2,B} (Edge indel by adding edge E5={R,A1,A2,C})
            p.first = 138;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 59: // E1={R,A1}, E2={R,A2}, E3={R,A3}, E4={A1,A2,A3}
            // E2={R,A1}, E3={R,A2}, E4={A1,A2,B} (Edge indel by removing edge E1={R,A1})
            p.first = 24;
            p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E3={R,A2}, E4={A1,A2,B} (Edge indel by removing edge E2={R,A2})
            p.first = 24;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={R,A2}, E4={A1,A2,B} (Edge indel by removing edge E3={R,A3})
            p.first = 24;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={R,A2}, E3={R,A3} (Edge indel by removing edge E4={A1,A2,A3})
            p.first = 21;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={R,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by adding edge E5={A1,A2})
            p.first = 134;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,B}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by adding edge E5={A1,A3})
            p.first = 134;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by adding edge E5={A2,A3})
            p.first = 134;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e2, e3, e1, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={R,B}, E4={A1,A2,B}, E5={R,A1,A2} (Edge indel by adding edge E1={R,A1,A2})
            p.first = 137;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,B}, E3={R,A2}, E4={A1,A2,B}, E5={R,A1,A2} (Edge indel by adding edge E1={R,A1,A3})
            p.first = 137;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e3, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={R,A1,A2} (Edge indel by adding edge E1={R,A2,A3})
            p.first = 137;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e2, e3, e1, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={R,A3}, E4={A1,A2,A3}, E1={R,A1,A2,A3} (Edge indel by adding edge E1={R,A1,A2,A3})
            p.first = 139;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 60: // E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={R,A3}
            // E2={R,A1}, E3={R,A2}, E4={R,A3} (Edge indel by removing edge E1={R,A1,A2,A3})
            p.first = 21;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2} (Edge indel by removing edge E2={R,A1})
            p.first = 25;
            p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1}, E4={R,A2} (Edge indel by removing edge E3={R,A2})
            p.first = 25;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2} (Edge indel by removing edge E4={R,A3})
            p.first = 25;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2} (Edge indel by adding edge E5={A1,A2})
            p.first = 135;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,B}, E4={R,A2}, E5={A1,A2} (Edge indel by adding edge E5={A1,A3})
            p.first = 135;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e4, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2} (Edge indel by adding edge E5={A2,A3})
            p.first = 135;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e3, e4, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={R,A1,A2} (Edge indel by adding edge E2={R,A1,A2})
            p.first = 138;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,B}, E4={R,A2}, E5={R,A1,A2} (Edge indel by adding edge E2={R,A1,A3})
            p.first = 138;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,B}, E3={R,A1}, E4={R,A2}, E5={R,A1,A2} (Edge indel by adding edge E2={R,A2,A3})
            p.first = 138;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e4, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={R,A3}, E5={A1,A2,A3} (Edge indel by adding edge E5={A1,A2,A3})
            p.first = 139;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 61: // E1={R,A}, E2={R,B}, E3={A,B}, E4={B,C}
            // E2={R,A}, E3={A,B1}, E4={A,B2} (Edge indel by removing edge E1={R,A})
            p.first = 26;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E3={A,B}, E4={B,C} (Edge indel by removing edge E2={R,B})
            p.first = 27;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E2={R,B}, E4={B,C} (Edge indel by removing edge E3={A,B})
            p.first = 22;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,B}, E2={R,A}, E3={A,B1}, E4={A,B2}, E5={R,B2} (Edge indel by adding edge E5={R,C})
            p.first = 131;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e1, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={A1,A2}, E4={A2,B}, E5={A1,B} (Edge indel by adding edge E5={A,C})
            p.first = 140;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,B}, E3={A,B}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A,B})
            p.first = 141;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,C}, E3={A,C}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A,C})
            p.first = 143;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,C}, E2={R,A}, E3={A,C}, E4={A,B}, E5={R,A,B}, (Edge indel by adding edge E5={R,B,C})
            p.first = 142;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e2, e1, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,B}, E3={A,B}, E4={B,C}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 144;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,B}, E3={A,B}, E4={B,C}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 145;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 62: // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,C}
            // E1={R,A,B}, E3={R,C}, E4={B,C} (Edge indel by removing edge E2={R,A})
            p.first = 29;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,B}, E4={B,C} (Edge indel by removing edge E3={R,C})
            p.first = 28;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,C} (Edge indel by removing edge E4={A,C})
            p.first = 23;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,B}, E3={R,C}, E4={B,C}, E3={R,A} (Edge indel by adding edge E5={R,B})
            p.first = 133;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,C}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 142;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,C}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 143;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A}, E3={R,B}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E5={R,A,C})
            p.first = 146;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,B1}, E3={R,B2}, E4={B1,B2}, E5={R,A,B2} (Edge indel by adding edge E5={R,B,C})
            p.first = 149;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,C}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 150;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,C}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 151;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 63: // E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={A1,A2}
            // E2={R,A}, E3={A,B,C}, E4={A,B} (Edge indel by removing edge E1={R,A1})
            p.first = 30;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E3={A,B,C}, E4={A,B} (Edge indel by removing edge E2={R,A2})
            p.first = 30;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={R,A2}, E3={A1,A2,B} (Edge indel by removing edge E4={A1,A2})
            p.first = 24;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={A1,A2}, E5={R,B} (Edge indel by adding edge E5={R,B})
            p.first = 134;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C} (Edge indel by adding edge E5={A1,B})
            p.first = 144;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={B,C} (Edge indel by adding edge E5={A2,B})
            p.first = 144;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={A1,A2}, E5={R,A1,A2} (Edge indel by adding edge E5={R,A1,A2})
            p.first = 147;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,C}, E3={A,B,C}, E4={A,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A1,B})
            p.first = 150;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,C}, E2={R,A}, E3={A,B,C}, E4={A,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A2,B})
            p.first = 150;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e2, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={A1,A2}, E5={R,A1,A2,B} (Edge indel by adding edge E5={R,A1,A2,B})
            p.first = 152;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 64: // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2}
            // E1={R,A,B,C}, E3={R,A}, E4={A,B} (Edge indel by removing edge E2={R,A1})
            p.first = 31;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A}, E4={A,B} (Edge indel by removing edge E3={R,A2})
            p.first = 31;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2} (Edge indel by removing edge E4={A1,A2})
            p.first = 25;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2}, E5={R,B} (Edge indel by adding edge E5={R,C})
            p.first = 135;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,B}, E3={R,A}, E4={A,B}, E5={A,C} (Edge indel by adding edge E5={A1,B})
            p.first = 145;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={A,B}, E5={A,C} (Edge indel by adding edge E5={A2,B})
            p.first = 145;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2}, E5={R,A1,A2} (Edge indel by adding edge E5={R,A1,A2})
            p.first = 148;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={R,C}, E4={A,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A1,B})
            p.first = 151;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,C}, E3={R,A}, E4={A,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A2,B})
            p.first = 151;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2}, E5={A1,A2,B} (Edge indel by adding edge E5={A1,A2,B})
            p.first = 152;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 65: // E1={R,A1}, E2={R,A2}, E3={A1,B}, E4={A2,B}
            // E2={R,A}, E3={B,C}, E4={A,B} (Edge indel by removing edge E1={R,A1})
            p.first = 27;
            p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E3={A,B}, E4={B,C} (Edge indel by removing edge E2={R,A2})
            p.first = 27;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E2={R,B}, E4={B,C} (Edge indel by removing edge E3={A1,B})
            p.first = 22;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,B}, E2={R,A}, E3={B,C} (Edge indel by removing edge E4={A2,B})
            p.first = 22;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e1, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,B1}, E2={R,B2}, E3={A,B1}, E4={A,B2}, E5={R,A} (Edge indel by adding edge E5={R,B})
            p.first = 131;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, b, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={A1,B}, E4={A2,B}, E5={A1,A2} (Edge indel by adding edge E5={A1,A2})
            p.first = 140;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={A1,B}, E4={A2,B}, E5={R,A1,A2} (Edge indel by adding edge E5={R,A1,A2})
            p.first = 153;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,C}, E3={A,B}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A1,B})
            p.first = 154;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,C}, E2={R,A}, E3={B,C}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E5={R,A2,B})
            p.first = 154;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e2, e1, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={A1,B}, E4={A2,B}, E5={A1,A2,B} (Edge indel by adding edge E5={A1,A2,B})
            p.first = 155;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={A1,B}, E4={A2,B}, E5={R,A1,A2,B} (Edge indel by adding edge E5={R,A1,A2,B})
            p.first = 156;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 66: // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={B,C}
            // E2={R,A}, E3={R,B}, E4={B,C} (Edge indel by removing edge E1={R,A,B})
            p.first = 22;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,B}, E4={B,C} (Edge indel by removing edge E2={R,A})
            p.first = 28;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E4={B,C} (Edge indel by removing edge E3={R,B})
            p.first = 32;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={B,C}, E5={R,C} (Edge indel by adding edge E4={R,C})
            p.first = 133;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={B,C}, E5={A,B} (Edge indel by adding edge E4={A,B})
            p.first = 141;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A2,B}, E5={A1,B} (Edge indel by adding edge E4={A,C})
            p.first = 153;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={B,C}, E5={R,A,C} (Edge indel by adding edge E2={R,A,C})
            p.first = 158;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={R,A}, E4={A,C}, E5={R,A,C} (Edge indel by adding edge E2={R,B,C})
            p.first = 157;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            //E1={R,A,B}, E2={R,A}, E3={R,B}, E4={B,C}, E5={A,B,C} (Edge indel by adding edge E4={A,B,C})
            p.first = 159;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={B,C}, E5={R,A,B,C} (Edge indel by adding edge E1={R,A,B,C})
            p.first = 160;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 67: // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}
            // E2={R,B}, E3={R,A}, E4={B,C} (Edge indel by removing edge E1={R,A,B})
            p.first = 22;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e3, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E3={R,B}, E4={A1,A2} (Edge indel by removing edge E2={R,A})
            p.first = 33;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,C} (Edge indel by removing edge E4={A,B})
            p.first = 23;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1}, E3={R,B}, E4={A1,A2}, E5={R,A2} (Edge indel by adding edge E5={R,B})
            p.first = 132;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={A,C} (Edge indel by adding edge E5={A,C})
            p.first = 142;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 154;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A}, E3={R,B}, E4={A,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A,C})
            p.first = 157;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={R,C}, E4={A,B}, E5={R,A,C} (Edge indel by adding edge E5={R,B,C})
            p.first = 161;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 162;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 163;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 68: // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={B,C}
            // E2={R,A}, E3={R,B}, E4={B,C} (Edge indel by removing edge E1={R,A,B})
            p.first = 22;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,C}, E4={B,C} (Edge indel by removing edge E2={R,A})
            p.first = 29;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E4={B,C} (Edge indel by removing edge E3={R,C})
            p.first = 32;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,C} (Edge indel by removing edge E4={B,C})
            p.first = 23;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={B,C}, E5={R,B} (Edge indel by adding edge E5={R,B})
            p.first = 133;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={B,C}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 154;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={B,C}, E5={A,C} (Edge indel by adding edge E5={A,C})
            p.first = 143;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A}, E3={R,B}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A,C})
            p.first = 158;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,C}, E3={R,B}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E5={R,B,C})
            p.first = 161;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e3, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={B,C}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 164;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={B,C}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 165;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 69: // E1={R,A}, E2={R,B}, E3={A,B,C}, E4={B,C}
            // E2={R,A}, E3={A,B,C}, E4={A,B} (Edge indel by removing edge E1={R,A})
            p.first = 30;
            p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E3={A,B1,B2}, E4={B1,B2} (Edge indel by removing edge E2={R,B})
            p.first = 34;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E2={R,B}, E4={B,C} (Edge indel by removing edge E3={A,B,C})
            p.first = 22;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={R,A2}, E3={A1,A2,B} (Edge indel by removing edge E4={B,C})
            p.first = 24;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,B}, E2={R,A1}, E3={A1,A2,B}, E4={A1,A2}, E5={R,A2} (Edge indel by adding edge E5={R,C})
            p.first = 134;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e2, EDGES_ALPHABET[i], e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,B}, E3={A,B,C}, E4={B,C}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 144;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={B,C}, E5={A,C} (Edge indel by adding edge E5={A,C})
            p.first = 155;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,B}, E3={A,B,C}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A,B})
            p.first = 159;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,C}, E3={A,B,C}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A,C})
            p.first = 164;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,C}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E5={R,B,C})
            p.first = 162;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e2, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,B}, E3={A,B,C}, E4={B,C}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 166;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 70: // E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={B,C}
            // E2={R,A}, E3={R,B}, E4={B,C} (Edge indel by removing edge E5={R,A,B,C})
            p.first = 22;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E3={R,A}, E4={A,B} (Edge indel by removing edge E5={R,A})
            p.first = 31;
            p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,A}, E4={B1,B2} (Edge indel by removing edge E5={R,B})
            p.first = 35;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2} (Edge indel by removing edge E5={B,C})
            p.first = 25;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,B}, E3={R,A1}, E4={A1,A2}, E5={R,A2} (Edge indel by adding edge E5={R,C})
            p.first = 135;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e3, EDGES_ALPHABET[i], e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={B,C}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 145;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A2,B}, E5={A1,B} (Edge indel by adding edge E5={A,C})
            p.first = 156;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A,B})
            p.first = 160;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={R,C}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A,C})
            p.first = 165;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,C}, E3={R,A}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E5={R,B,C})
            p.first = 163;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={B,C}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 166;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 71: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}
            // E2={R,A,B}, E3={R,A}, E4={R,C} (Edge indel by removing edge E1={R,A,B})
            p.first = 23;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E4={R,B} (Edge indel by removing edge E3={R,A})
            p.first = 37;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,A} (Edge indel by removing edge E4={R,B})
            p.first = 36;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2} (Edge indel by adding edge E5={R,C})
            p.first = 136;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 146;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,C} (Edge indel by adding edge E5={A,C})
            p.first = 157;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 158;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1,B}, E3={R,A1}, E4={R,A2}, E5={R,A2,B} (Edge indel by adding edge E5={R,B,C})
            p.first = 167;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 168;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 169;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 72: // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}
            // E2={R,A1}, E3={R,A2}, E4={A1,A2,B} (Edge indel by removing edge E1={R,A1,A2})
            p.first = 24;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,A}, E4={A,B,C} (Edge indel by removing edge E2={R,A1})
            p.first = 38;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E4={A,B,C} (Edge indel by removing edge E3={R,A2})
            p.first = 38;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={R,B} (Edge indel by adding edge E5={R,B})
            p.first = 137;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by adding edge E5={A1,A2})
            p.first = 147;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={R,A}, E4={A,B,C}, E5={B,C} (Edge indel by adding edge E5={A1,B})
            p.first = 159;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={B,C} (Edge indel by adding edge E5={A2,B})
            p.first = 159;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={R,A,C} (Edge indel by adding edge E5={R,A1,B})
            p.first = 168;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={R,A}, E4={A,B,C}, E5={R,A,C} (Edge indel by adding edge E5={R,A2,B})
            p.first = 168;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={R,A1,A2,B} (Edge indel by adding edge E5={R,A1,A2,B})
            p.first = 170;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 73: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}
            // E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2} (Edge indel by removing edge E2={R,A1,A2})
            p.first = 25;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,C}, E2={R,A1,A2}, E4={R,A2} (Edge indel by removing edge E3={R,A1})
            p.first = 39;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,C}, E2={R,A1,A2}, E3={R,A1} (Edge indel by removing edge E4={R,A2})
            p.first = 39;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B} (Edge indel by adding edge E5={R,B})
            p.first = 138;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2} (Edge indel by adding edge E5={A1,A2})
            p.first = 148;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={B,C} (Edge indel by adding edge E5={A1,B})
            p.first = 160;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={B,C} (Edge indel by adding edge E5={A2,B})
            p.first = 160;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,A,C} (Edge indel by adding edge E3={R,A1,B})
            p.first = 169;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,A,C} (Edge indel by adding edge E3={R,A2,B})
            p.first = 169;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B} (Edge indel by adding edge E5={A1,A2,B})
            p.first = 170;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 74: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}
            // E2={R,A,B}, E3={R,B1}, E4={R,B2} (Edge indel by removing edge E1={R,A,B1})
            p.first = 23;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E3={R,B1}, E4={R,B2} (Edge indel by removing edge E2={R,A,B2})
            p.first = 23;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E4={R,B2} (Edge indel by removing edge E3={R,B1})
            p.first = 37;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1} (Edge indel by removing edge E4={R,B2})
            p.first = 27;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 136;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B} (Edge indel by adding edge E5={A,B1})
            p.first = 161;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A,B}, E3={R,C}, E4={R,B}, E5={A,B} (Edge indel by adding edge E5={A,B2})
            p.first = 161;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={B1,B2} (Edge indel by adding edge E5={B1,B2})
            p.first = 149;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,B}, E2={R,A2,B}, E3={R,A1}, E4={R,A2}, E5={R,A1,A2} (Edge indel by adding edge E5={R,B1,B2})
            p.first = 167;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2} (Edge indel by adding edge E5={A,B1,B2})
            p.first = 171;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={R,A,B1,B2} (Edge indel by adding edge E5={R,A,B1,B2})
            p.first = 172;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 75: // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}
            // E2={R,A1}, E3={R,A2}, E4={A1,A2,B} (Edge indel by removing edge E1={R,A,B})
            p.first = 24;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E3={R,B}, E4={A1,A2,B} (Edge indel by removing edge E2={R,A})
            p.first = 40;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E4={A,B,C} (Edge indel by removing edge E3={R,C})
            p.first = 38;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,C} (Edge indel by removing edge E4={A,B,C})
            p.first = 23;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1}, E3={R,B}, E4={A1,A2,B}, E5={R,A2} (Edge indel by adding edge E5={R,B})
            p.first = 137;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 162;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,C} (Edge indel by adding edge E5={A,C})
            p.first = 150;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 164;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A,C})
            p.first = 168;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,B1}, E3={R,B2}, E4={A,B1,B2}, E5={R,A,B2} (Edge indel by adding edge E5={R,B,C})
            p.first = 171;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 173;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 76: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}
            // E2={R,A,B}, E3={R,A}, E4={R,C} (Edge indel by removing edge E1={R,A,B,C})
            p.first = 23;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2} (Edge indel by removing edge E2={R,A,B})
            p.first = 25;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,B} (Edge indel by removing edge E3={R,A})
            p.first = 41;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A} (Edge indel by removing edge E4={R,C})
            p.first = 39;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,B}, E5={R,A2} (Edge indel by adding edge E5={R,B})
            p.first = 138;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 163;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C} (Edge indel by adding edge E5={A,C})
            p.first = 151;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 165;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,A,B} (Edge indel by adding edge E5={R,A,C})
            p.first = 169;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1}, E4={R,B2}, E5={R,A,B2} (Edge indel by adding edge E5={R,B,C})
            p.first = 172;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 173;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 77: // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}
            // E2={R,A1}, E3={R,A2}, E4={A1,A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
            p.first = 24;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E3={R,A}, E4={A,B1,B2} (Edge indel by removing edge E2={R,A1})
            p.first = 42;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,A}, E4={A,B1,B2} (Edge indel by removing edge E3={R,A2})
            p.first = 42;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2} (Edge indel by removing edge E4={A1,A2,B})
            p.first = 25;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={A1,A2,A3}, E5={R,A3} (Edge indel by adding edge E5={R,B})
            p.first = 139;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by adding edge E5={A1,A2})
            p.first = 152;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,B}, E3={R,A}, E4={A,B,C}, E5={B,C} (Edge indel by adding edge E5={A1,B})
            p.first = 166;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={B,C} (Edge indel by adding edge E5={A2,B})
            p.first = 166;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={R,A1,A2} (Edge indel by adding edge E5={R,A1,A2})
            p.first = 170;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A1,B})
            p.first = 173;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,C}, E3={R,A}, E4={A,B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A2,B})
            p.first = 173;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 78: // E1={R,A}, E2={A,B1}, E3={A,B2}, E4={B1,B2}
            // E1={R,A}, E3={A,B}, E4={B,C} (Edge indel by removing edge E2={A,B1})
            p.first = 27;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E2={A,B}, E4={B,C} (Edge indel by removing edge E3={A,B2})
            p.first = 27;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E2={A,B1}, E3={A,B2} (Edge indel by removing edge E4={B1,B2})
            p.first = 26;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={A1,A2}, E3={A1,B}, E4={A2,B}, E5={R,A2} (Edge indel by adding edge E2={R,B1})
            p.first = 140;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={A1,B}, E3={A1,A2}, E4={A2,B}, E5={R,A2} (Edge indel by adding edge E2={R,B2})
            p.first = 140;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={A,B}, E3={A,C}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E1={R,A,B1})
            p.first = 174;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={A,C}, E3={A,B}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E1={R,A,B2})
            p.first = 174;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e3, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,B}, E2={A1,B}, E3={A2,B}, E4={A1,A2}, E5={R,A1,A2} (Edge indel by adding edge E1={R,B1,B2})
            p.first = 175;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e4, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={A,B1}, E3={A,B2}, E4={B1,B2}, E5={A,B1,B2} (Edge indel by adding edge E2={A,B1,B2})
            p.first = 176;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={A,B1}, E3={A,B2}, E4={B1,B2}, E5={R,A,B1,B2} (Edge indel by adding edge E1={R,A,B1,B2})
            p.first = 177;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 79: // E1={R,A,B}, E2={R,A}, E3={A,B}, E4={A,C}
            // E2={R,A}, E3={A,B1}, E4={A,B2} (Edge indel by removing edge E1={R,A,B})
            p.first = 26;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={A,B}, E4={A,C} (Edge indel by removing edge E2={R,A})
            p.first = 43;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,B}, E4={B,C} (Edge indel by removing edge E3={A,B})
            p.first = 28;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,B}, E3={A,B}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,B})
            p.first = 141;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B}, E4={A,C}, E5={R,C} (Edge indel by adding edge E5={R,C})
            p.first = 142;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B}, E4={A,C}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 174;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A}, E3={A,B1}, E4={A,B2}, E5={R,A,B2} (Edge indel by adding edge E5={R,A,C})
            p.first = 178;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={A,B}, E4={B,C}, E5={R,A,C} (Edge indel by adding edge E5={R,B,C})
            p.first = 179;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B}, E4={A,C}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 180;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B}, E4={A,C}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 181;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 80: // E1={R,A1,A2}, E2={R,B}, E3={A1,B}, E4={A2,B}
            // E2={R,A}, E3={A,B1}, E4={A,B2} (Edge indel by removing edge E1={R,A1,A2})
            p.first = 26;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E3={A1,B}, E4={A2,B} (Edge indel by removing edge E2={R,B})
            p.first = 44;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,C}, E4={B,C} (Edge indel by removing edge E3={A1,B})
            p.first = 29;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,C}, E3={B,C} (Edge indel by removing edge E4={A2,B})
            p.first = 29;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,C}, E3={A,C}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,A1})
            p.first = 143;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,C}, E3={B,C}, E4={A,B}, E5={R,A} (Edge indel by adding edge E5={R,A2})
            p.first = 143;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,B}, E3={A1,B}, E4={A2,B}, E5={A1,A2} (Edge indel by adding edge E5={A1,A2})
            p.first = 175;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,B}, E3={A,B}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A1,B})
            p.first = 179;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,B}, E3={B,C}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E5={R,A2,B})
            p.first = 179;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,B}, E3={A1,B}, E4={A2,B}, E5={A1,A2,B} (Edge indel by adding edge E5={A1,A2,B})
            p.first = 182;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,B}, E3={A1,B}, E4={A2,B}, E5={R,A1,A2,B} (Edge indel by adding edge E5={R,A1,A2,B})
            p.first = 183;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 81: // E1={R,A}, E2={A,B1,B2}, E3={A,B1}, E4={A,B2}
            // E1={R,A}, E3={A,B1}, E4={A,B2} (Edge indel by removing edge E2={A,B1,B2})
            p.first = 26;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E2={A,B,C}, E4={A,B} (Edge indel by removing edge E3={A,B1})
            p.first = 30;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E2={A,B,C}, E3={A,B} (Edge indel by removing edge E4={A,B2})
            p.first = 30;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,B}, E2={A,B,C}, E3={A,B}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,B1})
            p.first = 144;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,B}, E2={A,B,C}, E3={B,C}, E4={A,B}, E5={R,A} (Edge indel by adding edge E5={R,B2})
            p.first = 144;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, EDGES_ALPHABET[i], e1, e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={A,B1,B2}, E3={A,B1}, E4={A,B2}, E5={B1,B2} (Edge indel by adding edge E5={B1,B2})
            p.first = 176;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={A,B,C}, E3={A,B}, E4={A,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A,B1})
            p.first = 180;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={A,B,C}, E3={A,C}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E5={R,A,B2})
            p.first = 180;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,B}, E2={A1,A2,B}, E3={A1,B}, E4={A2,B}, E5={R,A1,A2} (Edge indel by adding edge E5={R,B1,B2})
            p.first = 182;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={A,B1,B2}, E3={A,B1}, E4={A,B2}, E5={R,A,B1,B2} (Edge indel by adding edge E5={R,A,B1,B2})
            p.first = 184;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 82: // E1={R,A,B1,B2}, E2={R,A}, E3={A,B1}, E4={A,B2}
            // E2={R,A}, E3={A,B1}, E4={A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
            p.first = 26;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E3={A,B1}, E4={A,B2} (Edge indel by removing edge E2={R,A})
            p.first = 45;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A}, E4={A,B} (Edge indel by removing edge E3={A,B1})
            p.first = 31;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A}, E3={A,B} (Edge indel by removing edge E4={A,B2})
            p.first = 31;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,B}, E3={A,B}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,B1})
            p.first = 145;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,B}, E3={B,C}, E4={A,B}, E5={R,A} (Edge indel by adding edge E5={R,B2})
            p.first = 145;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A}, E3={A,B1}, E4={A,B2}, E5={B1,B2} (Edge indel by adding edge E5={B1,B2})
            p.first = 177;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={A,B}, E4={A,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A,B1})
            p.first = 181;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={A,C}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E5={R,A,B2})
            p.first = 181;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,B}, E3={A1,B}, E4={A2,B}, E5={R,A1,A2} (Edge indel by adding edge E5={R,B1,B2})
            p.first = 183;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A}, E3={A,B1}, E4={A,B2}, E5={A,B1,B2} (Edge indel by adding edge E5={A,B1,B2})
            p.first = 184;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 83: // E1={R,A,B}, E2={R,A}, E3={A,B}, E4={B,C}
            // E2={R,A}, E3={A,B}, E4={B,C} (Edge indel by removing edge E1={R,A,B})
            p.first = 27;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={A,B}, E4={A,C} (Edge indel by removing edge E2={R,A})
            p.first = 43;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E4={B,C} (Edge indel by removing edge E3={A,B})
            p.first = 32;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={A,B}, E4={B,C}, E5={R,B} (Edge indel by adding edge E5={R,B})
            p.first = 141;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B}, E4={B,C}, E5={R,C} (Edge indel by adding edge E5={R,C})
            p.first = 154;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B}, E4={B,C}, E5={A,C} (Edge indel by adding edge E5={A,C})
            p.first = 174;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B}, E4={B,C}, E5={R,A,C} (Edge indel by adding edge E5={R,A,C})
            p.first = 185;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={A,B}, E4={A,C}, E5={R,A,C} (Edge indel by adding edge E5={R,B,C})
            p.first = 186;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B}, E4={B,C}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 187;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B}, E4={B,C}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 188;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 84: // E1={R,A,B}, E2={R,A}, E3={A,C}, E4={B,C}
            // E2={R,A}, E3={A,B}, E4={B,C} (Edge indel by removing edge E1={R,A,B})
            p.first = 27;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E3={A1,B}, E4={A2,B} (Edge indel by removing edge E2={R,A})
            p.first = 44;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E4={B,C} (Edge indel by removing edge E3={A,C})
            p.first = 32;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,B}, E3={B,C} (Edge indel by removing edge E4={B,C})
            p.first = 28;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1}, E3={A1,B}, E4={A2,B}, E5={R,A2} (Edge indel by adding edge E5={R,B})
            p.first = 153;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,C}, E4={B,C}, E5={R,C} (Edge indel by adding edge E5={R,C})
            p.first = 143;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,C}, E4={B,C}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 174;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A}, E3={A,B}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A,C})
            p.first = 185;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={B,C}, E4={A,C}, E5={R,A,C} (Edge indel by adding edge E5={R,B,C})
            p.first = 189;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,C}, E4={B,C}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 190;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,C}, E4={B,C}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 191;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 85: // E1={R,A,B}, E2={R,C}, E3={A,B}, E4={A,C}
            // E2={R,A}, E3={B,C}, E4={A,B} (Edge indel by removing edge E1={R,A,B})
            p.first = 27;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={A,B}, E4={A,C} (Edge indel by removing edge E2={R,C})
            p.first = 43;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,C}, E4={B,C} (Edge indel by removing edge E3={A,B})
            p.first = 29;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,B}, E3={A1,A2} (Edge indel by removing edge E4={A,C})
            p.first = 33;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,C}, E3={A,B}, E4={A,C}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 142;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,C}, E3={A,B}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,B})
            p.first = 154;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,B}, E3={A1,A2}, E4={A1,B}, E5={A2,B} (Edge indel by adding edge E5={B,C})
            p.first = 175;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,B}, E3={A,C}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E5={R,A,C})
            p.first = 186;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,B}, E3={A,B}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,B,C})
            p.first = 189;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,C}, E3={A,B}, E4={A,C}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 192;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,C}, E3={A,B}, E4={A,C}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 193;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 86: // E1={R,A}, E2={A,B,C}, E3={A,B}, E4={B,C}
            // E1={R,A}, E3={A,B}, E4={B,C} (Edge indel by removing edge E2={A,B,C})
            p.first = 27;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E2={A,B1,B2}, E4={B1,B2} (Edge indel by removing edge E3={A,B})
            p.first = 34;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E2={A,B,C}, E3={A,B} (Edge indel by removing edge E4={A,C})
            p.first = 30;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E2={A,B,C}, E3={A,B}, E4={B,C}, E5={R,B} (Edge indel by adding edge E2={R,B})
            p.first = 144;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={A1,A2,B}, E3={A1,B}, E4={A2,B}, E5={R,A2} (Edge indel by adding edge E2={R,C})
            p.first = 155;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={A,B1,B2}, E3={A,B1}, E4={B1,B2}, E5={A,B2} (Edge indel by adding edge E4={A,C})
            p.first = 176;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={A,B,C}, E3={A,B}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E1={R,A,B})
            p.first = 187;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={A,B,C}, E3={A,C}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E1={R,A,C})
            p.first = 190;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,C}, E2={A,B,C}, E3={A,C}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E1={R,B,C})
            p.first = 192;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={A,B,C}, E3={A,B}, E4={B,C}, E5={A,C} (Edge indel by adding edge E1={R,A,B,C})
            p.first = 194;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 87: // E1={R,A,B,C}, E2={R,A}, E3={A,B}, E4={B,C}
            // E2={R,A}, E3={A,B}, E4={B,C} (Edge indel by removing edge E1={R,A,B,C})
            p.first = 27;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E3={A,B1}, E4={A,B2} (Edge indel by removing edge E2={R,A})
            p.first = 45;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,A}, E4={B1,B2} (Edge indel by removing edge E3={A,B})
            p.first = 35;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A}, E3={A,B} (Edge indel by removing edge E4={A,C})
            p.first = 31;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A}, E3={A,B}, E4={B,C}, E5={R,B} (Edge indel by adding edge E3={R,B})
            p.first = 145;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={A1,B}, E4={A2,B}, E5={R,A2} (Edge indel by adding edge E3={R,C})
            p.first = 156;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A}, E3={A,B1}, E4={B1,B2}, E5={A,B2} (Edge indel by adding edge E4={A,C})
            p.first = 177;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={A,B}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E2={R,A,B})
            p.first = 188;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={A,C}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E2={R,A,C})
            p.first = 191;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,C}, E3={A,C}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E2={R,B,C})
            p.first = 193;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={A,B}, E4={B,C}, E5={A,C} (Edge indel by adding edge E3={A,B,C})
            p.first = 194;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 88: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B}
            // E2={R,A,B}, E3={R,B}, E4={B,C} (Edge indel by removing edge E1={R,A,B})
            p.first = 28;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E4={A,B} (Edge indel by removing edge E3={R,A})
            p.first = 46;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,A} (Edge indel by removing edge E4={A,B})
            p.first = 36;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B} (Edge indel by adding edge E5={R,B})
            p.first = 146;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={A,C}, E5={R,B} (Edge indel by adding edge E5={R,C})
            p.first = 157;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1}, E5={A,B2} (Edge indel by adding edge E5={A,C})
            p.first = 178;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 185;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B}, E5={R,B,C} (Edge indel by adding edge E5={R,B,C})
            p.first = 195;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 196;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 197;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 89: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}
            // E2={R,A,B}, E3={R,C}, E4={B,C} (Edge indel by removing edge E1={R,A,B})
            p.first = 29;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E4={A,B} (Edge indel by removing edge E3={R,B})
            p.first = 46;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={R,B} (Edge indel by removing edge E4={A,B})
            p.first = 37;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 146;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={R,C} (Edge indel by adding edge E5={R,C})
            p.first = 161;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={A,C} (Edge indel by adding edge E5={A,C})
            p.first = 186;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 179;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B,C}, E3={R,A}, E4={A,B}, E5={R,A,C} (Edge indel by adding edge E5={R,B,C})
            p.first = 195;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 198;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 199;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 90: // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}
            // E2={R,A}, E3={A,B,C}, E4={A,B} (Edge indel by removing edge E1={R,A,B})
            p.first = 30;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E3={A1,A2,B}, E4={A1,A2} (Edge indel by removing edge E2={R,A})
            p.first = 47;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={A,B,C} (Edge indel by removing edge E4={A,B})
            p.first = 38;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1}, E3={A1,A2,B}, E4={A1,A2}, E5={R,A2} (Edge indel by adding edge E5={R,B})
            p.first = 147;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={R,C} (Edge indel by adding edge E5={R,C})
            p.first = 162;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={A,C} (Edge indel by adding edge E5={A,C})
            p.first = 180;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 187;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={R,A,C} (Edge indel by adding edge E5={R,A,C})
            p.first = 196;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={R,A,C} (Edge indel by adding edge E5={R,B,C})
            p.first = 198;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 200;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 91: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}
            // E1={R,A,B,C}, E3={R,A}, E4={A,B} (Edge indel by removing edge E2={R,A,B})
            p.first = 31;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2} (Edge indel by removing edge E3={R,A})
            p.first = 48;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A} (Edge indel by removing edge E4={A,B})
            p.first = 39;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={A1,A2}, E5={R,A2} (Edge indel by adding edge E5={R,B})
            p.first = 148;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={R,C} (Edge indel by adding edge E5={R,C})
            p.first = 163;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={A,C} (Edge indel by adding edge E5={A,C})
            p.first = 181;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 188;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={R,A,C} (Edge indel by adding edge E5={R,A,C})
            p.first = 197;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,B}, E5={R,A,C} (Edge indel by adding edge E5={R,B,C})
            p.first = 199;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 200;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 92: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={B,C}
            // E2={R,A,B}, E3={R,C}, E4={B,C} (Edge indel by removing edge E1={R,A,B})
            p.first = 29;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,B}, E4={B,C} (Edge indel by removing edge E2={R,A,C})
            p.first = 28;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E4={B1,B2} (Edge indel by removing edge E3={R,B})
            p.first = 49;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={R,B} (Edge indel by removing edge E4={B,C})
            p.first = 37;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            //  E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 158;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            //  E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={B1,B2}, E5={R,B2} (Edge indel by adding edge E5={R,C})
            p.first = 149;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            //  E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={B,C}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 179;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            //  E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={B,C}, E5={A,C} (Edge indel by adding edge E5={A,C})
            p.first = 189;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            //  E1={R,A,C}, E2={R,B,C}, E3={R,A}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E5={R,B,C})
            p.first = 195;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            //  E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={B,C}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 201;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            //  E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={B,C}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 202;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 93: // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,C}
            // E2={R,A}, E3={A,B,C}, E4={A,B} (Edge indel by removing edge E1={R,A,B})
            p.first = 30;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={A,B,C}, E4={B,C} (Edge indel by removing edge E2={R,A})
            p.first = 50;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,B}, E4={B,C} (Edge indel by removing edge E3={A,B,C})
            p.first = 28;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={A,B,C} (Edge indel by removing edge E4={A,C})
            p.first = 38;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,B}, E3={A,B,C}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,B})
            p.first = 159;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,C}, E5={R,C} (Edge indel by adding edge E5={R,C})
            p.first = 150;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,C}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 180;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,C}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 190;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E5={R,A,C})
            p.first = 196;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={A,B,C}, E4={B,C}, E5={R,A,C} (Edge indel by adding edge E5={R,B,C})
            p.first = 201;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,C}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 203;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 94: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,C}
            // E2={R,A,B}, E3={R,B}, E4={B,C} (Edge indel by removing edge E1={R,A,B,C})
            p.first = 28;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E3={R,A}, E4={A,B} (Edge indel by removing edge E2={R,A,B})
            p.first = 31;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E4={B,C} (Edge indel by removing edge E3={R,A})
            p.first = 51;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A} (Edge indel by removing edge E4={A,C})
            p.first = 39;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,B})
            p.first = 160;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,C}, E5={R,C} (Edge indel by adding edge E5={R,C})
            p.first = 151;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,C}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 181;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,C}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 191;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={A,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A,C})
            p.first = 197;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={B,C}, E5={R,A,C} (Edge indel by adding edge E5={R,B,C})
            p.first = 202;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,C}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 203;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 95: // E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,C}
            // E2={R,A}, E3={A,B,C}, E4={A,B} (Edge indel by removing edge E1={R,A,B})
            p.first = 30;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={A,B,C}, E4={B,C} (Edge indel by removing edge E2={R,C})
            p.first = 50;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,C}, E4={B,C} (Edge indel by removing edge E3={A,B,C})
            p.first = 29;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B} (Edge indel by removing edge E4={A,C})
            p.first = 40;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,C}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 150;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,B})
            p.first = 164;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,C}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 192;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B} (Edge indel by adding edge E5={B,C})
            p.first = 182;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E5={R,A,C})
            p.first = 198;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,B}, E3={A,B,C}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,B,C})
            p.first = 201;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,C}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 204;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 96: // E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,C}
            // E2={R,A,B}, E3={R,C}, E4={B,C} (Edge indel by removing edge E1={R,A,B,C})
            p.first = 29;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E3={R,A}, E4={A,B} (Edge indel by removing edge E2={R,A,B})
            p.first = 31;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E4={B,C} (Edge indel by removing edge E3={R,C})
            p.first = 51;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B} (Edge indel by removing edge E4={A,C})
            p.first = 41;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,C}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 151;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,B})
            p.first = 165;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,C}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 193;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,B}, E5={A2,B} (Edge indel by adding edge E5={B,C})
            p.first = 183;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E5={R,A,C})
            p.first = 199;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,B,C})
            p.first = 202;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,C}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 204;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 97: // E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,B}
            // E2={R,A}, E3={A,B,C}, E4={A,B} (Edge indel by removing edge E1={R,A,B,C})
            p.first = 30;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E3={A1,A2,B}, E4={A1,A2} (Edge indel by removing edge E2={R,A})
            p.first = 52;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A}, E4={A,B} (Edge indel by removing edge E3={A,B,C})
            p.first = 31;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,A}, E3={A,B1,B2} (Edge indel by removing edge E4={A,B})
            p.first = 42;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1}, E3={A1,A2,B}, E4={A1,A2}, E5={R,A2} (Edge indel by adding edge E5={R,B})
            p.first = 152;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,B}, E3={A,B,C}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,C})
            p.first = 166;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2} (Edge indel by adding edge E5={A,C})
            p.first = 184;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 194;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E5={R,A,B})
            p.first = 200;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A,C})
            p.first = 203;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,C}, E3={A,B,C}, E4={A,C}, E5={R,A,B} (Edge indel by adding edge E5={R,B,C})
            p.first = 204;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 98: // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={B1,B2}
            // E2={R,A,B}, E3={R,A}, E4={B,C} (Edge indel by removing edge E1={R,A,B1})
            p.first = 32;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,A}, E4={B,C} (Edge indel by removing edge E2={R,A,B2})
            p.first = 32;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E4={B1,B2} (Edge indel by removing edge E3={R,A})
            p.first = 49;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,A} (Edge indel by removing edge E4={B1,B2})
            p.first = 36;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={B,C}, E5={R,B} (Edge indel by adding edge E5={R,B1})
            p.first = 158;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={B,C}, E5={R,B} (Edge indel by adding edge E5={R,B2})
            p.first = 158;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={B,C}, E5={A,B} (Edge indel by adding edge E5={A,B1})
            p.first = 185;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={B,C}, E5={A,B} (Edge indel by adding edge E5={A,B2})
            p.first = 185;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={B1,B2}, E5={R,B1,B2} (Edge indel by adding edge E5={R,B1,B2})
            p.first = 205;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={B1,B2}, E5={A,B1,B2} (Edge indel by adding edge E5={A,B1,B2})
            p.first = 206;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={B1,B2}, E5={R,A,B1,B2} (Edge indel by adding edge E5={R,A,B1,B2})
            p.first = 207;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 99: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,C}
            // E2={R,A1,A2}, E3={R,B}, E4={A1,A2} (Edge indel by removing edge E1={R,A,B})
            p.first = 33;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,A}, E4={B,C} (Edge indel by removing edge E2={R,A,C})
            p.first = 32;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,C}, E2={R,A,B}, E4={A,B} (Edge indel by removing edge E3={R,B})
            p.first = 46;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={R,B} (Edge indel by removing edge E4={A,C})
            p.first = 37;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,C}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 157;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A,B}, E3={R,C}, E4={A,B}, E5={R,B} (Edge indel by adding edge E5={R,C})
            p.first = 161;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,C}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 186;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,C}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 189;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,B1,B2}, E3={R,A}, E4={B1,B2}, E5={R,A,B2} (Edge indel by adding edge E5={R,B,C})
            p.first = 205;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,C}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 208;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,C}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 209;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 100: // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={B,C}
            // E2={R,A}, E3={A,B1,B2}, E4={B1,B2} (Edge indel by removing edge E1={R,A,B})
            p.first = 34;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={A,B,C}, E4={B,C} (Edge indel by removing edge E2={R,A})
            p.first = 50;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E4={B,C} (Edge indel by removing edge E3={A,B,C})
            p.first = 32;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={A,B,C} (Edge indel by removing edge E4={B,C})
            p.first = 38;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={B,C}, E5={R,B} (Edge indel by adding edge E5={R,B})
            p.first = 159;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={B,C}, E5={R,C} (Edge indel by adding edge E5={R,C})
            p.first = 164;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={B,C}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 187;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={B,C}, E5={A,C} (Edge indel by adding edge E5={A,C})
            p.first = 190;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A}, E3={A,B1,B2}, E4={B1,B2}, E5={R,A,B2} (Edge indel by adding edge E5={R,A,C})
            p.first = 206;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={A,B,C}, E4={A,C}, E5={R,A,C} (Edge indel by adding edge E5={R,B,C})
            p.first = 208;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={B,C}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 210;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 101: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={B,C}
            // E2={R,A,B}, E3={R,A}, E4={B,C} (Edge indel by removing edge E1={R,A,B,C})
            p.first = 32;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E3={R,A}, E4={B1,B2} (Edge indel by removing edge E2={R,A,B})
            p.first = 35;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E4={B,C} (Edge indel by removing edge E3={R,A})
            p.first = 51;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A} (Edge indel by removing edge E4={B,C})
            p.first = 39;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={B,C}, E5={R,B} (Edge indel by adding edge E5={R,B})
            p.first = 160;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={B,C}, E5={R,C} (Edge indel by adding edge E5={R,C})
            p.first = 165;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={B,C}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 188;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={B,C}, E5={A,C} (Edge indel by adding edge E5={A,C})
            p.first = 191;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A}, E4={B1,B2}, E5={R,A,B2} (Edge indel by adding edge E5={R,A,C})
            p.first = 207;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,C}, E5={R,A,C} (Edge indel by adding edge E5={R,B,C})
            p.first = 209;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={B,C}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 210;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 102: // E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B}, E4={A1,A2}
            // E2={R,A}, E3={A,B1,B2}, E4={B1,B2} (Edge indel by removing edge E1={R,A1,A2})
            p.first = 34;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E3={A1,A2,B}, E4={A1,A2} (Edge indel by removing edge E2={R,B})
            p.first = 47;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,B}, E4={A1,A2} (Edge indel by removing edge E3={A1,A2,B})
            p.first = 33;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B} (Edge indel by removing edge E4={A1,A2})
            p.first = 40;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,B}, E5={R,A} (Edge indel by adding edge E5={R,A1})
            p.first = 162;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,B}, E5={R,A} (Edge indel by adding edge E5={R,A2})
            p.first = 162;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,B}, E5={A,C} (Edge indel by adding edge E5={A1,B})
            p.first = 192;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,B}, E5={A,C} (Edge indel by adding edge E5={A2,B})
            p.first = 192;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,B}, E3={A,B,C}, E4={A,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A1,B})
            p.first = 208;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,B}, E3={A,B,C}, E4={A,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A2,B})
            p.first = 208;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B}, E4={A1,A2}, E5={R,A1,A2,B} (Edge indel by adding edge E5={R,A1,A2,B})
            p.first = 211;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 103: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2}
            // E2={R,A1,A2}, E3={R,B}, E4={A1,A2} (Edge indel by removing edge E1={R,A1,A2,B})
            p.first = 33;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E3={R,A}, E4={B1,B2} (Edge indel by removing edge E2={R,A1,A2})
            p.first = 35;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2} (Edge indel by removing edge E3={R,B})
            p.first = 48;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B} (Edge indel by removing edge E4={A1,A2})
            p.first = 41;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B}, E5={R,A} (Edge indel by adding edge E5={R,A1})
            p.first = 163;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B}, E5={R,A} (Edge indel by adding edge E5={R,A2})
            p.first = 163;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B}, E5={A,C} (Edge indel by adding edge E5={A1,B})
            p.first = 193;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B}, E5={A,C} (Edge indel by adding edge E5={A2,B})
            p.first = 193;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={A,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A1,B})
            p.first = 209;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={A,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A2,B})
            p.first = 209;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2}, E5={A1,A2,B} (Edge indel by adding edge E5={A1,A2,B})
            p.first = 211;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 104: // E1={R,A,B1,B2}, E2={R,A}, E3={A,B1,B2}, E4={B1,B2}
            // E2={R,A}, E3={A,B1,B2}, E4={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
            p.first = 34;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E3={A1,A2,B}, E4={A1,A2} (Edge indel by removing edge E2={R,A})
            p.first = 52;
            p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,A}, E4={B1,B2} (Edge indel by removing edge E3={A,B1,B2})
            p.first = 35;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,A}, E3={A,B1,B2} (Edge indel by removing edge E4={B1,B2})
            p.first = 42;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={B,C}, E5={R,B} (Edge indel by adding edge E5={R,B1})
            p.first = 166;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={B,C}, E5={R,B} (Edge indel by adding edge E5={R,B2})
            p.first = 166;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={B,C}, E5={A,B} (Edge indel by adding edge E5={A,B1})
            p.first = 194;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={B,C}, E5={A,B} (Edge indel by adding edge E5={A,B2})
            p.first = 194;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A,B1})
            p.first = 210;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A,B2})
            p.first = 210;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,B}, E3={A1,A2,B}, E4={A1,A2}, E5={R,A1,A2} (Edge indel by adding edge E5={R,B1,B2})
            p.first = 211;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 105: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}
            // E2={R,A,B}, E3={R,A,C}, E4={R,B} (Edge indel by removing edge E1={R,A,B1})
            p.first = 37;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,A,C}, E4={R,B} (Edge indel by removing edge E2={R,A,B2})
            p.first = 37;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E4={R,A} (Edge indel by removing edge E3={R,B1,B2})
            p.first = 36;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3} (Edge indel by removing edge E4={R,A})
            p.first = 53;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B2}, E4={R,A1}, E5={R,A2} (Edge indel by adding edge E5={R,B1})
            p.first = 167;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={R,A1}, E5={R,A2} (Edge indel by adding edge E5={R,B2})
            p.first = 167;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B} (Edge indel by adding edge E5={A,B1})
            p.first = 195;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E5={A,B} (Edge indel by adding edge E5={A,B2})
            p.first = 195;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={B1,B2} (Edge indel by adding edge E5={B1,B2})
            p.first = 205;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2} (Edge indel by adding edge E5={A,B1,B2})
            p.first = 212;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={R,A,B1,B2} (Edge indel by adding edge E5={R,A,B1,B2})
            p.first = 213;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 106: // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}
            // E2={R,A,B}, E3={R,A}, E4={A,B,C} (Edge indel by removing edge E1={R,A,B1})
            p.first = 38;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,A}, E4={A,B,C} (Edge indel by removing edge E2={R,A,B2})
            p.first = 38;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E4={A,B1,B2} (Edge indel by removing edge E3={R,A})
            p.first = 54;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,A} (Edge indel by removing edge E4={A,B1,B2})
            p.first = 36;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={R,B} (Edge indel by adding edge E4={R,B1})
            p.first = 168;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={R,B} (Edge indel by adding edge E4={R,B2})
            p.first = 168;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by adding edge E5={A,B1})
            p.first = 196;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by adding edge E5={A,B2})
            p.first = 196;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={B1,B2} (Edge indel by adding edge E5={B1,B2})
            p.first = 206;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={R,B1,B2} (Edge indel by adding edge E5={R,B1,B2})
            p.first = 212;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={R,A,B1,B2} (Edge indel by adding edge E5={R,A,B1,B2})
            p.first = 214;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 107: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}
            // E2={R,A,B1}, E3={R,A,B2}, E4={R,A} (Edge indel by removing edge E1={R,A,B1,B2})
            p.first = 36;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E3={R,A,B}, E4={R,A} (Edge indel by removing edge E2={R,A,B1})
            p.first = 39;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E4={R,A} (Edge indel by removing edge E3={R,A,B2})
            p.first = 39;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2} (Edge indel by removing edge E4={R,A})
            p.first = 55;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B} (Edge indel by adding edge E5={R,B1})
            p.first = 169;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={R,B} (Edge indel by adding edge E5={R,B2})
            p.first = 169;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B} (Edge indel by adding edge E5={A,B1})
            p.first = 197;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={A,B} (Edge indel by adding edge E5={A,B2})
            p.first = 197;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={B1,B2} (Edge indel by adding edge E5={B1,B2})
            p.first = 207;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1,B2} (Edge indel by adding edge E5={R,B1,B2})
            p.first = 213;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2} (Edge indel by adding edge E5={A,B1,B2})
            p.first = 214;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 108: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}
            // E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B} (Edge indel by removing edge E1={R,A,B})
            p.first = 40;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,A}, E4={A,B,C} (Edge indel by removing edge E2={R,A,C})
            p.first = 38;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E4={A,B1,B2} (Edge indel by removing edge E3={R,B})
            p.first = 54;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={R,B} (Edge indel by removing edge E4={A,B,C})
            p.first = 37;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 168;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={A,B1,B2}, E5={R,B2} (Edge indel by adding edge E5={R,C})
            p.first = 171;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 198;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C} (Edge indel by adding edge E5={A,C})
            p.first = 208;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 201;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,B1,B2}, E3={R,A}, E4={A,B1,B2}, E5={R,A,B2} (Edge indel by adding edge E5={R,B,C})
            p.first = 212;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 215;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 109: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}
            // E2={R,A,B}, E3={R,A,C}, E4={R,B} (Edge indel by removing edge E1={R,A,B,C})
            p.first = 37;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E3={R,A1,A2}, E4={R,B} (Edge indel by removing edge E2={R,A,B})
            p.first = 41;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E4={R,A} (Edge indel by removing edge E3={R,A,C})
            p.first = 39;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2} (Edge indel by removing edge E4={R,B})
            p.first = 55;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 169;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2} (Edge indel by adding edge E5={R,C})
            p.first = 172;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 199;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,C} (Edge indel by adding edge E5={A,C})
            p.first = 209;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 202;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A}, E5={R,A,B2} (Edge indel by adding edge E5={R,B,C})
            p.first = 213;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 215;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 110: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}
            // E2={R,A,B}, E3={R,A}, E4={A,B,C} (Edge indel by removing edge E1={R,A,B,C})
            p.first = 38;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E3={R,A}, E4={A,B1,B2} (Edge indel by removing edge E2={R,A,B})
            p.first = 42;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2,B} (Edge indel by removing edge E3={R,A})
            p.first = 56;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A} (Edge indel by removing edge E4={A,B,C})
            p.first = 39;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={A1,A2,B}, E5={R,A2} (Edge indel by adding edge E5={R,B})
            p.first = 170;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={R,C} (Edge indel by adding edge E5={R,C})
            p.first = 173;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 200;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C} (Edge indel by adding edge E5={A,C})
            p.first = 203;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 210;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A}, E4={A,B1,B2}, E5={R,A,B2} (Edge indel by adding edge E5={R,A,C})
            p.first = 214;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,B,C}, E5={R,A,C} (Edge indel by adding edge E5={R,B,C})
            p.first = 215;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 111: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}
            // E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
            p.first = 40;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E3={R,A}, E4={A,B1,B2} (Edge indel by removing edge E2={R,A1,A2})
            p.first = 42;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2,B} (Edge indel by removing edge E3={R,B})
            p.first = 56;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B} (Edge indel by removing edge E4={A1,A2,B})
            p.first = 41;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={R,A} (Edge indel by adding edge E5={R,A1})
            p.first = 173;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={R,A} (Edge indel by adding edge E5={R,A2})
            p.first = 173;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by adding edge E5={A1,A2})
            p.first = 211;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,C} (Edge indel by adding edge E5={A1,B})
            p.first = 204;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,C} (Edge indel by adding edge E5={A2,B})
            p.first = 204;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A1,B})
            p.first = 215;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A2,B})
            p.first = 215;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 112: // E1={R,A1,A2}, E2={A1,A2}, E3={A1,B}, E4={A2,B}
            // E1={R,A1,A2}, E3={A1,B}, E4={A2,B} (Edge indel by removing edge E2={A1,A2})
            p.first = 44;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={A,B}, E4={A,C} (Edge indel by removing edge E3={A1,B})
            p.first = 43;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={A,B}, E3={A,C} (Edge indel by removing edge E4={A2,B})
            p.first = 43;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={A,B}, E3={A,C}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,A1})
            p.first = 174;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={A,B}, E3={B,C}, E4={A,C}, E5={R,A} (Edge indel by adding edge E5={R,A2})
            p.first = 174;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={A1,A2}, E3={A1,B}, E4={A2,B}, E5={R,B} (Edge indel by adding edge E5={R,C})
            p.first = 175;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={A,B1}, E3={A,B2}, E4={B1,B2}, E5={R,A,B2} (Edge indel by adding edge E5={R,A1,B})
            p.first = 216;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={A,B1}, E3={B1,B2}, E4={A,B2}, E5={R,A,B2} (Edge indel by adding edge E5={R,A2,B})
            p.first = 216;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={A1,A2}, E3={A1,B}, E4={A2,B}, E5={A1,A2,B} (Edge indel by adding edge E2={A1,A2,B})
            p.first = 217;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={A1,A2}, E3={A1,B}, E4={A2,B}, E5={R,A1,A2,B} (Edge indel by adding edge E1={R,A1,A2,B})
            p.first = 218;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 113: // E1={R,A1,A2,A3}, E2={A1,A2}, E3={A1,A3}, E4={A2,A3}
            // E1={R,A,B1,B2}, E3={A,B1}, E4={A,B2} (Edge indel by removing edge E2={A1,A2})
            p.first = 45;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={A,B1}, E4={A,B2} (Edge indel by removing edge E3={A1,A3})
            p.first = 45;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={A,B1}, E3={A,B2} (Edge indel by removing edge E4={A2,A3})
            p.first = 45;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={A,B1}, E3={A,B2}, E4={B1,B2}, E5={R,A} (Edge indel by adding edge E5={R,A1})
            p.first = 177;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={A,B1}, E3={B1,B2}, E4={A,B2}, E5={R,A} (Edge indel by adding edge E5={R,A2})
            p.first = 177;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={B1,B2}, E3={A,B1}, E4={A,B2}, E5={R,A} (Edge indel by adding edge E5={R,A3})
            p.first = 177;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, EDGES_ALPHABET[i], e3, e4, e2, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={A1,A2}, E3={A1,B}, E4={A2,B}, E5={R,A1,A2} (Edge indel by adding edge E5={R,A1,A2})
            p.first = 218;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={A1,B}, E3={A1,A2}, E4={A2,B}, E5={R,A1,A2} (Edge indel by adding edge E5={R,A1,A3})
            p.first = 218;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={A1,B}, E3={A2,B}, E4={A1,A2}, E5={R,A1,A2} (Edge indel by adding edge E5={R,A2,A3})
            p.first = 218;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e4, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,A3}, E2={A1,A2}, E3={A1,A3}, E4={A2,A3}, E5={A1,A2,A3} (Edge indel by adding edge E5={A1,A2,A3})
            p.first = 219;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 114: // E1={R,A,B1}, E2={R,A,B2}, E3={A,B1}, E4={A,B2}
            // E2={R,A,B}, E3={A,C}, E4={A,B} (Edge indel by removing edge E1={R,A,B1})
            p.first = 43;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={A,B}, E4={A,C} (Edge indel by removing edge E2={R,A,B2})
            p.first = 43;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,C}, E2={R,A,B}, E4={A,B} (Edge indel by removing edge E3={A,B1})
            p.first = 46;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={A,B} (Edge indel by removing edge E4={A,B2})
            p.first = 46;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E3={A,B1}, E4={A,B2}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 178;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={A,B}, E4={A,C}, E5={R,B} (Edge indel by adding edge E5={R,B1})
            p.first = 186;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A,B}, E3={A,C}, E4={A,B}, E5={R,B} (Edge indel by adding edge E5={R,B2})
            p.first = 186;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, EDGES_ALPHABET[i], e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={A,B1}, E4={A,B2}, E5={B1,B2} (Edge indel by adding edge E5={B1,B2})
            p.first = 216;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={A,B1}, E4={A,B2}, E5={R,B1,B2} (Edge indel by adding edge E5={R,B1,B2})
            p.first = 220;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={A,B1}, E4={A,B2}, E5={A,B1,B2} (Edge indel by adding edge E5={A,B1,B2})
            p.first = 221;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={A,B1}, E4={A,B2}, E5={R,A,B1,B2} (Edge indel by adding edge E5={R,A,B1,B2})
            p.first = 222;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 115: // E1={R,A,B}, E2={R,A,C}, E3={A,B}, E4={B,C}
            // E2={R,A1,A2}, E3={A1,B}, E4={A2,B} (Edge indel by removing edge E1={R,A,B})
            p.first = 44;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={A,B}, E4={A,C} (Edge indel by removing edge E2={R,A,C})
            p.first = 43;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E4={B1,B2} (Edge indel by removing edge E3={A,B})
            p.first = 49;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={A,B} (Edge indel by removing edge E4={B,C})
            p.first = 46;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={A,B}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 185;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={A,B}, E4={B,C}, E5={R,B} (Edge indel by adding edge E5={R,B})
            p.first = 179;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A,B}, E3={A,C}, E4={B,C}, E5={R,B} (Edge indel by adding edge E5={R,C})
            p.first = 189;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={A,B1}, E4={B1,B2}, E5={A,B2} (Edge indel by adding edge E5={A,C})
            p.first = 216;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,B1,B2}, E3={A,B1}, E4={A,B2}, E5={R,A,B2} (Edge indel by adding edge E5={R,B,C})
            p.first = 220;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={A,B}, E4={B,C}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 223;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={A,B}, E4={B,C}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 224;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 116: // E1={R,A,B}, E2={A,B,C}, E3={A,B}, E4={B,C}
            // E1={R,A,B}, E3={A,B}, E4={A,C} (Edge indel by removing edge E2={A,B,C})
            p.first = 43;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={A,B,C}, E4={B,C} (Edge indel by removing edge E3={A,B})
            p.first = 50;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={A1,A2,B}, E3={A1,A2} (Edge indel by removing edge E4={B,C})
            p.first = 47;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={A,B,C}, E3={A,B}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 187;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={A,B,C}, E3={A,B}, E4={A,C}, E5={R,A} (Edge indel by adding edge E5={R,B})
            p.first = 180;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={A,B,C}, E3={A,B}, E4={A,C}, E5={R,C} (Edge indel by adding edge E5={R,C})
            p.first = 192;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={A1,A2,B}, E3={A1,A2}, E4={A2,B}, E5={A1,B} (Edge indel by adding edge E5={A,C})
            p.first = 217;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={A,B,C}, E3={A,B}, E4={B,C}, E5={R,A,C} (Edge indel by adding edge E5={R,A,C})
            p.first = 223;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={A,B1,B2}, E3={A,B1}, E4={A,B2}, E5={R,A,B2} (Edge indel by adding edge E5={R,B,C})
            p.first = 221;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={A,B,C}, E3={A,B}, E4={A,C}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 225;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 117: // E1={R,A,B,C}, E2={R,A,B}, E3={A,B}, E4={B,C}
            // E2={R,A,B}, E3={A,B}, E4={A,C} (Edge indel by removing edge E1={R,A,B,C})
            p.first = 43;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E3={A,B1}, E4={A,B2} (Edge indel by removing edge E2={R,A,B})
            p.first = 45;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E4={B,C} (Edge indel by removing edge E3={A,B})
            p.first = 51;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2} (Edge indel by removing edge E4={B,C})
            p.first = 48;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={A,B}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 188;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={A,B}, E4={A,C}, E5={R,A} (Edge indel by adding edge E5={R,B})
            p.first = 181;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={A,B}, E4={A,C}, E5={R,C} (Edge indel by adding edge E5={R,C})
            p.first = 193;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2}, E4={A2,B}, E5={A1,B} (Edge indel by adding edge E5={A,C})
            p.first = 218;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={A,B}, E4={B,C}, E5={R,A,C} (Edge indel by adding edge E5={R,A,C})
            p.first = 224;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={A,B1}, E4={A,B2}, E5={R,A,B2} (Edge indel by adding edge E5={R,B,C})
            p.first = 222;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={A,B}, E4={A,C}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 225;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 118: // E1={R,A1,A2}, E2={A1,A2,B}, E3={A1,B}, E4={A2,B}
            // E1={R,A1,A2}, E3={A1,B}, E4={A2,B} (Edge indel by removing edge E2={A1,A2,B})
            p.first = 44;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={A,B,C}, E4={B,C} (Edge indel by removing edge E3={A1,B})
            p.first = 50;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={A,B,C}, E3={B,C} (Edge indel by removing edge E4={A2,B})
            p.first = 50;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={A,B,C}, E3={A,C}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,A1})
            p.first = 190;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={A,B,C}, E3={B,C}, E4={A,C}, E5={R,A} (Edge indel by adding edge E5={R,A2})
            p.first = 190;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={A1,A2,B}, E3={A1,B}, E4={A2,B}, E5={R,B} (Edge indel by adding edge E5={R,B})
            p.first = 182;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={A1,A2,B}, E3={A1,B}, E4={A2,B}, E5={A1,A2} (Edge indel by adding edge E5={A1,A2})
            p.first = 217;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={A,B,C}, E3={A,B}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A1,B})
            p.first = 223;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={A,B,C}, E3={B,C}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E5={R,A2,B})
            p.first = 223;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={A1,A2,B}, E3={A1,B}, E4={A2,B}, E5={R,A1,A2,B} (Edge indel by adding edge E5={R,A1,A2,B})
            p.first = 226;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 119: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,B}, E4={A2,B}
            // E2={R,A1,A2}, E3={A1,B}, E4={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
            p.first = 44;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E3={A,B1}, E4={A,B2} (Edge indel by removing edge E2={R,A1,A2})
            p.first = 45;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E4={B,C} (Edge indel by removing edge E3={A1,B})
            p.first = 51;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={B,C} (Edge indel by removing edge E4={A2,B})
            p.first = 51;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={A,C}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,A1})
            p.first = 191;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={B,C}, E4={A,C}, E5={R,A} (Edge indel by adding edge E5={R,A2})
            p.first = 191;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,B}, E4={A2,B}, E5={R,B} (Edge indel by adding edge E5={R,C})
            p.first = 183;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,B}, E4={A2,B}, E5={A1,A2} (Edge indel by adding edge E5={A1,A2})
            p.first = 218;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={A,B}, E4={B,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A1,B})
            p.first = 224;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={B,C}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E5={R,A2,B})
            p.first = 224;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,B}, E4={A2,B}, E5={A1,A2,B} (Edge indel by adding edge E5={A1,A2,B})
            p.first = 226;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 120: // E1={R,A,B1,B2}, E2={A,B1,B2}, E3={A,B1}, E4={A,B2}
            // E1={R,A,B1,B2}, E3={A,B1}, E4={A,B2} (Edge indel by removing edge E2={A,B1,B2})
            p.first = 45;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={A1,A2,B}, E4={A1,A2} (Edge indel by removing edge E3={A,B1})
            p.first = 52;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={A1,A2,B}, E3={A1,A2} (Edge indel by removing edge E4={A,B2})
            p.first = 52;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={A,B1,B2}, E3={A,B1}, E4={A,B2}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 184;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={A,B,C}, E3={A,B}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,B1})
            p.first = 194;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={A,B,C}, E3={B,C}, E4={A,B}, E5={R,A} (Edge indel by adding edge E5={R,B2})
            p.first = 194;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,A3}, E2={A1,A2,A3}, E3={A1,A2}, E4={A1,A3}, E5={A2,A3} (Edge indel by adding edge E5={B1,B2})
            p.first = 219;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={A,B,C}, E3={A,B}, E4={A,C}, E5={R,A,B} (Edge indel by adding edge E5={R,A,B1})
            p.first = 225;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={A,B,C}, E3={A,C}, E4={A,B}, E5={R,A,B2} (Edge indel by adding edge E5={R,A,B2})
            p.first = 225;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={A1,A2,B}, E3={A1,B}, E4={A2,B}, E5={R,A1,A2} (Edge indel by adding edge E5={R,B1,B2})
            p.first = 226;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 121: // E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={A1,A2}
            // E2={R,A,B1}, E3={R,A,B2}, E4={B1,B2} (Edge indel by removing edge E1={R,A1,A2})
            p.first = 49;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,A,C}, E4={A,B} (Edge indel by removing edge E2={R,A1,C})
            p.first = 46;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E4={A,B} (Edge indel by removing edge E3={R,A2,C})
            p.first = 46;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3} (Edge indel by removing edge E4={A1,A2})
            p.first = 53;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B}, E5={R,A} (Edge indel by adding edge E5={R,A1})
            p.first = 195;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E4={A,B}, E5={R,A} (Edge indel by adding edge E5={R,A2})
            p.first = 195;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,B1,B2}, E2={R,A,B1}, E3={R,A,B1}, E4={B1,B2}, E5={R,A} (Edge indel by adding edge E5={R,C})
            p.first = 205;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e1, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={A,B1}, E5={A,B2} (Edge indel by adding edge E5={A1,B})
            p.first = 220;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E4={A,B1}, E5={A,B2} (Edge indel by adding edge E5={A2,B})
            p.first = 220;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={A1,A2}, E5={A1,A2,B} (Edge indel by adding edge E5={A1,A2,B})
            p.first = 227;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={A1,A2}, E5={R,A1,A2,B} (Edge indel by adding edge E5={R,A1,A2,B})
            p.first = 228;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 122: // E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={A,B}
            // E2={R,A,B}, E3={A,B,C}, E4={B,C} (Edge indel by removing edge E1={R,A,B})
            p.first = 50;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E3={A1,A2,B}, E4={A1,A2} (Edge indel by removing edge E2={R,A,C})
            p.first = 47;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E4={A,B} (Edge indel by removing edge E3={A,B,C})
            p.first = 46;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2} (Edge indel by removing edge E4={A,B})
            p.first = 54;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={A,B}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 196;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={A,B}, E5={R,B} (Edge indel by adding edge E5={R,B})
            p.first = 198;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A,B}, E3={A,B,C}, E4={A,C}, E5={R,B} (Edge indel by adding edge E5={R,C})
            p.first = 208;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2} (Edge indel by adding edge E5={A,C})
            p.first = 221;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={A,B}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 223;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1,B}, E3={A1,A2,B}, E4={A1,A2}, E5={R,A2,B} (Edge indel by adding edge E5={R,B,C})
            p.first = 227;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={A,B}, E5={R,A,B,C} (Edge indel by adding edge E5={R,A,B,C})
            p.first = 229;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 123: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B}
            // E2={R,A,B}, E3={R,A,C}, E4={A,B} (Edge indel by removing edge E1={R,A,B,C})
            p.first = 46;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E3={R,A,B}, E4={B,C} (Edge indel by removing edge E2={R,A,B})
            p.first = 51;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2} (Edge indel by removing edge E3={R,A,C})
            p.first = 48;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2} (Edge indel by removing edge E4={A,B})
            p.first = 55;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 197;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B}, E5={R,B} (Edge indel by adding edge E5={R,B})
            p.first = 199;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={A,C}, E5={R,B} (Edge indel by adding edge E5={R,C})
            p.first = 209;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1}, E5={A,B2} (Edge indel by adding edge E5={A,C})
            p.first = 222;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B}, E5={B,C} (Edge indel by adding edge E5={B,C})
            p.first = 224;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A,B1}, E4={A1,A2}, E5={R,A2,B} (Edge indel by adding edge E5={R,B,C})
            p.first = 228;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B}, E5={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 229;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 124: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,A2}
            // E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,A2} (Edge indel by removing edge E1={R,A1,A2,B})
            p.first = 47;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E3={A1,A2,B}, E4={A1,A2} (Edge indel by removing edge E2={R,A1,A2})
            p.first = 52;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2} (Edge indel by removing edge E3={A1,A2,B})
            p.first = 48;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B} (Edge indel by removing edge E4={A1,A2})
            p.first = 56;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,B}, E5={R,A} (Edge indel by adding edge E5={R,A1})
            p.first = 200;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,B}, E5={R,A} (Edge indel by adding edge E5={R,A2})
            p.first = 200;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,A2}, E5={R,B} (Edge indel by adding edge E5={R,B})
            p.first = 211;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,B}, E5={A,C} (Edge indel by adding edge E5={A1,B})
            p.first = 225;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,B}, E5={A,C} (Edge indel by adding edge E5={A2,B})
            p.first = 225;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,B}, E5={R,A,C} (Edge indel by adding edge E5={R,A1,B})
            p.first = 229;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,B}, E5={R,A,C} (Edge indel by adding edge E5={R,A2,B})
            p.first = 229;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 125: // E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={B1,B2}
            // E2={R,A,B}, E3={A,B,C}, E4={B,C} (Edge indel by removing edge E1={R,A,B1})
            p.first = 50;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={A,B,C}, E4={B,C} (Edge indel by removing edge E2={R,A,B2})
            p.first = 50;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E4={B1,B2} (Edge indel by removing edge E3={A,B1,B2})
            p.first = 49;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2} (Edge indel by removing edge E4={B1,B2})
            p.first = 54;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={B1,B2}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 206;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={B,C}, E5={R,B} (Edge indel by adding edge E5={R,B1})
            p.first = 201;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A,B}, E3={A,B,C}, E4={B,C}, E5={R,B} (Edge indel by adding edge E5={R,B2})
            p.first = 201;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={B,C}, E5={A,B} (Edge indel by adding edge E5={A,B1})
            p.first = 223;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A,B}, E3={A,B,C}, E4={B,C}, E5={A,B} (Edge indel by adding edge E5={A,B2})
            p.first = 223;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,B}, E2={R,A2,B}, E3={A1,A2,B}, E4={A1,A2}, E5={R,A1,A2} (Edge indel by adding edge E5={R,B1,B2})
            p.first = 227;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={B1,B2}, E5={R,A,B1,B2} (Edge indel by adding edge E5={R,A,B1,B2})
            p.first = 230;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 126: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={B1,B2}
            // E2={R,A,B1}, E3={R,A,B2}, E4={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
            p.first = 49;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E3={R,A,B}, E4={B,C} (Edge indel by removing edge E2={R,A,B1})
            p.first = 51;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E4={B,C} (Edge indel by removing edge E3={R,A,B2})
            p.first = 51;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2} (Edge indel by removing edge E4={B1,B2})
            p.first = 55;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={B1,B2}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 207;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={B,C}, E5={R,B} (Edge indel by adding edge E5={R,B1})
            p.first = 202;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={B,C}, E5={R,B} (Edge indel by adding edge E5={R,B2})
            p.first = 202;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={B,C}, E5={A,B} (Edge indel by adding edge E5={A,B1})
            p.first = 224;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={B,C}, E5={A,B} (Edge indel by adding edge E5={A,B2})
            p.first = 224;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={A1,A2}, E5={R,A1,A2} (Edge indel by adding edge E5={R,B1,B2})
            p.first = 228;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={B1,B2}, E5={A,B1,B2} (Edge indel by adding edge E5={A,B1,B2})
            p.first = 230;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 127: // E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,C}
            // E2={R,A,B}, E3={A,B,C}, E4={B,C} (Edge indel by removing edge E1={R,A,B,C})
            p.first = 50;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E3={A1,A2,B}, E4={A1,A2} (Edge indel by removing edge E2={R,A,B})
            p.first = 52;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E4={B,C} (Edge indel by removing edge E3={A,B,C})
            p.first = 51;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B} (Edge indel by removing edge E4={A,C})
            p.first = 56;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,C}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 203;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={B,C}, E5={R,A} (Edge indel by adding edge E5={R,B})
            p.first = 210;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,C}, E5={R,C} (Edge indel by adding edge E5={R,C})
            p.first = 204;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,C}, E5={A,B} (Edge indel by adding edge E5={A,B})
            p.first = 225;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B} (Edge indel by adding edge E5={B,C})
            p.first = 226;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={A,B,C}, E4={A,B}, E5={R,A,B} (Edge indel by adding edge E5={R,A,C})
            p.first = 229;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={A,B1,B2}, E4={B1,B2}, E5={R,A,B2} (Edge indel by adding edge E5={R,B,C})
            p.first = 230;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 128: // E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={A1,A2,A3}
            // E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2} (Edge indel by removing edge E1={R,A1,A2})
            p.first = 54;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2} (Edge indel by removing edge E2={R,A1,A3})
            p.first = 54;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E4={A,B1,B2} (Edge indel by removing edge E3={R,A2,A3})
            p.first = 54;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3} (Edge indel by removing edge E4={A1,A2,A3})
            p.first = 53;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={A,B1,B2}, E5={R,A} (Edge indel by adding edge E5={R,A1})
            p.first = 212;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E4={A,B1,B2}, E5={R,A} (Edge indel by adding edge E5={R,A2})
            p.first = 212;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2} E5={R,A} (Edge indel by adding edge E5={R,A3})
            p.first = 212;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e1, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by adding edge E5={A1,A2})
            p.first = 227;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by adding edge E5={A1,A3})
            p.first = 227;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,B}, E2={R,A2,B}, E3={R,A1,A2}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by adding edge E5={A2,A3})
            p.first = 227;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e3, e1, e2, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={A1,A2,A3}, E5={R,A1,A2,A3} (Edge indel by adding edge E5={R,A1,A2,A3})
            p.first = 231;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 129: // E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}
            // E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3} (Edge indel by removing edge E1={R,A1,A2,A3})
            p.first = 53;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2} (Edge indel by removing edge E2={R,A1,A2})
            p.first = 55;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,A,B1}, E4={R,A,B2} (Edge indel by removing edge E3={R,A1,A3})
            p.first = 55;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2} (Edge indel by removing edge E4={R,A2,A3})
            p.first = 55;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A} (Edge indel by adding edge E5={R,A1})
            p.first = 213;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E5={R,A} (Edge indel by adding edge E5={R,A2})
            p.first = 213;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,A} (Edge indel by adding edge E5={R,A3})
            p.first = 213;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e2, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={A1,A2} (Edge indel by adding edge E5={A1,A2})
            p.first = 228;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={A1,A2} (Edge indel by adding edge E5={A1,A3})
            p.first = 228;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1,A2}, E5={A1,A2} (Edge indel by adding edge E5={A2,A3})
            p.first = 228;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e4, e2, e3, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={A1,A2,A3} (Edge indel by adding edge E5={A1,A2,A3})
            p.first = 231;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 130: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}
            // E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
            p.first = 54;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E3={R,A1,A2}, E4={A1,A2,B} (Edge indel by removing edge E2={R,A,B1})
            p.first = 56;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2,B} (Edge indel by removing edge E3={R,A,B2})
            p.first = 56;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2} (Edge indel by removing edge E4={A,B1,B2})
            p.first = 55;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={R,A} (Edge indel by adding edge E5={R,A})
            p.first = 214;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={R,B} (Edge indel by adding edge E5={R,B1})
            p.first = 215;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={A,B,C}, E5={R,B} (Edge indel by adding edge E5={R,B2})
            p.first = 215;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B} (Edge indel by adding edge E5={A,B1})
            p.first = 229;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={A,B,C}, E5={A,B} (Edge indel by adding edge E5={A,B2})
            p.first = 229;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={B1,B2} (Edge indel by adding edge E5={B1,B2})
            p.first = 230;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={A1,A2,A3}, E5={R,A2,A3} (Edge indel by adding edge E5={R,B1,B2})
            p.first = 231;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 131: // E1={R,A}, E2={R,B1}, E3={R,B2}, E4={A,B1}, E5={A,B2}
            // E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E1={R,A})
            p.first = 65;
            p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,B}, E3={R,A}, E4={B,C}, E5={A,B} (Edge indel by removing edge E2={R,B1})
            p.first = 61;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e3, e1, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,B}, E2={R,A}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={R,B2})
            p.first = 61;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e1, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={R,B}, E3={R,A2}, E5={A1,A2} (Edge indel by removing edge E4={A,B1})
            p.first = 57;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={R,A2}, E3={R,B}, E4={A1,A2} (Edge indel by removing edge E5={A,B2})
            p.first = 57;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={R,A2}, E3={R,A3}, E4={A1,A2}, E5={A1,A3}, E6={A2,A3} (Edge indel by adding edge E6={B1,B2})
            p.first = 232;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,B1})
            p.first = 233;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, EDGES_ALPHABET[i], e2, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,B}, E2={R,C}, E3={R,A}, E4={B,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,A,B2})
            p.first = 233;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, EDGES_ALPHABET[i], e3, e1, e2, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,B}, E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A2,B}, E6={R,A1,A2} (Edge indel by adding edge E6={R,B1,B2})
            p.first = 234;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e2, e3, e1, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,B1}, E3={R,B2}, E4={A,B1}, E5={A,B2}, E6={A,B1,B2} (Edge indel by adding edge E6={A,B1,B2})
            p.first = 235;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,B1}, E3={R,B2}, E4={A,B1}, E5={A,B2}, E6={R,A,B1,B2} (Edge indel by adding edge E6={R,A,B1,B2})
            p.first = 236;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 132: // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2}
            // E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2} (Edge indel by removing edge E1={R,A1,A2})
            p.first = 57;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B} (Edge indel by removing edge E2={R,A1})
            p.first = 67;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E4={R,C}, E5={A,B} (Edge indel by removing edge E3={R,A2})
            p.first = 67;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B} (Edge indel by removing edge E5={A1,A2})
            p.first = 58;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={B,C} (Edge indel by adding edge E6={A1,B})
            p.first = 233;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={A,B}, E6={B,C} (Edge indel by adding edge E6={A2,B})
            p.first = 233;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={A,B}, E6={R,A,C} (Edge indel by adding edge E6={R,A1,B})
            p.first = 237;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={R,A,C} (Edge indel by adding edge E6={R,A2,B})
            p.first = 237;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2}, E6={A1,A2,B} (Edge indel by adding edge E6={A1,A2,B})
            p.first = 238;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2}, E6={R,A1,A2,B} (Edge indel by adding edge E6={R,A1,A2,B})
            p.first = 239;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 133: // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={B,C}
            // E2={R,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2} (Edge indel by removing edge E1={R,A,B})
            p.first = 57;
            p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e3, e4, e2, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C} (Edge indel by removing edge E2={R,A})
            p.first = 62;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E4={R,C}, E5={B,C} (Edge indel by removing edge E3={R,B})
            p.first = 68;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E5={B,C} (Edge indel by removing edge E4={R,C})
            p.first = 66;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B} (Edge indel by removing edge E5={B,C})
            p.first = 58;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 233;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A2,B}, E6={A1,B} (Edge indel by adding edge E6={A,C})
            p.first = 234;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A}, E3={R,B1}, E4={R,B2}, E5={B1,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,A,C})
            p.first = 240;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,B,C})
            p.first = 237;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e3, e4, e2, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E5={A,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 241;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E5={A,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 242;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, EDGES_ALPHABET[i], e1, e3, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 134: // E1={R,A1}, E2={R,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2}
            // E2={R,B}, E3={R,A}, E4={A,B,C}, E5={B,C} (Edge indel by removing edge E1={R,A1})
            p.first = 69;
            p.second = create_permutations_subset(mismatches, root, c, b, a, p.first, e3, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,B}, E3={R,A}, E4={A,B,C}, E5={B,C} (Edge indel by removing edge E2={R,A2})
            p.first = 69;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e3, e1, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={R,A2}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by removing edge E3={R,B})
            p.first = 63;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={R,A2}, E3={R,B}, E5={A1,A2} (Edge indel by removing edge E4={A1,A2,B})
            p.first = 57;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={R,A2}, E3={R,A3}, E4={A1,A2,A3} (Edge indel by removing edge E5={A1,A2})
            p.first = 59;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E2={R,B1}, E3={R,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by adding edge E6={A1,B})
            p.first = 235;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,B1}, E2={R,A}, E3={R,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by adding edge E6={A2,B})
            p.first = 235;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e1, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2}, E6={R,A1,A2} (Edge indel by adding edge E6={R,A1,A2})
            p.first = 238;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,C}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A1,B})
            p.first = 241;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e3, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A2,B})
            p.first = 241;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e2, e3, e1, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2}, E6={R,A1,A2,B} (Edge indel by adding edge E6={R,A1,A2,B})
            p.first = 243;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 135: // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2}
            // E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2} (Edge indel by removing edge E1={R,A1,A2,B})
            p.first = 57;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E3={R,B}, E4={R,A}, E5={B,C} (Edge indel by removing edge E2={R,A1})
            p.first = 70;
            p.second = create_permutations_subset(mismatches, root, c, b, a, p.first, e1, e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,B}, E4={R,A}, E5={B,C} (Edge indel by removing edge E3={R,A2})
            p.first = 70;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e4, e2, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E5={A1,A2} (Edge indel by removing edge E4={R,B})
            p.first = 64;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={R,A3} (Edge indel by removing edge E5={A1,A2})
            p.first = 60;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,A}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2} (Edge indel by adding edge E6={A1,B})
            p.first = 236;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,B1}, E3={R,A}, E4={R,B2}, E5={A,B1}, E6={A,B2} (Edge indel by adding edge E6={A2,B})
            p.first = 236;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2}, E6={R,A1,A2} (Edge indel by adding edge E6={R,A1,A2})
            p.first = 239;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={R,C}, E4={R,B}, E5={A1,A2}, E6={R,A,B} (Edge indel by adding edge E6={R,A1,B})
            p.first = 242;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,C}, E3={R,A}, E4={R,B}, E5={A1,A2}, E6={R,A,B} (Edge indel by adding edge E6={R,A2,B})
            p.first = 242;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e4, e2, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2}, E6={A1,A2,B} (Edge indel by adding edge E6={A1,A2,B})
            p.first = 243;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 136: // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}
            // E2={R,A1,A2}, E3={R,A1}, E4={R,B}, E5={R,A2} (Edge indel by removing edge E1={R,A,B1})
            p.first = 58;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B} (Edge indel by removing edge E2={R,A,B2})
            p.first = 58;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E4={R,B1}, E5={R,B2} (Edge indel by removing edge E3={R,A})
            p.first = 74;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,C}, E2={R,A,B}, E3={R,A}, E5={R,B} (Edge indel by removing edge E4={R,B1})
            p.first = 71;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B} (Edge indel by removing edge E5={R,B2})
            p.first = 71;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B} (Edge indel by adding edge E6={A,B1})
            p.first = 237;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={R,B}, E6={A,B} (Edge indel by adding edge E6={A,B2})
            p.first = 237;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={B1,B2} (Edge indel by adding edge E6={B1,B2})
            p.first = 240;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A1}, E4={R,A2}, E5={R,A3}, E6={R,A2,A3} (Edge indel by adding edge E6={R,B1,B2})
            p.first = 244;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2} (Edge indel by adding edge E6={A,B1,B2})
            p.first = 245;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={R,A,B1,B2} (Edge indel by adding edge E6={R,A,B1,B2})
            p.first = 246;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 137: // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}
            // E2={R,A1}, E3={R,A2}, E4={R,A3}, E5={A1,A2,A3} (Edge indel by removing edge E1={R,A1,A2})
            p.first = 59;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C} (Edge indel by removing edge E2={R,A1})
            p.first = 75;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E4={R,C}, E5={A,B,C} (Edge indel by removing edge E3={R,A2})
            p.first = 75;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E5={A1,A2,B} (Edge indel by removing edge E4={R,B})
            p.first = 72;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B} (Edge indel by removing edge E5={A1,A2,C})
            p.first = 58;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by adding edge E6={A1,A2})
            p.first = 238;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,C} (Edge indel by adding edge E6={A1,B})
            p.first = 241;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C} (Edge indel by adding edge E6={A2,B})
            p.first = 241;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,A1,B})
            p.first = 245;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,B1}, E3={R,A}, E4={R,B2}, E5={A,B1,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,A2,B})
            p.first = 245;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={R,A1,A2,B} (Edge indel by adding edge E6={R,A1,A2,B})
            p.first = 247;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 138: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}
            // E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B} (Edge indel by removing edge E1={R,A1,A2,B})
            p.first = 58;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,A3}, E3={R,A1}, E4={R,A2}, E5={R,A3} (Edge indel by removing edge E2={R,A1,A2})
            p.first = 60;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C} (Edge indel by removing edge E3={R,A1})
            p.first = 76;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={R,C} (Edge indel by removing edge E4={R,A2})
            p.first = 76;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2} (Edge indel by removing edge E5={R,B})
            p.first = 73;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2} (Edge indel by adding edge E6={A1,A2})
            p.first = 239;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,C} (Edge indel by adding edge E6={A1,C})
            p.first = 242;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={A,C} (Edge indel by adding edge E6={A2,C})
            p.first = 242;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,A1,C})
            p.first = 246;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1}, E4={R,A}, E5={R,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,A2,C})
            p.first = 246;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B} (Edge indel by adding edge E6={A1,A2,B})
            p.first = 247;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 139: // E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={R,A3}, E5={A1,A2,A3}
            // E2={R,A1}, E3={R,A2}, E4={R,A3}, E5={A1,A2,A3} (Edge indel by removing edge E1={R,A1,A2,A3})
            p.first = 59;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B} (Edge indel by removing edge E2={R,A1})
            p.first = 77;
            p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1}, E4={R,A2}, E5={A1,A2,B} (Edge indel by removing edge E3={R,A2})
            p.first = 77;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E5={A1,A2,B} (Edge indel by removing edge E4={R,A3})
            p.first = 77;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={R,A3} (Edge indel by removing edge E5={A1,A2,A3})
            p.first = 60;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by adding edge E6={A1,A2})
            p.first = 243;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,B}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by adding edge E6={A1,A3})
            p.first = 243;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e4, e3, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by adding edge E6={A2,A3})
            p.first = 243;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e3, e4, e2, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={R,A1,A2} (Edge indel by adding edge E6={R,A1,A2})
            p.first = 247;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,B}, E4={R,A2}, E5={A1,A2,B}, E6={R,A1,A2} (Edge indel by adding edge E6={R,A1,A3})
            p.first = 247;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={R,A1,A2} (Edge indel by adding edge E6={R,A2,A3})
            p.first = 247;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e4, e2, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 140: // E1={R,A1}, E2={R,A2}, E3={A1,A2}, E4={A1,B}, E5={A2,B}
            // E2={R,A}, E3={A,B1}, E4={B1,B2}, E5={A2,B} (Edge indel by removing edge E1={R,A1})
            p.first = 78;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E3={A,B1}, E4={A,B2}, E5={B1,B2} (Edge indel by removing edge E2={R,A2})
            p.first = 78;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={R,A2}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E3={A1,A2})
            p.first = 65;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E2={R,B}, E3={A,B}, E5={B,C} (Edge indel by removing edge E4={A1,B})
            p.first = 61;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,B}, E2={R,A}, E3={A,B}, E4={B,C} (Edge indel by removing edge E5={A2,B})
            p.first = 61;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={R,A2}, E3={A1,A2}, E4={A1,A3}, E5={A2,A3}, E6={R,A3} (Edge indel by adding edge E6={R,B})
            p.first = 232;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={A1,A2}, E4={A1,B}, E5={A2,B}, E6={R,A1,A2} (Edge indel by adding edge E6={R,A1,A2})
            p.first = 248;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,C}, E3={A,C}, E4={A,B}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A1,B})
            p.first = 249;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,C}, E2={R,A}, E3={A,C}, E4={B,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,A2,B})
            p.first = 249;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e2, e1, e5, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={A1,A2}, E4={A1,B}, E5={A2,B}, E6={A1,A2,B} (Edge indel by adding edge E6={A1,A2,B})
            p.first = 250;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={A1,A2}, E4={A1,B}, E5={A2,B}, E6={R,A1,A2,B} (Edge indel by adding edge E6={R,A1,A2,B})
            p.first = 251;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 141: // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B}, E5={B,C}
            // E2={R,A}, E3={R,B}, E4={A,B}, E5={B,C} (Edge indel by removing edge E1={R,A,B})
            p.first = 61;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,A}, E4={A,B}, E5={A,C} (Edge indel by removing edge E2={R,A})
            p.first = 79;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={R,B})
            p.first = 83;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E5={B,C} (Edge indel by removing edge E4={A,B})
            p.first = 66;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B}, E5={B,C}, E6={R,C} (Edge indel by adding edge E6={R,C})
            p.first = 233;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2}, E5={A2,B}, E6={A1,B} (Edge indel by adding edge E6={A,C})
            p.first = 248;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B}, E5={B,C}, E6={R,A,C} (Edge indel by adding edge E6={R,A,C})
            p.first = 253;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={R,A}, E4={A,B}, E5={A,C}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 252;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B}, E5={B,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 254;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B}, E5={B,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 255;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 142: // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={A,C}
            // E2={R,B}, E3={R,A}, E4={B,C}, E5={A,B} (Edge indel by removing edge E1={R,A,B})
            p.first = 61;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e3, e2, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,C}, E4={A,B}, E5={A,C} (Edge indel by removing edge E2={R,A})
            p.first = 85;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E4={A,B}, E5={A,C} (Edge indel by removing edge E3={R,C})
            p.first = 79;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E5={A,C} (Edge indel by removing edge E4={A,B})
            p.first = 62;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B} (Edge indel by removing edge E5={A,C})
            p.first = 67;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,B}, E3={R,C}, E4={A,B}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,B})
            p.first = 233;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={A,C}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 249;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A}, E3={R,B}, E4={A,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 252;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={R,A}, E4={A,B}, E5={B,C}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 256;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={A,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 257;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={A,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 258;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 143: // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,C}, E5={B,C}
            // E2={R,A}, E3={R,B}, E4={A,B}, E5={B,C} (Edge indel by removing edge E1={R,A,B})
            p.first = 61;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E3={R,B}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E2={R,A})
            p.first = 80;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E4={A,C}, E5={B,C} (Edge indel by removing edge E3={R,C})
            p.first = 84;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E5={B,C} (Edge indel by removing edge E4={A,C})
            p.first = 68;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,C} (Edge indel by removing edge E5={B,C})
            p.first = 62;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1}, E3={R,B}, E4={A1,B}, E5={A2,B}, E6={R,A2} (Edge indel by adding edge E6={R,B})
            p.first = 234;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,C}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 249;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A}, E3={R,B}, E4={A,B}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 253;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,C}, E3={R,B}, E4={B,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,B,C})
            p.first = 256;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e3, e2, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,C}, E5={B,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 259;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,C}, E5={B,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 260;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 144: // E1={R,A}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={B,C}
            // E2={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E1={R,A})
            p.first = 81;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C} (Edge indel by removing edge E2={R,B})
            p.first = 86;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E2={R,B}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={A,B,C})
            p.first = 61;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E2={R,B}, E3={A,B,C}, E5={B,C} (Edge indel by removing edge E4={A,B})
            p.first = 69;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={A1,A2} (Edge indel by removing edge E5={B,C})
            p.first = 63;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,B1}, E2={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={R,B2} (Edge indel by adding edge E6={R,C})
            p.first = 235;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e1, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={A1,A2}, E5={A2,B}, E6={A1,B} (Edge indel by adding edge E6={A,C})
            p.first = 250;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,B})
            p.first = 254;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,C}, E3={A,B,C}, E4={A,C}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 259;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,C}, E2={R,A}, E3={A,B,C}, E4={A,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,B,C})
            p.first = 257;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e2, e1, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 261;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 145: // E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={A,B}, E5={B,C}
            // E2={R,A}, E3={R,B}, E4={A,B}, E5={B,C} (Edge indel by removing edge E1={R,A,B,C})
            p.first = 61;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E3={R,A}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E2={R,A})
            p.first = 82;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={R,B})
            p.first = 87;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A}, E3={R,B}, E5={B,C} (Edge indel by removing edge E4={A,B})
            p.first = 70;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2} (Edge indel by removing edge E5={B,C})
            p.first = 64;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,B1}, E3={R,A}, E4={A,B1}, E5={A,B2}, E6={R,B2} (Edge indel by adding edge E6={R,C})
            p.first = 236;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2}, E5={A2,B}, E6={A1,B} (Edge indel by adding edge E6={A,C})
            p.first = 251;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={A,B}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,B})
            p.first = 255;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={R,C}, E4={A,C}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 260;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,C}, E3={R,A}, E4={A,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,B,C})
            p.first = 258;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e2, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={A,B}, E5={B,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 261;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 146: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}
            // E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C} (Edge indel by removing edge E1={R,A,B})
            p.first = 62;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={A,B} (Edge indel by removing edge E3={R,A})
            p.first = 89;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E5={A,B} (Edge indel by removing edge E4={R,B})
            p.first = 88;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B} (Edge indel by removing edge E5={A,B})
            p.first = 71;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={R,C} (Edge indel by adding edge E6={R,C})
            p.first = 237;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 252;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 253;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2}, E6={R,A2,B} (Edge indel by adding edge E6={R,B,C})
            p.first = 262;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 263;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 264;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 147: // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}
            // E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by removing edge E1={R,A1,A2})
            p.first = 63;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E2={R,A1})
            p.first = 90;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E3={R,A2})
            p.first = 90;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B} (Edge indel by removing edge E5={A1,A2})
            p.first = 72;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 238;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by adding edge E6={A1,B})
            p.first = 254;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by adding edge E6={A2,B})
            p.first = 254;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={R,A,C} (Edge indel by adding edge E6={R,A1,B})
            p.first = 263;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={R,A,C} (Edge indel by adding edge E6={R,A2,B})
            p.first = 263;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={R,A1,A2,B} (Edge indel by adding edge E6={R,A1,A2,B})
            p.first = 265;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 148: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2}
            // E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2} (Edge indel by removing edge E2={R,A1,A2})
            p.first = 64;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B} (Edge indel by removing edge E3={R,A1})
            p.first = 91;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B} (Edge indel by removing edge E4={R,A2})
            p.first = 91;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2} (Edge indel by removing edge E5={A1,A2})
            p.first = 73;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 239;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B}, E6={B,C} (Edge indel by adding edge E6={A1,B})
            p.first = 255;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B}, E6={B,C} (Edge indel by adding edge E6={A2,B})
            p.first = 255;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B}, E6={R,A,C} (Edge indel by adding edge E6={R,A1,B})
            p.first = 264;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B}, E6={R,A,C} (Edge indel by adding edge E6={R,A2,B})
            p.first = 264;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2}, E6={A1,A2,B} (Edge indel by adding edge E6={A1,A2,B})
            p.first = 265;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 149: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={B1,B2}
            // E2={R,A,B}, E3={R,C}, E4={R,A}, E5={A,C} (Edge indel by removing edge E1={R,A,B1})
            p.first = 62;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C} (Edge indel by removing edge E2={R,A,B2})
            p.first = 62;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,C}, E2={R,A,B}, E4={R,B}, E5={B,C} (Edge indel by removing edge E3={R,B1})
            p.first = 92;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={B,C} (Edge indel by removing edge E4={R,B2})
            p.first = 92;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2} (Edge indel by removing edge E5={B1,B2})
            p.first = 74;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={B1,B2}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 240;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B1})
            p.first = 256;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A,B}, E3={R,C}, E4={R,B}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B2})
            p.first = 256;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e3, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,B}, E2={R,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2}, E6={R,A1,A2} (Edge indel by adding edge E6={R,B1,B2})
            p.first = 262;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={B1,B2}, E6={A,B1,B2} (Edge indel by adding edge E6={A,B1,B2})
            p.first = 266;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={B1,B2}, E6={R,A,B1,B2} (Edge indel by adding edge E6={R,A,B1,B2})
            p.first = 267;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 150: // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,C}
            // E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by removing edge E1={R,A,B})
            p.first = 63;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E2={R,A})
            p.first = 95;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E3={R,C})
            p.first = 93;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E5={A,C} (Edge indel by removing edge E4={A,B,C})
            p.first = 62;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C} (Edge indel by removing edge E5={A,C})
            p.first = 75;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,C}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 241;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 257;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,C}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 259;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 263;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,B1}, E3={R,B2}, E4={A,B1,B2}, E5={B1,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,B,C})
            p.first = 266;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 268;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 151: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C}
            // E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C} (Edge indel by removing edge E1={R,A,B,C})
            p.first = 62;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2} (Edge indel by removing edge E2={R,A,B})
            p.first = 64;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E4={R,C}, E5={A,C} (Edge indel by removing edge E3={R,A})
            p.first = 96;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,C} (Edge indel by removing edge E4={R,C})
            p.first = 94;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C} (Edge indel by removing edge E5={A,C})
            p.first = 76;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 242;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 258;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 260;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 264;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1}, E4={R,B2}, E5={B1,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,B,C})
            p.first = 267;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 268;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 152: // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}
            // E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by removing edge E1={R,A1,A2,B})
            p.first = 63;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E3={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E2={R,A1})
            p.first = 97;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E3={R,A2})
            p.first = 97;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E5={A1,A2} (Edge indel by removing edge E4={A1,A2,B})
            p.first = 64;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B} (Edge indel by removing edge E5={A1,A2})
            p.first = 77;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 243;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by adding edge E6={A1,B})
            p.first = 255;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by adding edge E6={A2,B})
            p.first = 255;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={R,A1,A2} (Edge indel by adding edge E6={R,A1,A2})
            p.first = 265;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A1,B})
            p.first = 268;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,C}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A2,B})
            p.first = 268;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 153: // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A2,B}
            // E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E1={R,A1,A2})
            p.first = 65;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,A}, E4={B,C}, E5={A,C} (Edge indel by removing edge E2={R,A1})
            p.first = 84;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E4={A,C}, E5={B,C} (Edge indel by removing edge E3={R,A2})
            p.first = 84;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E5={B,C} (Edge indel by removing edge E4={A1,B})
            p.first = 66;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,B}, E3={R,A}, E4={B,C} (Edge indel by removing edge E5={A2,B})
            p.first = 66;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A2,B}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 234;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A2,B}, E6={A1,A2} (Edge indel by adding edge E6={A1,A2})
            p.first = 248;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,C}, E5={B,C}, E6={R,A,C} (Edge indel by adding edge E6={R,A1,B})
            p.first = 269;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B}, E3={R,A}, E4={B,C}, E5={A,C}, E6={R,A,C} (Edge indel by adding edge E6={R,A2,B})
            p.first = 269;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A2,B}, E6={A1,A2,B} (Edge indel by adding edge E6={A1,A2,B})
            p.first = 270;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A2,B}, E6={R,A1,A2,B} (Edge indel by adding edge E6={R,A1,A2,B})
            p.first = 271;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 154: // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={B,C}
            // E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E1={R,A,B})
            p.first = 65;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,C}, E4={A,B}, E5={A,C} (Edge indel by removing edge E2={R,A})
            p.first = 85;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={R,C})
            p.first = 83;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E5={B,C} (Edge indel by removing edge E4={A,B})
            p.first = 68;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B} (Edge indel by removing edge E5={B,C})
            p.first = 67;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 233;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={B,C}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 249;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,C}, E2={R,A}, E3={R,B}, E4={A,C}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 269;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B1}, E2={R,B1}, E3={R,B2}, E4={A,B1}, E5={A,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,B,C})
            p.first = 272;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={B,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 273;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={B,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 274;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 155: // E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B}
            // E2={R,A}, E3={A,B,C}, E4={B,C}, E5={A,B} (Edge indel by removing edge E1={R,A1})
            p.first = 86;
            p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C} (Edge indel by removing edge E2={R,A2})
            p.first = 86;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A1}, E2={R,A2}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E3={A1,A2,B})
            p.first = 65;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A}, E2={R,B}, E3={A,B,C}, E5={B,C} (Edge indel by removing edge E4={A1,B})
            p.first = 69;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,B}, E2={R,A}, E3={A,B,C}, E4={B,C} (Edge indel by removing edge E5={A2,B})
            p.first = 69;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e1, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,B1}, E2={R,B2}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={R,A} (Edge indel by adding edge E6={R,B})
            p.first = 235;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B}, E6={A1,A2} (Edge indel by adding edge E6={A1,A2})
            p.first = 250;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B}, E6={R,A1,A2} (Edge indel by adding edge E6={R,A1,A2})
            p.first = 270;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A}, E2={R,C}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A1,B})
            p.first = 273;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,C}, E2={R,A}, E3={A,B,C}, E4={B,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,A2,B})
            p.first = 273;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e2, e1, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B}, E6={R,A1,A2,B} (Edge indel by adding edge E6={R,A1,A2,B})
            p.first = 275;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 156: // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A2,B}
            // E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
            p.first = 65;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E3={R,A}, E4={B,C}, E5={A,B} (Edge indel by removing edge E2={R,A1})
            p.first = 87;
            p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={R,A2})
            p.first = 87;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,A}, E3={R,B}, E5={B,C} (Edge indel by removing edge E4={A1,B})
            p.first = 70;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B,C}, E2={R,B}, E3={R,A}, E4={B,C} (Edge indel by removing edge E5={A2,B})
            p.first = 70;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1,B2}, E2={R,B1}, E3={R,B2}, E4={A,B1}, E5={A,B2}, E6={R,A} (Edge indel by adding edge E1={R,B})
            p.first = 236;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A2,B}, E6={A1,A2} (Edge indel by adding edge E6={A1,A2})
            p.first = 251;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A2,B}, E6={R,A1,A2} (Edge indel by adding edge E6={R,A1,A2})
            p.first = 271;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,A}, E3={R,C}, E4={A,B}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A1,B})
            p.first = 274;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B,C}, E2={R,C}, E3={R,A}, E4={B,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,A2,B})
            p.first = 274;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e2, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A2,B}, E6={A1,A2,B} (Edge indel by adding edge E6={A1,A2,B})
            p.first = 275;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

        case 157: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 67;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E3={R,B}, E4={R,A}, E5={B,C} (Edge indel by removing edge E2={R,A,C})
            p.first = 66;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={A,C} (Edge indel by removing edge E3={R,A})
            p.first = 99;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,C}, E2={R,A,B}, E3={R,A}, E5={A,B} (Edge indel by removing edge E4={R,B})
            p.first = 88;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B} (Edge indel by removing edge E5={A,C})
            p.first = 71;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
            insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
            update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={R,B} (Edge indel by adding edge E6={R,C})
            p.first = 237;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 252;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,C}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 269;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,C}, E6={R,B,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 276;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 277;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 278;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;
		
		case 158: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 68;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,B}, E5={B,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 66;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={B,C} (Edge indel by removing edge E3={R,A})
			p.first = 92;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E5={B1,B2} (Edge indel by removing edge E4={R,B})
			p.first = 98;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B} (Edge indel by removing edge E5={B,C})
			p.first = 71;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

            // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={B1,B2}, E6={R,B2} (Edge indel by adding edge E6={R,C})
            p.first = 240;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 253;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={B,C}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 269;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,B,C}, E3={R,B}, E4={R,A}, E5={A,C}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 276;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={B,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 279;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

            // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={B,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 280;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;
		
		case 159: // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={B,C}
			// E2={R,A}, E3={R,B}, E4={A,B,C}, E5={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 69;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E2={R,A})
			p.first = 93;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={A,B,C}, E5={B,C} (Edge indel by removing edge E3={R,B})
			p.first = 100;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E5={B,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 66;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B} (Edge indel by removing edge E5={B,C})
			p.first = 72;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={R,C} (Edge indel by adding edge E6={R,C})
            p.first = 241;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 254;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A2,B}, E6={A1,B} (Edge indel by adding edge E6={A,C})
            p.first = 270;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={B,C}, E6={R,A,C} (Edge indel by adding edge E6={R,A,C})
            p.first = 279;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 277;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={B,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 281;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;
		
		case 160: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,B}, E5={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 66;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={R,B}, E5={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 70;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 94;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={B,C} (Edge indel by removing edge E4={R,B})
			p.first = 101;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2} (Edge indel by removing edge E5={B,C})
			p.first = 73;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={A,C}, E6={R,C} (Edge indel by adding edge E6={R,C})
            p.first = 242;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 255;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A2,B}, E6={A1,B} (Edge indel by adding edge E6={A,C})
            p.first = 271;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={B,C}, E6={R,A,C} (Edge indel by adding edge E6={R,A,C})
            p.first = 280;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={A,C}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 278;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={B,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 281;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;
		
		case 161: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B}
			// E2={R,A,B}, E3={R,C}, E4={R,A}, E5={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 68;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B} (Edge indel by removing edge E2={R,A,C})
			p.first = 67;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E4={R,B}, E5={A,C} (Edge indel by removing edge E3={R,B})
			p.first = 99;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={A,B} (Edge indel by removing edge E4={R,C})
			p.first = 89;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2} (Edge indel by removing edge E5={A,B})
			p.first = 74;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 237;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2} (Edge indel by adding edge E6={A,C})
            p.first = 272;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 256;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,B,C}, E3={R,A}, E4={R,B}, E5={A,C}, E6={R,A,B} (Edge indel by adding edge E6={R,B,C})
            p.first = 276;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 282;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 283;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;
		
		case 162: // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}
			// E2={R,B}, E3={R,A}, E4={A,B,C}, E5={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 69;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e3, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by removing edge E2={R,A})
			p.first = 102;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E3={R,C})
			p.first = 90;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E5={A,B} (Edge indel by removing edge E4={A,B,C})
			p.first = 67;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C} (Edge indel by removing edge E5={A,B})
			p.first = 76;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2}, E6={R,A2} (Edge indel by adding edge E6={R,B})
            p.first = 238;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 257;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 273;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 277;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 282;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 284;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;
		
		case 163: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 67;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,B}, E4={R,A}, E5={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 70;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,B}, E5={A1,A2} (Edge indel by removing edge E3={R,A})
			p.first = 103;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B} (Edge indel by removing edge E4={R,C})
			p.first = 91;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C} (Edge indel by removing edge E5={A,B})
			p.first = 76;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,B}, E5={A1,A2}, E6={R,A2} (Edge indel by adding edge E6={R,B})
            p.first = 239;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 258;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 274;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 278;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,C}, E5={A,B}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 283;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 284;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;
		
		case 164: // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={B,C}
			// E2={R,A}, E3={R,B}, E4={A,B,C}, E5={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 69;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E2={R,A})
			p.first = 95;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={A,B,C}, E5={B,C} (Edge indel by removing edge E3={R,C})
			p.first = 100;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E5={B,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 68;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C} (Edge indel by removing edge E5={B,C})
			p.first = 75;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B}, E3={R,C}, E4={A,B,C}, E5={A,C}, E6={R,A} (Edge indel by adding edge E6={R,B})
            p.first = 241;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 273;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={B,C}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 259;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 279;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,B,C})
            p.first = 282;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e3, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={B,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 285;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;
		
		case 165: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 68;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={R,B}, E5={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 70;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,C}, E5={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 96;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={B,C} (Edge indel by removing edge E4={R,C})
			p.first = 101;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C} (Edge indel by removing edge E5={B,C})
			p.first = 76;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,C}, E5={A,C}, E6={R,A} (Edge indel by adding edge E6={R,B})
            p.first = 242;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 274;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={B,C}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 260;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 280;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,C}, E4={R,B}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,B,C})
            p.first = 283;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={B,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 285;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;
		
		case 166: // E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={B,C}
			// E2={R,A}, E3={R,B}, E4={A,B,C}, E5={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 69;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E2={R,A})
			p.first = 97;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A}, E4={A,B1,B2}, E5={B,C} (Edge indel by removing edge E3={R,B})
			p.first = 104;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A}, E3={R,B}, E5={B,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 70;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B} (Edge indel by removing edge E5={B,C})
			p.first = 77;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,B}, E3={R,A1}, E4={A1,A2,B}, E5={A1,A2}, E6={R,A2} (Edge indel by adding edge E6={R,C})
            p.first = 243;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e3, EDGES_ALPHABET[i], e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 261;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A2,B}, E6={A1,B} (Edge indel by adding edge E6={A,C})
            p.first = 275;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,B})
            p.first = 281;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 285;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,B,C})
            p.first = 284;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;
		
		case 167: // E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 74;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,A} (Edge indel by removing edge E2={R,A1,B})
			p.first = 71;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,A}, E5={R,B} (Edge indel by removing edge E3={R,A2,B})
			p.first = 71;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E5={R,A} (Edge indel by removing edge E4={R,A1})
			p.first = 105;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A} (Edge indel by removing edge E5={R,A2})
			p.first = 105;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3} (Edge indel by adding edge E6={R,B})
            p.first = 244;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2} (Edge indel by adding edge E6={A1,A2})
            p.first = 262;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,C} (Edge indel by adding edge E6={A1,A3})
            p.first = 276;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={A,C} (Edge indel by adding edge E6={A2,A3})
            p.first = 276;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B} (Edge indel by adding edge E6={A1,A2,B})
            p.first = 286;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={R,A1,A2,B} (Edge indel by adding edge E6={R,A1,A2,B})
            p.first = 287;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;
		
		case 168: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 75;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B} (Edge indel by removing edge E2={R,A,C})
			p.first = 72;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={A,B,C} (Edge indel by removing edge E3={R,A})
			p.first = 108;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E5={A,B1,B2} (Edge indel by removing edge E4={R,B})
			p.first = 106;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B} (Edge indel by removing edge E5={A,B,C})
			p.first = 71;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={A,B1,B2}, E6={R,B2} (Edge indel by adding edge E6={R,C})
            p.first = 245;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 263;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 277;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 279;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={R,A2,B} (Edge indel by adding edge E6={R,B,C})
            p.first = 286;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 288;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 169: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 71;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 76;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,A1}, E5={R,A2} (Edge indel by removing edge E3={R,A,C})
			p.first = 73;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B} (Edge indel by removing edge E4={R,A})
			p.first = 109;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A} (Edge indel by removing edge E5={R,B})
			p.first = 107;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2} (Edge indel by adding edge E6={R,C})
            p.first = 246;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 264;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 278;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 280;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A1}, E5={R,A2}, E6={R,A2,B} (Edge indel by adding edge E6={R,B,C})
            p.first = 287;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 288;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 170: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}
			// E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 72;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 77;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C} (Edge indel by removing edge E3={R,A1})
			p.first = 110;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B,C} (Edge indel by removing edge E4={R,A2})
			p.first = 110;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2} (Edge indel by removing edge E5={A1,A2,B})
			p.first = 73;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 247;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by adding edge E6={A1,A2})
            p.first = 265;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B,C}, E6={B,C} (Edge indel by adding edge E6={A1,B})
            p.first = 281;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={B,C} (Edge indel by adding edge E6={A2,B})
            p.first = 281;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={R,A,C} (Edge indel by adding edge E6={R,A1,B})
            p.first = 288;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B,C}, E6={R,A,C} (Edge indel by adding edge E6={R,A2,B})
            p.first = 288;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 171: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}
			// E2={R,A,B}, E3={R,C}, E4={R,A}, E5={A,B,C} (Edge indel by removing edge E1={R,A,B1})
			p.first = 75;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 75;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E4={R,B}, E5={A,B,C} (Edge indel by removing edge E3={R,B1})
			p.first = 108;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={A,B,C} (Edge indel by removing edge E4={R,B2})
			p.first = 108;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2} (Edge indel by removing edge E5={A,B1,B2})
			p.first = 74;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 245;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B} (Edge indel by adding edge E6={A,B1})
            p.first = 282;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,C}, E4={R,B}, E5={A,B,C}, E6={A,B} (Edge indel by adding edge E6={A,B2})
            p.first = 282;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e3, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={B1,B2} (Edge indel by adding edge E6={B1,B2})
            p.first = 266;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={R,A1,A2} (Edge indel by adding edge E6={R,B1,B2})
            p.first = 286;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={R,A,B1,B2} (Edge indel by adding edge E6={R,A,B1,B2})
            p.first = 289;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 172: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 74;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={R,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 76;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,B}, E5={R,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 76;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E5={R,B} (Edge indel by removing edge E4={R,B1})
			p.first = 109;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B} (Edge indel by removing edge E5={R,B2})
			p.first = 109;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 246;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B} (Edge indel by adding edge E6={A,B1})
            p.first = 283;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,C}, E5={R,B}, E6={A,B} (Edge indel by adding edge E6={A,B2})
            p.first = 283;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={B1,B2} (Edge indel by adding edge E6={B1,B2})
            p.first = 267;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,B}, E4={R,A1}, E5={R,A2}, E6={R,A1,A2} (Edge indel by adding edge E6={R,B1,B2})
            p.first =287 ;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2} (Edge indel by adding edge E6={A,B1,B2})
            p.first = 289;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 173: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 75;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 77;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,B}, E5={A1,A2,B} (Edge indel by removing edge E3={R,A})
			p.first = 111;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B,C} (Edge indel by removing edge E4={R,C})
			p.first = 110;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 76;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,B}, E5={A1,A2,B}, E6={R,A2} (Edge indel by adding edge E6={R,B})
            p.first = 247;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 284;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 268;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 285;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 288;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,B,C})
            p.first = 289;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 174: // E1={R,A,B}, E2={R,A}, E3={A,B}, E4={A,C}, E5={B,C}
			// E2={R,A}, E3={A,B1}, E4={A,B2}, E5={B1,B2} (Edge indel by removing edge E1={R,A,B})
			p.first = 78;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={A1,A2}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E2={R,A})
			p.first = 112;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={A,C}, E5={B,C} (Edge indel by removing edge E3={A,B})
			p.first = 84;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={A,B}, E5={B,C} (Edge indel by removing edge E4={A,C})
			p.first = 83;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={A,B}, E4={A,C} (Edge indel by removing edge E5={B,C})
			p.first = 79;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={A1,A2}, E4={A1,B}, E5={A2,B}, E6={R,A2} (Edge indel by adding edge E6={R,B})
            p.first = 248;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,B}, E4={A,C}, E5={B,C}, E6={R,C} (Edge indel by adding edge E6={R,C})
            p.first = 249;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A}, E3={A,B1}, E4={A,B2}, E5={B1,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,A,C})
            p.first = 290;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={A,B}, E4={B,C}, E5={A,C}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 291;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,B}, E4={A,C}, E5={B,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 292;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,B}, E4={A,C}, E5={B,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 293;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 175: // E1={R,A1,A2}, E2={R,B}, E3={A1,A2}, E4={A1,B}, E5={A2,B}
			// E2={R,A}, E3={B1,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 78;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e4, e5, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={A1,A2}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E2={R,B})
			p.first = 112;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,B}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E3={A1,A2})
			p.first = 80;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,C}, E3={A,B}, E5={A,C} (Edge indel by removing edge E4={A1,B})
			p.first = 85;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,C}, E3={A,B}, E4={A,C} (Edge indel by removing edge E5={A2,B})
			p.first = 85;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,C}, E3={A,B}, E4={A,C}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,A1})
            p.first = 249;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,C}, E3={A,B}, E4={B,C}, E5={A,C}, E6={R,A} (Edge indel by adding edge E6={R,A2})
            p.first = 249;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,B}, E3={A,C}, E4={A,B}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A1,B})
            p.first = 291;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,B}, E3={A,C}, E4={B,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,A2,B})
            p.first = 291;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e5, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,B}, E3={A1,A2}, E4={A1,B}, E5={A2,B}, E6={A1,A2,B} (Edge indel by adding edge E6={A1,A2,B})
            p.first = 294;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,B}, E3={A1,A2}, E4={A1,B}, E5={A2,B}, E6={R,A1,A2,B} (Edge indel by adding edge E6={R,A1,A2,B})
            p.first = 295;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 176: // E1={R,A}, E2={A,B1,B2}, E3={A,B1}, E4={A,B2}, E5={B1,B2}
			// E1={R,A}, E3={A,B1}, E4={A,B2}, E5={B1,B2} (Edge indel by removing edge E2={A,B1,B2})
			p.first = 78;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A}, E2={A,B,C}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={A,B1})
			p.first = 86;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A}, E2={A,B,C}, E3={A,B}, E5={B,C} (Edge indel by removing edge E4={A,B2})
			p.first = 86;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A}, E2={A,B1,B2}, E3={A,B1}, E4={A,B2} (Edge indel by removing edge E5={B1,B2})
			p.first = 81;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1}, E2={A1,A2,B}, E3={A1,A2}, E4={A1,B}, E5={A2,B}, E6={R,A2} (Edge indel by adding edge E6={R,B1})
            p.first = 250;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={A1,A2,B}, E3={A1,B}, E4={A1,A2}, E5={A2,B}, E6={R,A2} (Edge indel by adding edge E6={R,B2})
            p.first = 250;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={A,B,C}, E3={A,B}, E4={A,C}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,B1})
            p.first = 292;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={A,B,C}, E3={A,C}, E4={A,B}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,B2})
            p.first = 292;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,B}, E2={A1,A2,B}, E3={A1,B}, E4={A2,B}, E5={A1,A2}, E6={R,A1,A2} (Edge indel by adding edge E6={R,B1,B2})
            p.first = 294;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e5, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={A,B1,B2}, E3={A,B1}, E4={A,B2}, E5={B1,B2}, E6={R,A,B1,B2} (Edge indel by adding edge E6={R,A,B1,B2})
            p.first = 296;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 177: // E1={R,A,B1,B2}, E2={R,A}, E3={A,B1}, E4={A,B2}, E5={B1,B2}
			// E2={R,A}, E3={A,B1}, E4={A,B2}, E5={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 78;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E3={A1,A2}, E4={A1,A3}, E5={A2,A3} (Edge indel by removing edge E2={R,A})
			p.first = 113;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={A,B1})
			p.first = 87;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A}, E3={A,B}, E5={B,C} (Edge indel by removing edge E4={A,B2})
			p.first = 87;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A}, E3={A,B1}, E4={A,B2} (Edge indel by removing edge E5={B1,B2})
			p.first = 82;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={A1,A2}, E4={A1,B}, E5={A2,B}, E6={R,A2} (Edge indel by adding edge E6={R,B1})
            p.first = 251;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1}, E3={A1,B}, E4={A1,A2}, E5={A2,B}, E6={R,A2} (Edge indel by adding edge E6={R,B2})
            p.first = 251;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={A,B}, E4={A,C}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,B1})
            p.first = 293;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={A,C}, E4={A,B}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,B2})
            p.first = 293;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,B}, E3={A1,B}, E4={A2,B}, E5={A1,A2}, E6={R,A1,A2} (Edge indel by adding edge E6={R,B1,B2})
            p.first = 295;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e5, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A}, E3={A,B1}, E4={A,B2}, E5={B1,B2}, E6={A,B1,B2} (Edge indel by adding edge E6={A,B1,B2})
            p.first = 296;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 178: // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1}, E5={A,B2}
			// E2={R,A,B}, E3={R,A}, E4={A,C}, E5={A,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 79;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B}, E5={A,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 79;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E3={R,A})
			p.first = 114;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E5={A,B} (Edge indel by removing edge E4={A,B1})
			p.first = 88;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B} (Edge indel by removing edge E5={A,B2})
			p.first = 88;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B}, E5={A,C}, E6={R,B} (Edge indel by adding edge E6={R,B1})
            p.first = 252 ;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={A,C}, E5={A,B}, E6={R,B} (Edge indel by adding edge E6={R,B2})
            p.first = 252;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1}, E5={A,B2}, E6={B1,B2} (Edge indel by adding edge E6={B1,B2})
            p.first = 290;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1}, E5={A,B2}, E6={R,B1,B2} (Edge indel by adding edge E6={R,B1,B2})
            p.first = 297;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1}, E5={A,B2}, E6={A,B1,B2} (Edge indel by adding edge E6={A,B1,B2})
            p.first = 298;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1}, E5={A,B2}, E6={R,A,B1,B2} (Edge indel by adding edge E6={R,A,B1,B2})
            p.first = 299;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 179: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={B,C}
			// E2={R,A1,A2}, E3={R,B}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 80;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B}, E5={A,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 79;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={R,B})
			p.first = 115;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={B,C} (Edge indel by removing edge E4={A,B})
			p.first = 92;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B} (Edge indel by removing edge E5={B,C})
			p.first = 89;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 253;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={B,C}, E6={R,C} (Edge indel by adding edge E6={R,C})
            p.first = 256;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={B,C}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 291;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A}, E4={A,B1}, E5={A,B2}, E6={R,A,B2} (Edge indel by adding edge E4={R,B,C})
            p.first = 297;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={B,C}, E6={A,B,C} (Edge indel by adding edge E5={A,B,C})
            p.first = 300;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={B,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 301;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 180: // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={A,C}
			// E2={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E1={R,A,B})
			p.first = 81;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={A,B,C}, E4={A,B}, E5={B,C} (Edge indel by removing edge E2={R,A})
			p.first = 116;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={A,B}, E5={A,C} (Edge indel by removing edge E3={A,B,C})
			p.first = 79;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E5={A,C} (Edge indel by removing edge E4={A,B})
			p.first = 93;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B} (Edge indel by removing edge E5={A,C})
			p.first = 90;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,B})
            p.first = 254;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={R,C} (Edge indel by adding edge E6={R,C})
            p.first = 257;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 292;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,A,C})
            p.first = 298;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 300;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 302;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 181: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={A,C}
			// E2={R,A,B}, E3={R,A}, E4={A,B}, E5={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 79;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E2={R,A,B})
			p.first = 82;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={A,B}, E5={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 117;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,C} (Edge indel by removing edge E4={A,B})
			p.first = 94;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B} (Edge indel by removing edge E5={A,C})
			p.first = 91;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,B}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,B})
            p.first = 255;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={A,C}, E6={R,C} (Edge indel by adding edge E6={R,C})
            p.first = 258;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={A,C}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 293;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A}, E4={A,B1}, E5={A,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,A,C})
            p.first = 299;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,B}, E5={B,C}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 301;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={A,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 302;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 182: // E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B}
			// E2={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 81;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E2={R,B})
			p.first = 118;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,B}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E3={A1,A2,B})
			p.first = 80;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,C}, E3={A,B,C}, E5={A,C} (Edge indel by removing edge E4={A1,B})
			p.first = 95;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,C} (Edge indel by removing edge E5={A2,B})
			p.first = 95;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,C}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,A1})
            p.first = 259;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={B,C}, E5={A,C}, E6={R,A} (Edge indel by adding edge E6={R,A2})
            p.first = 259;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B}, E6={A1,A2} (Edge indel by adding edge E6={A1,A2})
            p.first = 294;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A1,B})
            p.first = 300;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,B}, E3={A,B,C}, E4={B,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,A2,B})
            p.first = 300;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B}, E6={R,A1,A2,B} (Edge indel by adding edge E6={R,A1,A2,B})
            p.first = 303;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 183: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,B}, E5={A2,B}
			// E2={R,A1,A2}, E3={R,B}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 80;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 82;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E3={R,B})
			p.first = 119;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E5={A,C} (Edge indel by removing edge E4={A1,B})
			p.first = 96;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,C} (Edge indel by removing edge E5={A2,B})
			p.first = 96;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,C}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,A1})
            p.first = 260;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={B,C}, E5={A,C}, E6={R,A} (Edge indel by adding edge E6={R,A2})
            p.first = 260;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,B}, E5={A2,B}, E6={A1,A2} (Edge indel by adding edge E6={A1,A2})
            p.first = 295;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,B}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A1,B})
            p.first = 301;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={B,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,A2,B})
            p.first = 301;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,B}, E5={A2,B}, E6={A1,A2,B} (Edge indel by adding edge E6={A1,A2,B})
            p.first = 303;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 184: // E1={R,A,B1,B2}, E2={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}
			// E2={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 81;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E2={R,A})
			p.first = 120;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E3={A,B1,B2})
			p.first = 82;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E5={A,B} (Edge indel by removing edge E4={A,B1})
			p.first = 97;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,B} (Edge indel by removing edge E5={A,B2})
			p.first = 97;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,B1})
            p.first = 261;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,B}, E3={A,B,C}, E4={B,C}, E5={A,B}, E6={R,A} (Edge indel by adding edge E6={R,B2})
            p.first = 261;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2} (Edge indel by adding edge E6={B1,B2})
            p.first = 296;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,B1})
            p.first = 302;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,A,B2})
            p.first = 302;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,B}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B}, E6={R,A1,A2} (Edge indel by adding edge E6={R,B1,B2})
            p.first = 303;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 185: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B}, E5={B,C}
			// E2={R,A,B}, E3={R,A}, E4={A,C}, E5={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 84;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B}, E5={B,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 83;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={R,A})
			p.first = 115;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E5={B1,B2} (Edge indel by removing edge E4={A,B})
			p.first = 98;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B} (Edge indel by removing edge E5={B,C})
			p.first = 88;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 253;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={A,C}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,C})
            p.first = 269;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1}, E5={B1,B2}, E6={A,B2} (Edge indel by adding edge E6={A,C})
            p.first = 290;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B}, E5={B,C}, E6={R,B,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 304;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B}, E5={B,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 305;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B}, E5={B,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 306;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 186: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={A,C}
			// E2={R,A,B}, E3={R,C}, E4={A,B}, E5={A,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 85;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B}, E5={B,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 83;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E3={R,B})
			p.first = 114;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={A,C} (Edge indel by removing edge E4={A,B})
			p.first = 99;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B} (Edge indel by removing edge E5={A,C})
			p.first = 89;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={A,C}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 252;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={A,B1}, E5={A,B2}, E6={R,B2} (Edge indel by adding edge E6={R,C})
            p.first = 272;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={A,C}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 291;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B,C}, E3={R,A}, E4={A,B}, E5={B,C}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 304;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={A,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 307;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={A,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 308;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 187: // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C}
			// E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 86;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={A,B,C}, E4={A,B}, E5={B,C} (Edge indel by removing edge E2={R,A})
			p.first = 116;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={A,B,C})
			p.first = 83;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E5={B,C} (Edge indel by removing edge E4={A,B})
			p.first = 100;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B} (Edge indel by removing edge E5={B,C})
			p.first = 90;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 254;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,C} (Edge indel by adding edge E6={R,C})
            p.first = 273;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 292;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,A,C} (Edge indel by adding edge E6={R,A,C})
            p.first = 305;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 307;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 309;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 188: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={B,C}
			// E2={R,A,B}, E3={R,A}, E4={A,B}, E5={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 83;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={A,B}, E5={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 87;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={R,A})
			p.first = 117;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={B,C} (Edge indel by removing edge E4={A,B})
			p.first = 101;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B} (Edge indel by removing edge E5={B,C})
			p.first = 91;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 255;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={B,C}, E6={R,C} (Edge indel by adding edge E6={R,C})
            p.first = 274;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={B,C}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 293;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={B,C}, E6={R,A,C} (Edge indel by adding edge E6={R,A,C})
            p.first = 306;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,B}, E5={A,C}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 308;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={B,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 309;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 189: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,C}, E5={B,C}
			// E2={R,A,B}, E3={R,C}, E4={A,B}, E5={A,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 85;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={B,C}, E5={A,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 84;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={R,B})
			p.first = 115;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={B,C} (Edge indel by removing edge E4={A,C})
			p.first = 92;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,C} (Edge indel by removing edge E5={B,C})
			p.first = 99;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,C}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 269;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,C}, E4={A,B}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,C})
            p.first = 256;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,C}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 291;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,B,C}, E3={R,A}, E4={B,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,B,C})
            p.first = 304;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,C}, E5={B,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 310;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,C}, E5={B,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 311;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 190: // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,C}, E5={B,C}
			// E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 86;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E2={R,A})
			p.first = 118;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={A,C}, E5={B,C} (Edge indel by removing edge E3={A,B,C})
			p.first = 84;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E5={B,C} (Edge indel by removing edge E4={A,C})
			p.first = 100;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,C} (Edge indel by removing edge E5={B,C})
			p.first = 93;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B}, E6={R,A2} (Edge indel by adding edge E6={R,B})
            p.first = 270;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,C}, E5={B,C}, E6={R,C} (Edge indel by adding edge E6={R,C})
            p.first = 259;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,C}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 292;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 305;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={A,B,C}, E4={B,C}, E5={A,C}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 310;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,C}, E5={B,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 312;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 191: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,C}, E5={B,C}
			// E2={R,A,B}, E3={R,A}, E4={A,C}, E5={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 84;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={A,B}, E5={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 87;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E3={R,A})
			p.first = 119;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={B,C} (Edge indel by removing edge E4={A,C})
			p.first = 101;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,C} (Edge indel by removing edge E5={B,C})
			p.first = 94;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={A1,B}, E5={A2,B}, E6={R,A2} (Edge indel by adding edge E6={R,B})
            p.first = 271;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,C}, E5={B,C}, E6={R,C} (Edge indel by adding edge E6={R,C})
            p.first = 260;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,C}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 293;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={A,B}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 306;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={B,C}, E5={A,C}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 311;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,C}, E5={B,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 312;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 192: // E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,B}, E5={A,C}
			// E2={R,A}, E3={A,B,C}, E4={B,C}, E5={A,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 86;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={A,B,C}, E4={A,B}, E5={B,C} (Edge indel by removing edge E2={R,C})
			p.first = 116;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,C}, E4={A,B}, E5={A,C} (Edge indel by removing edge E3={A,B,C})
			p.first = 85;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,C}, E3={A,B,C}, E5={A,C} (Edge indel by removing edge E4={A,B})
			p.first = 95;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B}, E4={A1,A2} (Edge indel by removing edge E5={A,C})
			p.first = 102;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 257;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,B})
            p.first = 273;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B} (Edge indel by adding edge E6={B,C})
            p.first = 294;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,B}, E3={A,B,C}, E4={A,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 307;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,B}, E3={A,B,C}, E4={A,C}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,B,C})
            p.first = 310;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 313;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 193: // E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B}, E5={A,C}
			// E2={R,A,B}, E3={R,C}, E4={A,B}, E5={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 85;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={B,C}, E5={A,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 87;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={R,C})
			p.first = 117;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E5={A,C} (Edge indel by removing edge E4={A,B})
			p.first = 96;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2} (Edge indel by removing edge E5={A,C})
			p.first = 103;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B}, E5={A,C}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 258;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,B})
            p.first = 274;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B} (Edge indel by adding edge E6={B,C})
            p.first = 295;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={A,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 308;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={A,C}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,B,C})
            p.first = 311;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B}, E5={A,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 313;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 194: // E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C}
			// E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 86;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E2={R,A})
			p.first = 120;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={A,B,C})
			p.first = 87;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A}, E3={A,B1,B2}, E5={B1,B2} (Edge indel by removing edge E4={A,B})
			p.first = 104;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,B} (Edge indel by removing edge E5={B,C})
			p.first = 97;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 261;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B}, E6={R,A2} (Edge indel by adding edge E6={R,C})
            p.first = 275;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={B1,B2}, E6={A,B2} (Edge indel by adding edge E6={A,C})
            p.first = 296;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,B})
            p.first = 309;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,C}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 312;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,C}, E3={A,B,C}, E4={A,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,B,C})
            p.first = 313;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 195: // E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 92;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B} (Edge indel by removing edge E2={R,A,C})
			p.first = 89;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,A}, E5={A,B} (Edge indel by removing edge E3={R,B,C})
			p.first = 88;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E5={A1,A2} (Edge indel by removing edge E4={R,A})
			p.first = 121;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A} (Edge indel by removing edge E5={A,B})
			p.first = 105;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={A1,A2}, E6={R,A2} (Edge indel by adding edge E6={R,B})
            p.first = 262;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E5={A,C}, E6={R,B} (Edge indel by adding edge E6={R,C})
            p.first = 276;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1}, E6={A,B2} (Edge indel by adding edge E6={A,C})
            p.first = 297;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 304;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 314;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 315;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 196: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B}
			// E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 93;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E2={R,A,C})
			p.first = 90;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E3={R,A})
			p.first = 122;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E5={A,B} (Edge indel by removing edge E4={A,B,C})
			p.first = 88;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2} (Edge indel by removing edge E5={A,B})
			p.first = 106;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 263;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={R,B} (Edge indel by adding edge E6={R,C})
            p.first = 277;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by adding edge E6={A,C})
            p.first = 298;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 305;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={R,B,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 314;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 316;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 197: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 88;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={A,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 94;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B} (Edge indel by removing edge E3={R,A,C})
			p.first = 91;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B} (Edge indel by removing edge E4={R,A})
			p.first = 123;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A} (Edge indel by removing edge E5={A,B})
			p.first = 107;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 264;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={A,C}, E6={R,B} (Edge indel by adding edge E6={R,C})
            p.first = 278;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1}, E6={A,B2} (Edge indel by adding edge E6={A,C})
            p.first = 299;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 306;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B}, E6={R,B,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 315;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 316;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 198: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B} 
			// E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 95;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E2={R,A,C})
			p.first = 90;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E3={R,B})
			p.first = 122;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={A,B} (Edge indel by removing edge E4={A,B,C})
			p.first = 89;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C} (Edge indel by removing edge E5={A,B})
			p.first = 108;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 263;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={R,C} (Edge indel by adding edge E6={R,C})
            p.first = 282;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 307;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 300;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 314;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 317;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 199: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 89;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,B}, E5={A,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 96;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B} (Edge indel by removing edge E3={R,A,C})
			p.first = 91;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B} (Edge indel by removing edge E4={R,B})
			p.first = 123;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B} (Edge indel by removing edge E5={A,B})
			p.first = 109;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 264;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={R,C} (Edge indel by adding edge E6={R,C})
            p.first = 283;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 308;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 301;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E5={A,B}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 315;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 317;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 200: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}
			// E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 90;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 97;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by removing edge E3={R,A})
			p.first = 124;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B} (Edge indel by removing edge E4={A,B,C})
			p.first = 91;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C} (Edge indel by removing edge E5={A,B})
			p.first = 110;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={A1,A2,B}, E5={A1,A2}, E6={R,A2} (Edge indel by adding edge E6={R,B})
            p.first = 265;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={R,C} (Edge indel by adding edge E6={R,C})
            p.first = 284;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 302;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 309;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={R,A,C} (Edge indel by adding edge E6={R,A,C})
            p.first = 316;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 317;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 201: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={B,C}
			// E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 95;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 93;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={A,B1,B2}, E5={B1,B2} (Edge indel by removing edge E3={R,B})
			p.first = 125;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={B,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 92;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C} (Edge indel by removing edge E5={B,C})
			p.first = 108;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 279;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={A,B1,B2}, E5={B1,B2}, E6={R,B2} (Edge indel by adding edge E6={R,C})
            p.first = 266;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 300;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={B,C}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 310;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,B,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,B,C})
            p.first = 314;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={B,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 318;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 202: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 92;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={A,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 96;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 94;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={B1,B2} (Edge indel by removing edge E4={R,B})
			p.first = 126;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B} (Edge indel by removing edge E5={B,C})
			p.first = 109;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={A,B,C})
            p.first = 280;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={B1,B2}, E6={R,B2} (Edge indel by adding edge E6={R,C})
            p.first = 267;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 301;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={B,C}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 311;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,B,C})
            p.first = 315;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={B,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 318;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 203: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C}
			// E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 93;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 97;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 127;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 94;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C} (Edge indel by removing edge E5={A,C})
			p.first = 110;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,B,C}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,B})
            p.first = 281;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={R,C} (Edge indel by adding edge E6={R,C})
            p.first = 268;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 302;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 312;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 316;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,B,C}, E5={B,C}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 318;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 204: // E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,C}
			// E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 95;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 97;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E3={R,C})
			p.first = 127;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E5={A,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 96;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B} (Edge indel by removing edge E5={A,C})
			p.first = 111;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,C}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 268;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,B})
            p.first = 285;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 313;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B} (Edge indel by adding edge E6={B,C})
            p.first = 303;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,A,C})
            p.first = 317;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,B,C})
            p.first = 318;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 205: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={B1,B2}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,C} (Edge indel by removing edge E1={R,A,B1})
			p.first = 99;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={B,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 99;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,A}, E5={B1,B2} (Edge indel by removing edge E3={R,B1,B2})
			p.first = 98;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,A1,A2}, E5={A1,A2} (Edge indel by removing edge E4={R,A})
			p.first = 121;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e3, e1, e2, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A} (Edge indel by removing edge E5={B1,B2})
			p.first = 105;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E4={R,B}, E5={A,C}, E6={R,A} (Edge indel by adding edge E6={R,B1})
            p.first = 276;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,C}, E6={R,A} (Edge indel by adding edge E6={R,B2})
            p.first = 276;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e1, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B1})
            p.first = 304;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B2})
            p.first = 304;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={B1,B2}, E6={A,B1,B2} (Edge indel by adding edge E6={A,B1,B2})
            p.first = 319;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={B1,B2}, E6={R,A,B1,B2} (Edge indel by adding edge E6={R,A,B1,B2})
            p.first = 320;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 206: // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={B1,B2}
			// E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={B,C} (Edge indel by removing edge E1={R,A,B1})
			p.first = 100;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B,C}, E5={B,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 100;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={A,B1,B2}, E5={B1,B2} (Edge indel by removing edge E3={R,A})
			p.first = 125;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E5={B1,B2} (Edge indel by removing edge E4={A,B1,B2})
			p.first = 98;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2} (Edge indel by removing edge E5={B1,B2})
			p.first = 106;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,B1})
            p.first = 279;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,B2})
            p.first = 279;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B1})
            p.first = 305;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B2})
            p.first = 305;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={B1,B2}, E6={R,B1,B2} (Edge indel by adding edge E6={R,B1,B2})
            p.first = 319;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={B1,B2}, E6={R,A,B1,B2} (Edge indel by adding edge E6={R,A,B1,B2})
            p.first = 321;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 207: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 98;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={B,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 101;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={B,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 101;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={B1,B2} (Edge indel by removing edge E4={R,A})
			p.first = 126;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A} (Edge indel by removing edge E5={B1,B2})
			p.first = 107;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,B1})
            p.first = 280;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,B2})
            p.first = 280;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B1})
            p.first = 306;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B2})
            p.first = 306;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={B1,B2}, E6={R,B1,B2} (Edge indel by adding edge E6={R,B1,B2})
            p.first = 320;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={B1,B2}, E6={A,B1,B2} (Edge indel by adding edge E6={A,B1,B2})
            p.first = 321;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 208: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C}
			// E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by removing edge E1={R,A,B})
			p.first = 102;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B,C}, E5={B,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 100;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E3={R,B})
			p.first = 122;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={A,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 99;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C} (Edge indel by removing edge E5={A,C})
			p.first = 108;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 277;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={R,B} (Edge indel by adding edge E6={R,C})
            p.first = 282;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 307;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 310;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A}, E4={A,B1,B2}, E5={B1,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,B,C})
            p.first = 319;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 322;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 209: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 99;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1,A2}, E4={R,B}, E5={A1,A2} (Edge indel by removing edge E2={R,A,B})
			p.first = 103;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 101;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E5={A,B} (Edge indel by removing edge E4={R,B})
			p.first = 123;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B} (Edge indel by removing edge E5={A,C})
			p.first = 109;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,C}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 278;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,C}, E5={A,B}, E6={R,B} (Edge indel by adding edge E6={R,C})
            p.first = 283;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 308;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,C}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 311;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A}, E5={B1,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,B,C})
            p.first = 320;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 322;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 210: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={B,C}
			// E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 100;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A}, E4={A,B1,B2}, E5={B1,B2} (Edge indel by removing edge E2={R,A,B})
			p.first = 104;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 127;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={B,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 101;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C} (Edge indel by removing edge E5={B,C})
			p.first = 110;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 281;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={B,C}, E6={R,C} (Edge indel by adding edge E6={R,C})
            p.first = 285;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 309;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={B,C}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 312;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A}, E4={A,B1,B2}, E5={B1,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,A,C})
            p.first = 321;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 322;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 211: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2}
			// E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 102;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A}, E4={A,B1,B2}, E5={B1,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 104;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by removing edge E3={R,B})
			p.first = 124;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E5={A1,A2} (Edge indel by removing edge E4={A1,A2,B})
			p.first = 103;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B} (Edge indel by removing edge E5={A1,A2})
			p.first = 111;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={R,A} (Edge indel by adding edge E6={R,A1})
            p.first = 284;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={R,A} (Edge indel by adding edge E6={R,A2})
            p.first = 284;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by adding edge E6={A1,B})
            p.first = 313;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by adding edge E6={A2,B})
            p.first = 313;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A1,B})
            p.first = 322;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A2,B})
            p.first = 322;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 212: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C} (Edge indel by removing edge E1={R,A,B1})
			p.first = 108;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 108;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,A}, E5={A,B1,B2} (Edge indel by removing edge E3={R,B1,B2})
			p.first = 106;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E5={A1,A2,A3} (Edge indel by removing edge E4={R,A})
			p.first = 128;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A} (Edge indel by removing edge E5={A,B1,B2})
			p.first = 105;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={A1,A2,B}, E6={R,A2} (Edge indel by adding edge E6={R,B1})
            p.first = 286;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={R,A1}, E5={A1,A2,B}, E6={R,A2} (Edge indel by adding edge E6={R,B2})
            p.first = 286;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={A,B} (Edge indel by adding edge E6={A,B1})
            p.first = 314;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={A,B} (Edge indel by adding edge E6={A,B2})
            p.first = 314;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E6={B1,B2} (Edge indel by adding edge E6={B1,B2})
            p.first = 319;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E6={R,A,B1,B2} (Edge indel by adding edge E6={R,A,B1,B2})
            p.first = 323;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 213: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 105;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,A} (Edge indel by removing edge E2={R,A,B1})
			p.first = 109;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,A} (Edge indel by removing edge E3={R,A,B2})
			p.first = 109;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,A} (Edge indel by removing edge E4={R,B1,B2})
			p.first = 107;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2} (Edge indel by removing edge E5={R,A})
			p.first = 129;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2} (Edge indel by adding edge E6={R,B1})
            p.first = 287;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={R,A1}, E6={R,A2} (Edge indel by adding edge E6={R,B2})
            p.first = 287;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B} (Edge indel by adding edge E6={A,B1})
            p.first = 315;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E6={A,B} (Edge indel by adding edge E6={A,B2})
            p.first = 315;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={B1,B2} (Edge indel by adding edge E6={B1,B2})
            p.first = 320;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2} (Edge indel by adding edge E6={A,B1,B2})
            p.first = 323;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;
		
		case 214: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 106;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={A,B,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 110;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 110;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1,B2} (Edge indel by removing edge E4={R,A})
			p.first = 130;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A} (Edge indel by removing edge E5={A,B1,B2})
			p.first = 107;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={R,B} (Edge indel by adding edge E6={R,B1})
            p.first = 288;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={A,B,C}, E6={R,B} (Edge indel by adding edge E6={R,B2})
            p.first = 288;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B} (Edge indel by adding edge E6={A,B1})
            p.first = 316;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,B} (Edge indel by adding edge E6={A,B2})
            p.first = 316;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={B1,B2} (Edge indel by adding edge E6={B1,B2})
            p.first = 321;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={R,B1,B2} (Edge indel by adding edge E6={R,B1,B2})
            p.first = 323;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 215: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 108;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1,A2}, E4={R,B}, E5={A1,A2,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 111;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 110;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1,B2} (Edge indel by removing edge E4={R,B})
			p.first = 130;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B} (Edge indel by removing edge E5={A,B,C})
			p.first = 109;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 288;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={A,B1,B2}, E6={R,B2} (Edge indel by adding edge E6={R,C})
            p.first = 289;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B} (Edge indel by adding edge E6={A,B})
            p.first = 317;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,C} (Edge indel by adding edge E6={A,C})
            p.first = 322;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 318;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A}, E5={A,B,C}, E6={R,A,B2} (Edge indel by adding edge E6={R,B,C})
            p.first = 323;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 216: // E1={R,A,B1}, E2={R,A,B2}, E3={A,B1}, E4={A,B2}, E5={B1,B2}
			// E2={R,A1,A2}, E3={A1,B}, E4={A1,A2}, E5={A2,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 112;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={A1,A2}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E2={R,A,B2})
			p.first = 112;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={A,B1})
			p.first = 115;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={A,B}, E5={B,C} (Edge indel by removing edge E4={A,B2})
			p.first = 115;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={A,B1}, E4={A,B2} (Edge indel by removing edge E5={B1,B2})
			p.first = 114;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={A,B1}, E4={A,B2}, E5={B1,B2}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 290;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={A,B}, E4={A,C}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,B1})
            p.first = 291;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={A,C}, E4={A,B}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,B2})
            p.first = 291;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, EDGES_ALPHABET[i], e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={A1,A2}, E4={A1,A3}, E5={A2,A3}, E6={R,A2,A3} (Edge indel by adding edge E6={R,B1,B2})
            p.first = 324;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={A,B1}, E4={A,B2}, E5={B1,B2}, E6={A,B1,B2} (Edge indel by adding edge E6={A,B1,B2})
            p.first = 325;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={A,B1}, E4={A,B2}, E5={B1,B2}, E6={R,A,B1,B2} (Edge indel by adding edge E6={R,A,B1,B2})
            p.first = 326;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 217: // E1={R,A1,A2}, E2={A1,A2,B}, E3={A1,A2}, E4={A1,B}, E5={A2,B}
			// E1={R,A1,A2}, E3={A1,A2}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E2={A1,A2,B})
			p.first = 112;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={A1,A2,B}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E3={A1,A2})
			p.first = 118;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={A,B,C}, E3={A,B}, E5={B,C} (Edge indel by removing edge E4={A1,B})
			p.first = 116;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={A,B,C}, E3={A,B}, E4={B,C} (Edge indel by removing edge E5={A2,B})
			p.first = 116;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={A,B,C}, E3={A,B}, E4={A,C}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,A1})
            p.first = 292;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={A,B,C}, E3={A,B}, E4={B,C}, E5={A,C}, E6={R,A} (Edge indel by adding edge E6={R,A2})
            p.first = 292;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={A1,A2,B}, E3={A1,A2}, E4={A1,B}, E5={A2,B}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 294;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={A,B1,B2}, E3={A,B1}, E4={A,B2}, E5={B1,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,A1,B})
            p.first = 325;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={A,B1,B2}, E3={A,B1}, E4={B1,B2}, E5={A,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,A2,B})
            p.first = 325;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={A1,A2,B}, E3={A1,A2}, E4={A1,B}, E5={A2,B}, E6={R,A1,A2,B} (Edge indel by adding edge E6={R,A1,A2,B})
            p.first = 327;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 218: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2}, E4={A1,B}, E5={A2,B}
			// E2={R,A1,A2}, E3={A1,A2}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 112;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E3={A1,A2}, E4={A1,A3}, E5={A2,A3} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 113;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E3={A1,A2})
			p.first = 119;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B}, E5={B,C} (Edge indel by removing edge E4={A1,B})
			p.first = 117;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B}, E4={B,C} (Edge indel by removing edge E5={A2,B})
			p.first = 117;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B}, E4={A,C}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,A1})
            p.first = 293;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B}, E4={B,C}, E5={A,C}, E6={R,A} (Edge indel by adding edge E6={R,A2})
            p.first = 293;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2}, E4={A1,B}, E5={A2,B}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 295;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={A,B1}, E4={A,B2}, E5={B1,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,A1,B})
            p.first = 326;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={A,B1}, E4={B1,B2}, E5={A,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,A2,B})
            p.first = 326;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2}, E4={A1,B}, E5={A2,B}, E6={A1,A2,B} (Edge indel by adding edge E6={A1,A2,B})
            p.first = 327;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 219: // E1={R,A1,A2,A3}, E2={A1,A2,A3}, E3={A1,A2}, E4={A1,A3}, E5={A2,A3}
			// E1={R,A1,A2,A3}, E3={A1,A2}, E4={A1,A3}, E5={A2,A3} (Edge indel by removing edge E2={A1,A2,A3})
			p.first = 113;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={A,B1,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E3={A1,A2})
			p.first = 120;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={A,B1,B2}, E3={A,B1}, E5={A,B2} (Edge indel by removing edge E4={A1,A3})
			p.first = 120;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={A,B1,B2}, E3={A,B1}, E4={A,B2} (Edge indel by removing edge E5={A2,A3})
			p.first = 120;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={A,B1,B2}, E3={A,B1}, E4={A,B2}, E5={B1,B2}, E6={R,A} (Edge indel by adding edge E6={R,A1})
            p.first = 296;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={A,B1,B2}, E3={A,B1}, E4={B1,B2}, E5={A,B2}, E6={R,A} (Edge indel by adding edge E6={R,A2})
            p.first = 296;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={A,B1,B2}, E3={B1,B2}, E4={A,B1}, E5={A,B2}, E6={R,A} (Edge indel by adding edge E6={R,A3})
            p.first = 296;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, EDGES_ALPHABET[i], e2, e4, e5, e3, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={A1,A2,B}, E3={A1,A2}, E4={A1,B}, E5={A2,B}, E6={R,A1,A2} (Edge indel by adding edge E6={R,A1,A2})
            p.first = 327;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={A1,A2,B}, E3={A1,B}, E4={A1,A2}, E5={A2,B}, E6={R,A1,A2} (Edge indel by adding edge E6={R,A1,A3})
            p.first = 327;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={A1,A2,B}, E3={A1,B}, E4={A2,B}, E5={A1,A2}, E6={R,A1,A2} (Edge indel by adding edge E6={R,A2,A3})
            p.first = 327;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e5, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 220: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={A,B1}, E5={A,B2}
			// E2={R,A,B}, E3={R,A,C}, E4={B,C}, E5={A,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 115;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={A,B}, E5={B,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 115;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E3={R,B1,B2})
			p.first = 114;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E5={A1,A2} (Edge indel by removing edge E4={A,B1})
			p.first = 121;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={A1,A2} (Edge indel by removing edge E5={A,B2})
			p.first = 121;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={A,B1}, E5={A,B2}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 297;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E4={A,B}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,B1})
            p.first = 304;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,B,C}, E2={R,A,B}, E3={R,A,C}, E4={B,C}, E5={A,B}, E6={R,A} (Edge indel by adding edge E6={R,B2})
            p.first = 304;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e1, EDGES_ALPHABET[i], e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={A1,A2}, E5={A1,A3}, E6={A2,A3} (Edge indel by adding edge E6={B1,B2})
            p.first = 324;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={A,B1}, E5={A,B2}, E6={A,B1,B2} (Edge indel by adding edge E6={A,B1,B2})
            p.first = 328;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={A,B1}, E5={A,B2}, E6={R,A,B1,B2} (Edge indel by adding edge E6={R,A,B1,B2})
            p.first = 329;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 221: // E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}
			// E2={R,A,B}, E3={A,B,C}, E4={B,C}, E5={A,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 116;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={A,B,C}, E4={A,B}, E5={B,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 116;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E3={A,B1,B2})
			p.first = 114;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={A,B,C}, E5={A,B} (Edge indel by removing edge E4={A,B1})
			p.first = 122;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={A,B} (Edge indel by removing edge E5={A,B2})
			p.first = 122;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 298;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={R,B} (Edge indel by adding edge E6={R,B1})
            p.first = 307;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={A,B,C}, E4={B,C}, E5={A,B}, E6={R,B} (Edge indel by adding edge E6={R,B2})
            p.first = 307;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, EDGES_ALPHABET[i], e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2} (Edge indel by adding edge E6={B1,B2})
            p.first = 325;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={R,B1,B2} (Edge indel by adding edge E6={R,B1,B2})
            p.first = 328;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={R,A,B1,B2} (Edge indel by adding edge E6={R,A,B1,B2})
            p.first = 330;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 222: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1}, E5={A,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 114;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={B,C}, E5={A,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 117;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 117;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E5={A,B} (Edge indel by removing edge E4={A,B1})
			p.first = 123;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B} (Edge indel by removing edge E5={A,B2})
			p.first = 123;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1}, E5={A,B2}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 299;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B}, E5={A,C}, E6={R,B} (Edge indel by adding edge E6={R,B1})
            p.first = 308;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={A,C}, E5={A,B}, E6={R,B} (Edge indel by adding edge E6={R,B2})
            p.first = 308;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2} (Edge indel by adding edge E6={B1,B2})
            p.first = 326;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1}, E5={A,B2}, E6={R,B1,B2} (Edge indel by adding edge E6={R,B1,B2})
            p.first = 329;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1}, E5={A,B2}, E6={A,B1,B2} (Edge indel by adding edge E6={A,B1,B2})
            p.first = 330;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 223: // E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={A,B}, E5={B,C}
			// E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 118;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			//  E1={R,A,B}, E3={A,B,C}, E4={A,B}, E5={B,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 116;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			//  E1={R,A,B}, E2={R,A,C}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={A,B,C})
			p.first = 115;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			//  E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E5={B1,B2} (Edge indel by removing edge E4={A,B})
			p.first = 125;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			//  E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={A,B} (Edge indel by removing edge E5={B,C})
			p.first = 122;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 305;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 300;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={A,B,C}, E4={A,C}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,C})
            p.first = 310;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={A,B1}, E5={B1,B2}, E6={A,B2} (Edge indel by adding edge E6={A,C})
            p.first = 325;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,B1,B2}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,B,C})
            p.first = 328;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,A,B,C} (Edge indel by adding edge E6={R,A,B,C})
            p.first = 331;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 224: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B}, E5={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={A,B}, E5={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 115;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1,A2}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 119;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={A,B}, E5={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 117;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={B1,B2} (Edge indel by removing edge E4={A,B})
			p.first = 126;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B} (Edge indel by removing edge E5={B,C})
			p.first = 123;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 306;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 301;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={A,C}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,C})
            p.first = 311;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B1}, E4={A,B1}, E5={B1,B2}, E6={A,B2} (Edge indel by adding edge E6={A,C})
            p.first = 326;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={A,B1}, E5={A,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,B,C})
            p.first = 329;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B}, E5={B,C}, E6={A,B,C} (Edge indel by adding edge E6={A,B,C})
            p.first = 331;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 225: // E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,B}, E5={A,C}
			// E2={R,A,B}, E3={A,B,C}, E4={A,B}, E5={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 116;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E2={R,A,B})
			p.first = 120;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={A,B}, E5={A,C} (Edge indel by removing edge E3={A,B,C})
			p.first = 117;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E5={A,C} (Edge indel by removing edge E4={A,B})
			p.first = 127;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,A2} (Edge indel by removing edge E5={A,C})
			p.first = 124;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 302;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,B})
            p.first = 309;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={R,C} (Edge indel by adding edge E6={R,C})
            p.first = 313;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B} (Edge indel by adding edge E6={B,C})
            p.first = 327;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={R,A,B2} (Edge indel by adding edge E6={R,A,C})
            p.first = 330;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,A,C} (Edge indel by adding edge E6={R,B,C})
            p.first = 331;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 226: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B}
			// E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 118;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 120;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,B}, E5={A2,B} (Edge indel by removing edge E3={A1,A2,B})
			p.first = 119;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E5={A,C} (Edge indel by removing edge E4={A1,B})
			p.first = 127;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,C} (Edge indel by removing edge E5={A2,B})
			p.first = 127;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,C}, E5={B,C}, E6={R,A} (Edge indel by adding edge E6={R,A1})
            p.first = 312;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={B,C}, E5={A,C}, E6={R,A} (Edge indel by adding edge E6={R,A2})
            p.first = 312;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 303;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B}, E6={A1,A2} (Edge indel by adding edge E6={A1,A2})
            p.first = 327;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={R,A,B} (Edge indel by adding edge E6={R,A1,B})
            p.first = 331;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={A,B,C}, E4={B,C}, E5={A,B}, E6={R,A,B} (Edge indel by adding edge E6={R,A2,B})
            p.first = 331;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 227: // E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={A1,A2,B}, E5={A1,A2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={B1,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 125;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E2={R,A1,B})
			p.first = 122;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E3={R,A2,B})
			p.first = 122;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E5={A1,A2} (Edge indel by removing edge E4={A1,A2,B})
			p.first = 121;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={A1,A2,A3} (Edge indel by removing edge E5={A1,A2})
			p.first = 128;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={A,B,C}, E5={A,B}, E6={R,A} (Edge indel by adding edge E6={R,A1})
            p.first = 314;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E4={A,B,C}, E5={A,B}, E6={R,A} (Edge indel by adding edge E6={R,A2})
            p.first = 314;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={B1,B2}, E6={R,A} (Edge indel by adding edge E6={R,B})
            p.first = 319;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e1, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by adding edge E6={A1,B})
            p.first = 328;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by adding edge E6={A2,B})
            p.first = 328;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={A1,A2,B}, E5={A1,A2}, E6={R,A1,A2,B} (Edge indel by adding edge E6={R,A1,A2,B})
            p.first = 332;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 228: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={A1,A2}
			// E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={A1,A2} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 121;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={B1,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 126;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={A,B} (Edge indel by removing edge E3={R,A1,B})
			p.first = 123;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B} (Edge indel by removing edge E4={R,A2,B})
			p.first = 123;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3} (Edge indel by removing edge E5={A1,A2})
			p.first = 129;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B}, E6={R,A} (Edge indel by adding edge E6={R,A1})
            p.first = 315;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E5={A,B}, E6={R,A} (Edge indel by adding edge E6={R,A2})
            p.first = 315;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={B1,B2}, E6={R,A} (Edge indel by adding edge E6={R,B})
            p.first = 320;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e2, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by adding edge E6={A1,B})
            p.first = 329;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E5={A,B1}, E6={A,B2} (Edge indel by adding edge E6={A2,B})
            p.first = 329;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={A1,A2}, E6={A1,A2,B} (Edge indel by adding edge E6={A1,A2,B})
            p.first = 332;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 229: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B}
			// E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 122;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 127;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by removing edge E3={R,A,C})
			p.first = 124;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B} (Edge indel by removing edge E4={A,B,C})
			p.first = 123;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2} (Edge indel by removing edge E5={A,B})
			p.first = 130;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 316;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B}, E6={R,B} (Edge indel by adding edge E6={R,B})
            p.first = 317;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={A,B,C}, E5={A,C}, E6={R,B} (Edge indel by adding edge E6={R,C})
            p.first = 322;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by adding edge E6={A,C})
            p.first = 330;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by adding edge E6={B,C})
            p.first = 331;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={A1,A2,B}, E5={A1,A2}, E6={R,A1,A2} (Edge indel by adding edge E6={R,B,C})
            p.first = 332;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 230: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 125;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 127;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 127;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={B1,B2} (Edge indel by removing edge E4={A,B1,B2})
			p.first = 126;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2} (Edge indel by removing edge E5={B1,B2})
			p.first = 130;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={B1,B2}, E6={R,A} (Edge indel by adding edge E6={R,A})
            p.first = 321;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,B1})
            p.first = 318;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={A,B,C}, E5={B,C}, E6={R,B} (Edge indel by adding edge E6={R,B2})
            p.first = 318;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B1})
            p.first = 331;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={A,B,C}, E5={B,C}, E6={A,B} (Edge indel by adding edge E6={A,B2})
            p.first = 331;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={A1,A2,B}, E5={A1,A2}, E6={R,A1,A2} (Edge indel by adding edge E6={R,A,B1,B2})
            p.first = 332;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 231: // E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={A1,A2,A3}
			// E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={A1,A2,A3} (Edge indel by removing edge E1={R,A1,A2,A3})
			p.first = 128;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={A,B1,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 130;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E4={R,A,B2}, E5={A,B1,B2} (Edge indel by removing edge E3={R,A1,A3})
			p.first = 130;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1,B2} (Edge indel by removing edge E4={R,A2,A3})
			p.first = 130;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3} (Edge indel by removing edge E5={A1,A2,A3})
			p.first = 129;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={A,B1,B2}, E6={R,A} (Edge indel by adding edge E6={R,A1})
            p.first = 323;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E5={A,B1,B2}, E6={R,A} (Edge indel by adding edge E6={R,A2})
            p.first = 323;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={A,B1,B2}, E6={R,A} (Edge indel by adding edge E6={R,A3})
            p.first = 323;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e2, EDGES_ALPHABET[i], e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by adding edge E6={A1,A2})
            p.first = 332;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by adding edge E6={A1,A3})
            p.first = 332;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1,A2}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by adding edge E6={A2,A3})
            p.first = 332;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e4, e2, e3, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 232: // E1={R,A1}, E2={R,A2}, E3={R,A3}, E4={A1,A2}, E5={A1,A3}, E6={A2,A3}
			// E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A2,B}, E6={A1,A2} (Edge indel by removing edge E1={R,A1})
			p.first = 140;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e2, e3, e6, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1}, E3={R,A2}, E4={A1,B}, E5={A1,A2}, E6={A2,B} (Edge indel by removing edge E2={R,A2})
			p.first = 140;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1}, E2={R,A2}, E4={A1,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E3={R,A3})
			p.first = 140;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,B1}, E2={R,B2}, E3={R,A}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E4={A1,A2})
			p.first = 131;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e3, e1, e2, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,B1}, E2={R,A}, E3={R,B2}, E4={A,B1}, E6={A,B2} (Edge indel by removing edge E5={A1,A3})
			p.first = 131;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e1, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A}, E2={R,B1}, E3={R,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E6={A2,A3})
			p.first = 131;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1}, E2={R,A2}, E3={R,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B}, E7={R,A1,A2} (Edge indel by adding edge E7={R,A1,A2})
            p.first = 333;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={R,B}, E3={R,A2}, E4={A1,B}, E5={A1,A2}, E6={A2,B}, E7={R,A1,A2} (Edge indel by adding edge E7={R,A1,A3})
            p.first = 333;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e3, e2, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,B}, E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A2,B}, E6={A1,A2}, E7={R,A1,A2} (Edge indel by adding edge E7={R,A2,A3})
            p.first = 333;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e2, e3, e1, e6, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={R,A2}, E3={R,A3}, E4={A1,A2}, E5={A1,A3}, E6={A2,A3}, E7={A1,A2,A3} (Edge indel by adding edge E7={A1,A2,A3})
            p.first = 334;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={R,A2}, E3={R,A3}, E4={A1,A2}, E5={A1,A3}, E6={A2,A3}, E7={R,A1,A2,A3} (Edge indel by adding edge E7={R,A1,A2,A3})
            p.first = 335;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 233: // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={A,B}, E6={B,C}
			// E2={R,B1}, E3={R,A}, E4={R,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E1={R,A,B})
			p.first = 131;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e3, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E2={R,A})
			p.first = 142;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={R,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E3={R,B})
			p.first = 154;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={R,C})
			p.first = 141;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E6={B,C} (Edge indel by removing edge E5={A,B})
			p.first = 133;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2} (Edge indel by removing edge E6={B,C})
			p.first = 132;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2}, E6={A2,B}, E7={A1,B} (Edge indel by adding edge E7={A,C})
            p.first = 333;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={A,B}, E6={B,C}, E7={R,A,C} (Edge indel by adding edge E7={R,A,C})
            p.first = 337;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,B1}, E3={R,A}, E4={R,B2}, E5={A,B1}, E6={A,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,B,C})
            p.first = 336;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={A,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 338;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={A,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 339;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, EDGES_ALPHABET[i], e1, e3, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 234: // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,B}, E6={A2,B}
			// E2={R,B1}, E3={R,B2}, E4={R,A}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 131;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e4, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,C}, E5={B,C}, E6={A,C} (Edge indel by removing edge E2={R,A1})
			p.first = 143;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={R,C}, E5={A,C}, E6={B,C} (Edge indel by removing edge E3={R,A2})
			p.first = 143;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E4={R,B})
			p.first = 153;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E6={A,C} (Edge indel by removing edge E5={A1,B})
			p.first = 133;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E5={A,C} (Edge indel by removing edge E6={A2,B})
			p.first = 133;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,B}, E6={A2,B}, E7={A1,A2} (Edge indel by adding edge E7={A1,A2})
            p.first = 333;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A}, E3={R,C}, E4={R,B}, E5={A,B}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A1,B})
            p.first = 337;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,C}, E3={R,A}, E4={R,B}, E5={B,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,A2,B})
            p.first = 337;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e3, e4, e2, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,B}, E6={A2,B}, E7={A1,A2,B} (Edge indel by adding edge E7={A1,A2,B})
            p.first = 340;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,B}, E6={A2,B}, E7={R,A1,A2,B} (Edge indel by adding edge E7={R,A1,A2,B})
            p.first = 341;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 235: // E1={R,A}, E2={R,B1}, E3={R,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}
			// E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E1={R,A})
			p.first = 155;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,B}, E3={R,A}, E4={A,B,C}, E5={B,C}, E6={A,B} (Edge indel by removing edge E2={R,B1})
			p.first = 144;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e3, e1, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,B}, E2={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E3={R,B2})
			p.first = 144;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e1, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A}, E2={R,B1}, E3={R,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E4={A,B1,B2})
			p.first = 131;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1}, E2={R,B}, E3={R,A2}, E4={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E5={A,B1})
			p.first = 134;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1}, E2={R,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by removing edge E6={A,B2})
			p.first = 134;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1}, E2={R,A2}, E3={R,A3}, E4={A1,A2,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3} (Edge indel by adding edge E7={B1,B2})
            p.first = 334;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={R,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A,B1})
            p.first = 338;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={R,C}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,A,B2})
            p.first = 338;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e3, e2, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B}, E7={R,A1,A2} (Edge indel by adding edge E7={R,B1,B2})
            p.first = 340;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e2, e3, e1, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={R,B1}, E3={R,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={R,A,B1,B2} (Edge indel by adding edge E7={R,A,B1,B2})
            p.first = 342;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 236: // E1={R,A,B1,B2}, E2={R,A}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2}
			// E2={R,A}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 131;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E2={R,A})
			p.first = 156;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,B}, E4={R,A}, E5={A,C}, E6={A,B} (Edge indel by removing edge E3={R,B1})
			p.first = 145;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e4, e2, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,B}, E3={R,A}, E5={A,B}, E6={A,C} (Edge indel by removing edge E4={R,B2})
			p.first = 145;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,B}, E4={R,A2}, E6={A1,A2} (Edge indel by removing edge E5={A,B1})
			p.first = 135;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e4, e3, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2} (Edge indel by removing edge E6={A,B2})
			p.first = 135;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={R,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3} (Edge indel by adding edge E7={B1,B2})
            p.first = 335;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={R,C}, E5={A,B}, E6={A,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A,B1})
            p.first = 339;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={R,C}, E4={R,B}, E5={A,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,A,B2})
            p.first = 339;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,B}, E3={R,A1}, E4={R,A2}, E5={A1,B}, E6={A2,B}, E7={R,A1,A2} (Edge indel by adding edge E7={R,B1,B2})
            p.first = 341;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e4, e2, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2}, E7={A,B1,B2} (Edge indel by adding edge E7={A,B1,B2})
            p.first = 342;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 237: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B}
			// E2={R,A,B}, E3={R,B}, E4={R,C}, E5={R,A}, E6={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 133;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e5, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2} (Edge indel by removing edge E2={R,A,C})
			p.first = 132;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B} (Edge indel by removing edge E3={R,A})
			p.first = 161;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E5={R,B}, E6={A,C} (Edge indel by removing edge E4={R,B})
			p.first = 157;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={A,B} (Edge indel by removing edge E5={R,C})
			p.first = 146;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2} (Edge indel by removing edge E6={A,B})
			p.first = 136;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2} (Edge indel by adding edge E7={A,C})
            p.first = 336;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 337;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A,B1}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2}, E7={R,A,B2} (Edge indel by adding edge E7={R,B,C})
            p.first = 343;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 344;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 345;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 238: // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2}
			// E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 134;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E2={R,A1})
			p.first = 162;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E3={R,A2})
			p.first = 162;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E4={R,B})
			p.first = 147;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E6={A1,A2} (Edge indel by removing edge E5={A1,A2,B})
			p.first = 132;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B} (Edge indel by removing edge E6={A1,A2})
			p.first = 137;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by adding edge E7={A1,B})
            p.first = 338;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by adding edge E7={A2,B})
            p.first = 338;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={R,A,C} (Edge indel by adding edge E7={R,A1,B})
            p.first = 344;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={R,A,C} (Edge indel by adding edge E7={R,A2,B})
            p.first = 344;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2}, E7={R,A1,A2,B} (Edge indel by adding edge E7={R,A1,A2,B})
            p.first = 346;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 239: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2}
			// E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 132;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 135;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B} (Edge indel by removing edge E3={R,A1})
			p.first = 163;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={R,C}, E6={A,B} (Edge indel by removing edge E4={R,A2})
			p.first = 163;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E6={A1,A2} (Edge indel by removing edge E5={R,B})
			p.first = 148;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B} (Edge indel by removing edge E6={A1,A2})
			p.first = 138;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B}, E7={A,C} (Edge indel by adding edge E7={A1,B})
            p.first = 339;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={A,B}, E7={A,C} (Edge indel by adding edge E7={A2,B})
            p.first = 339;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B}, E7={R,A,C} (Edge indel by adding edge E7={R,A1,B})
            p.first = 345;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={A,B}, E7={R,A,C} (Edge indel by adding edge E7={R,A2,B})
            p.first = 345;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2}, E7={A1,A2,B} (Edge indel by adding edge E7={A1,A2,B})
            p.first = 346;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 240: // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={B1,B2}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={R,B}, E6={B,C} (Edge indel by removing edge E1={R,A,B1})
			p.first = 133;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={B,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 133;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={B1,B2} (Edge indel by removing edge E3={R,A})
			p.first = 149;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E5={R,B}, E6={B,C} (Edge indel by removing edge E4={R,B1})
			p.first = 158;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={B,C} (Edge indel by removing edge E5={R,B2})
			p.first = 158;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2} (Edge indel by removing edge E6={B1,B2})
			p.first = 136;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B1})
            p.first = 337;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={R,B}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B2})
            p.first = 337;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e4, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2}, E7={R,A1,A2} (Edge indel by adding edge E7={R,B1,B2})
            p.first = 343;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e4, e5, e3, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={B1,B2}, E7={A,B1,B2} (Edge indel by adding edge E7={A,B1,B2})
            p.first = 347;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={B1,B2}, E7={R,A,B1,B2} (Edge indel by adding edge E7={R,A,B1,B2})
            p.first = 348;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 241: // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,C}
			// E2={R,A1}, E3={R,B}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E1={R,A,B})
			p.first = 134;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E2={R,A})
			p.first = 164;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E3={R,B})
			p.first = 150;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E4={R,C})
			p.first = 159;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E6={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 133;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B} (Edge indel by removing edge E6={A,C})
			p.first = 137;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 338;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B} (Edge indel by adding edge E7={B,C})
            p.first = 340;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A}, E3={R,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,A,C})
            p.first = 344;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,B1}, E3={R,A}, E4={R,B2}, E5={A,B1,B2}, E6={B1,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,B,C})
            p.first = 347;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={B,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 349;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, EDGES_ALPHABET[i], e1, e3, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 242: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,C}
			// E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 133;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,B}, E5={R,A2}, E6={A1,A2} (Edge indel by removing edge E2={R,A,B})
			p.first = 135;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={B,C} (Edge indel by removing edge E3={R,A})
			p.first = 165;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={R,C}, E6={A,C} (Edge indel by removing edge E4={R,B})
			p.first = 151;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E6={B,C} (Edge indel by removing edge E5={R,C})
			p.first = 160;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B} (Edge indel by removing edge E6={A,C})
			p.first = 138;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 339;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,B}, E7={A2,B} (Edge indel by adding edge E7={B,C})
            p.first = 341;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={R,C}, E5={R,B}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,A,C})
            p.first = 345;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1}, E4={R,A}, E5={R,B2}, E6={B1,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,B,C})
            p.first = 348;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={B,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 349;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 243: // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2}
			// E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 134;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,B}, E4={R,A}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E2={R,A1})
			p.first = 166;
			p.second = create_permutations_subset(mismatches, root, c, b, a, p.first, e1, e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,B}, E4={R,A}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E3={R,A2})
			p.first = 166;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e4, e2, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E4={R,B})
			p.first = 152;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={R,B}, E6={A1,A2} (Edge indel by removing edge E5={A1,A2,B})
			p.first = 135;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={R,A3}, E5={A1,A2,A3} (Edge indel by removing edge E6={A1,A2})
			p.first = 139;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by adding edge E7={A1,B})
            p.first = 342;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,B1}, E3={R,A}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by adding edge E7={A2,B})
            p.first = 342;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2}, E7={R,A1,A2} (Edge indel by adding edge E7={R,A1,A2})
            p.first = 346;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,B}, E3={R,C}, E4={R,A}, E5={A,B,C}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A1,B})
            p.first = 349;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, EDGES_ALPHABET[i], e4, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,C}, E3={R,B}, E4={R,A}, E5={A,B,C}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A2,B})
            p.first = 349;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, b, a, p.first, e1, EDGES_ALPHABET[i], e4, e3, e2, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 244: // E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={R,A} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 136;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e6, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,A}, E6={R,B2} (Edge indel by removing edge E2={R,A1,A3})
			p.first = 136;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2} (Edge indel by removing edge E3={R,A2,A3})
			p.first = 136;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,A1,A2}, E5={R,A1}, E6={R,A2} (Edge indel by removing edge E4={R,A1})
			p.first = 167;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e3, e1, e2, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={R,A1}, E6={R,A2} (Edge indel by removing edge E5={R,A2})
			p.first = 167;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2} (Edge indel by removing edge E6={R,A3})
			p.first = 167;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={R,B}, E7={A1,A2} (Edge indel by adding edge E7={A1,A2})
            p.first = 343;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={R,A1}, E5={R,B}, E6={R,A2}, E7={A1,A2} (Edge indel by adding edge E7={A1,A3})
            p.first = 343;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,A1,A2}, E4={R,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2} (Edge indel by adding edge E7={A2,A3})
            p.first = 343;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e3, e1, e2, e5, e6, e4, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={A1,A2,A3} (Edge indel by adding edge E7={A1,A2,A3})
            p.first = 350;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={R,A1,A2,A3} (Edge indel by adding edge E7={R,A1,A2,A3})
            p.first = 351;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 245: // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}
			// E2={R,A1,A2}, E3={R,A1}, E4={R,B}, E5={R,A2}, E6={A1,A2,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 137;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B} (Edge indel by removing edge E2={R,A,B2})
			p.first = 137;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2} (Edge indel by removing edge E3={R,A})
			p.first = 171;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E5={R,B}, E6={A,B,C} (Edge indel by removing edge E4={R,B1})
			p.first = 168;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={A,B,C} (Edge indel by removing edge E5={R,B2})
			p.first = 168;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2} (Edge indel by removing edge E6={A,B1,B2})
			p.first = 136;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B} (Edge indel by adding edge E7={A,B1})
            p.first = 344;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={R,B}, E6={A,B,C}, E7={A,B} (Edge indel by adding edge E7={A,B2})
            p.first = 344;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e4, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={B1,B2} (Edge indel by adding edge E7={B1,B2})
            p.first = 347;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A1}, E4={R,A2}, E5={R,A3}, E6={A1,A2,A3}, E7={R,A2,A3} (Edge indel by adding edge E7={R,B1,B2})
            p.first = 350;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={R,A,B1,B2} (Edge indel by adding edge E7={R,A,B1,B2})
            p.first = 352;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 246: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 136;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1,A2}, E4={R,A1}, E5={R,B}, E6={R,A2} (Edge indel by removing edge E2={R,A,B1})
			p.first = 138;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,A1}, E5={R,A2}, E6={R,B} (Edge indel by removing edge E3={R,A,B2})
			p.first = 138;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,B1}, E6={R,B2} (Edge indel by removing edge E4={R,A})
			p.first = 172;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E6={R,B} (Edge indel by removing edge E5={R,B1})
			p.first = 169;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B} (Edge indel by removing edge E6={R,B2})
			p.first = 169;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B} (Edge indel by adding edge E7={A,B1})
            p.first = 345;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={R,B}, E7={A,B} (Edge indel by adding edge E7={A,B2})
            p.first = 345;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={B1,B2} (Edge indel by adding edge E7={B1,B2})
            p.first = 348;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={R,A2,A3} (Edge indel by adding edge E7={R,B1,B2})
            p.first = 351;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2} (Edge indel by adding edge E7={A,B1,B2})
            p.first = 352;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 247: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}
			// E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 137;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E3={R,A1}, E4={R,A2}, E5={R,A3}, E6={A1,A2,A3} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 139;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C} (Edge indel by removing edge E3={R,A1})
			p.first = 173;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={R,C}, E6={A,B,C} (Edge indel by removing edge E4={R,A2})
			p.first = 173;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E6={A1,A2,B} (Edge indel by removing edge E5={R,B})
			p.first = 170;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B} (Edge indel by removing edge E6={A1,A2,B})
			p.first = 138;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E7={A1,A2} (Edge indel by adding edge E7={A1,A2})
            p.first = 346;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={B,C} (Edge indel by adding edge E7={A1,B})
            p.first = 349;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={B,C} (Edge indel by adding edge E7={A2,B})
            p.first = 349;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,A1,B})
            p.first = 352;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1}, E4={R,A}, E5={R,B2}, E6={A,B1,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,A2,B})
            p.first = 352;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 248: // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2}, E5={A1,B}, E6={A2,B}
			// E2={R,A1}, E3={R,A2}, E4={A1,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 140;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B}, E5={B,C}, E6={A,C} (Edge indel by removing edge E2={R,A1})
			p.first = 174;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={A,B}, E5={A,C}, E6={B,C} (Edge indel by removing edge E3={R,A2})
			p.first = 174;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E4={A1,A2})
			p.first = 153;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B}, E6={B,C} (Edge indel by removing edge E5={A1,B})
			p.first = 141;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={A,B}, E5={B,C} (Edge indel by removing edge E6={A2,B})
			p.first = 141;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2}, E5={A1,B}, E6={A2,B}, E7={R,B} (Edge indel by adding edge E7={R,B})
            p.first = 333;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B}, E5={A,C}, E6={B,C}, E7={R,A,C} (Edge indel by adding edge E7={R,A1,B})
            p.first = 353;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={A,B}, E5={B,C}, E6={A,C}, E7={R,A,C} (Edge indel by adding edge E7={R,A2,B})
            p.first = 353;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2}, E5={A1,B}, E6={A2,B}, E7={A1,A2,B} (Edge indel by adding edge E7={A1,A2,B})
            p.first = 354;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2}, E5={A1,B}, E6={A2,B}, E7={R,A1,A2,B} (Edge indel by adding edge E7={R,A1,A2,B})
            p.first = 355;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 249: // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={A,C}, E6={B,C}
			// E2={R,A1}, E3={R,A2}, E4={A1,B}, E5={A1,A2}, E6={A2,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 140;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={R,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E2={R,A})
			p.first = 175;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={A,B}, E5={A,C}, E6={B,C} (Edge indel by removing edge E3={R,C})
			p.first = 174;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E5={A,C}, E6={B,C} (Edge indel by removing edge E4={A,B})
			p.first = 143;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E6={B,C} (Edge indel by removing edge E5={A,C})
			p.first = 154;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={A,C} (Edge indel by removing edge E6={B,C})
			p.first = 142;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B}, E7={R,A2} (Edge indel by adding edge E7={R,B})
            p.first = 333;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A}, E3={R,B}, E4={A,C}, E5={A,B}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A,C})
            p.first = 353;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,B1}, E3={R,B2}, E4={A,B1}, E5={B1,B2}, E6={A,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,B,C})
            p.first = 356;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={A,C}, E6={B,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 357;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B}, E5={A,C}, E6={B,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 358;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 250: // E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B}
			// E2={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={B1,B2}, E6={A,B2} (Edge indel by removing edge E1={R,A1})
			p.first = 176;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2} (Edge indel by removing edge E2={R,A2})
			p.first = 176;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1}, E2={R,A2}, E4={A1,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E3={A1,A2,B})
			p.first = 140;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E4={A1,A2})
			p.first = 155;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A}, E2={R,B}, E3={A,B,C}, E4={A,B}, E6={B,C} (Edge indel by removing edge E5={A1,B})
			p.first = 144;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={B,C} (Edge indel by removing edge E6={A2,B})
			p.first = 144;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e1, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1}, E2={R,A2}, E3={A1,A2,A3}, E4={A1,A2}, E5={A1,A3}, E6={A2,A3}, E7={R,A3} (Edge indel by adding edge E7={R,B})
            p.first = 334;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B}, E7={R,A1,A2} (Edge indel by adding edge E7={R,A1,A2})
            p.first = 354;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A}, E2={R,C}, E3={A,B,C}, E4={A,C}, E5={A,B}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A1,B})
            p.first = 357;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,C}, E2={R,A}, E3={A,B,C}, E4={A,C}, E5={B,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,A2,B})
            p.first = 357;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e2, e1, e3, e6, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={R,A2}, E3={A1,A2,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B}, E7={R,A1,A2,B} (Edge indel by adding edge E7={R,A1,A2,B})
            p.first = 359;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 251: // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2}, E5={A1,B}, E6={A2,B}
			// E2={R,A1}, E3={R,A2}, E4={A1,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 140;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A}, E4={A,B1}, E5={B1,B2}, E6={A2,B} (Edge indel by removing edge E2={R,A1})
			p.first = 177;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A}, E4={A,B1}, E5={A,B2}, E6={B1,B2} (Edge indel by removing edge E3={R,A2})
			p.first = 177;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E4={A1,A2})
			p.first = 156;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={A,B}, E6={B,C} (Edge indel by removing edge E5={A1,B})
			p.first = 145;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,B}, E3={R,A}, E4={A,B}, E5={B,C} (Edge indel by removing edge E6={A2,B})
			p.first = 145;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={A1,A2}, E5={A1,A3}, E6={A2,A3}, E7={R,A3} (Edge indel by adding edge E7={R,B})
            p.first = 335;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2}, E5={A1,B}, E6={A2,B}, E7={R,A1,A2} (Edge indel by adding edge E7={R,A1,A2})
            p.first = 355;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={R,C}, E4={A,C}, E5={A,B}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A1,B})
            p.first = 358;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,C}, E3={R,A}, E4={A,C}, E5={B,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,A2,B})
            p.first = 358;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e2, e6, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2}, E5={A1,B}, E6={A2,B}, E7={A1,A2,B} (Edge indel by adding edge E7={A1,A2,B})
            p.first = 359;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 252: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={A,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C}, E6={A,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 142;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B}, E6={B,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 141;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={A,B}, E6={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 186;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E4={R,B})
			p.first = 178;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={A,C} (Edge indel by removing edge E5={A,B})
			p.first = 157;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B} (Edge indel by removing edge E6={A,C})
			p.first = 146;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={A,B1}, E6={A,B2}, E7={R,B2} (Edge indel by adding edge E7={R,C})
            p.first = 336;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 353;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={A,C}, E7={R,B,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 360;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={A,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 361;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={A,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 362;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 253: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C}, E6={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 143;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B}, E6={B,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 141;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={A,B}, E6={B,C} (Edge indel by removing edge E3={R,A})
			p.first = 179;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={R,B})
			p.first = 185;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={B,C} (Edge indel by removing edge E5={A,B})
			p.first = 158;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B} (Edge indel by removing edge E6={B,C})
			p.first = 146;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={B,C}, E7={R,C} (Edge indel by adding edge E7={R,C})
            p.first = 337;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={B,C}, E7={R,A,B,C} (Edge indel by adding edge E7={A,C})
            p.first = 353;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B,C}, E3={R,B}, E4={R,A}, E5={A,B}, E6={A,C}, E7={R,A,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 360;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={B,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 363;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={B,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 364;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 254: // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C}
			// E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 144;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E2={R,A})
			p.first = 180;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E3={R,B})
			p.first = 187;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 141;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B,C}, E6={B,C} (Edge indel by removing edge E5={A,B})
			p.first = 159;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by removing edge E6={B,C})
			p.first = 147;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={R,C} (Edge indel by adding edge E7={R,C})
            p.first = 338;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={A2,B}, E7={A1,B} (Edge indel by adding edge E7={A,C})
            p.first = 354;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A,C} (Edge indel by adding edge E7={R,A,C})
            p.first = 363;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={R,A,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 361;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 365;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 255: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B}, E6={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B}, E6={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 141;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 145;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B}, E6={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 181;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={R,B})
			p.first = 188;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E6={B,C} (Edge indel by removing edge E5={A,B})
			p.first = 160;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2} (Edge indel by removing edge E6={B,C})
			p.first = 148;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B}, E6={A,C}, E7={R,C} (Edge indel by adding edge E7={R,C})
            p.first = 339;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2}, E6={A2,B}, E7={A1,B} (Edge indel by adding edge E7={A,C})
            p.first = 355;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B}, E6={B,C}, E7={R,A,C} (Edge indel by adding edge E7={R,A,C})
            p.first = 364;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B}, E6={A,C}, E7={R,A,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 362;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B}, E6={B,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 365;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 256: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B}, E6={B,C}
			// E2={R,A,B}, E3={R,C}, E4={R,A}, E5={B,C}, E6={A,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 143;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e4, e3, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 142;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E4={R,B}, E5={A,C}, E6={B,C} (Edge indel by removing edge E3={R,B})
			p.first = 189;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={R,C})
			p.first = 179;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E6={B1,B2} (Edge indel by removing edge E5={A,B})
			p.first = 149;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B} (Edge indel by removing edge E6={B,C})
			p.first = 161;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B}, E6={B,C}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 337;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={B1,B2}, E7={A,B2} (Edge indel by adding edge E7={A,C})
            p.first = 356;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,B,C}, E3={R,A}, E4={R,B}, E5={A,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,B,C})
            p.first = 360;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B}, E6={B,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 366;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B}, E6={B,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 367;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 257: // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}
			// E2={R,B}, E3={R,A}, E4={A,B,C}, E5={B,C}, E6={A,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 144;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e3, e2, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E2={R,A})
			p.first = 192;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E3={R,C})
			p.first = 180;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 142;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E6={A,C} (Edge indel by removing edge E5={A,B})
			p.first = 150;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E6={A,C})
			p.first = 162;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={R,B} (Edge indel by adding edge E7={R,B})
            p.first = 338;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 357;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,A,C})
            p.first = 361;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 366;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 368;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 258: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={A,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 142;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,B}, E4={R,A}, E5={B,C}, E6={A,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 145;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e4, e3, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 193;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B}, E6={A,C} (Edge indel by removing edge E4={R,C})
			p.first = 181;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E6={A,C} (Edge indel by removing edge E5={A,B})
			p.first = 151;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B} (Edge indel by removing edge E6={A,C})
			p.first = 163;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={A,C}, E7={R,B} (Edge indel by adding edge E7={R,B})
            p.first = 339;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 358;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,A,C})
            p.first = 362;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,C}, E5={A,B}, E6={B,C}, E7={R,A,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 367;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={A,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 368;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 259: // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,C}, E6={B,C}
			// E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 144;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E2={R,A})
			p.first = 182;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={A,B,C}, E5={A,C}, E6={B,C} (Edge indel by removing edge E3={R,C})
			p.first = 190;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E5={A,C}, E6={B,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 143;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E6={B,C} (Edge indel by removing edge E5={A,C})
			p.first = 164;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E6={B,C})
			p.first = 150;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,B}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B}, E7={R,A2} (Edge indel by adding edge E7={R,A})
            p.first = 340;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,C}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 357;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A,C})
            p.first = 363;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,C}, E3={R,B}, E4={A,B,C}, E5={B,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,B,C})
            p.first = 366;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e3, e2, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,C}, E6={B,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 369;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 260: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C}, E6={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C}, E6={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 143;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 145;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,B}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E3={R,A})
			p.first = 183;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,C}, E6={B,C} (Edge indel by removing edge E4={R,C})
			p.first = 191;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E6={B,C} (Edge indel by removing edge E5={A,C})
			p.first = 165;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C} (Edge indel by removing edge E6={B,C})
			p.first = 151;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,B}, E5={A1,B}, E6={A2,B}, E7={R,A2} (Edge indel by adding edge E7={R,B})
            p.first = 341;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 358;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A,C})
            p.first = 364;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,C}, E4={R,B}, E5={B,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,B,C})
            p.first = 367;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C}, E6={B,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 369;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 261: // E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C}
			// E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 144;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E2={R,A})
			p.first = 184;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E3={R,B})
			p.first = 194;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A}, E3={R,B}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 145;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E6={B,C} (Edge indel by removing edge E5={A,B})
			p.first = 166;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by removing edge E6={B,C})
			p.first = 152;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,B1}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={R,B2} (Edge indel by adding edge E7={R,C})
            p.first = 342;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={A2,B}, E7={A1,B} (Edge indel by adding edge E7={A,C})
            p.first = 359;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A,B})
            p.first = 365;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,C}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A,C})
            p.first = 369;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,C}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,B,C})
            p.first = 368;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 262: // E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={B1,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 149;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={A,B} (Edge indel by removing edge E2={R,A1,B})
			p.first = 146;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B} (Edge indel by removing edge E3={R,A2,B})
			p.first = 146;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E5={R,A}, E6={A,B} (Edge indel by removing edge E4={R,A1})
			p.first = 195;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E6={A,B} (Edge indel by removing edge E5={R,A2})
			p.first = 195;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2} (Edge indel by removing edge E6={A1,A2})
			p.first = 167;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2}, E7={R,B} (Edge indel by adding edge E7={R,B})
            p.first = 343;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C} (Edge indel by adding edge E7={A1,B})
            p.first = 360;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={A,B}, E7={A,C} (Edge indel by adding edge E7={A2,B})
            p.first = 360;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e4, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2}, E7={A1,A2,B} (Edge indel by adding edge E7={A1,A2,B})
            p.first = 370;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2}, E7={R,A1,A2,B} (Edge indel by adding edge E7={R,A1,A2,B})
            p.first = 371;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 263: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 150;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			//  E1={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E2={R,A,C})
			p.first = 147;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			//  E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E3={R,A})
			p.first = 198;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			//  E1={R,A,B}, E2={R,A,C}, E3={R,A}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E4={R,B})
			p.first = 196;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			//  E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={A,B} (Edge indel by removing edge E5={A,B,C})
			p.first = 146;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			//  E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C} (Edge indel by removing edge E6={A,B})
			p.first = 168;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			//  E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={R,C} (Edge indel by adding edge E7={R,C})
            p.first = 344;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			//  E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by adding edge E7={A,C})
            p.first = 361;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			//  E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 363;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			//  E1={R,A1,A2}, E2={R,A1,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2}, E7={R,A2,B} (Edge indel by adding edge E7={R,B,C})
            p.first = 370;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			//  E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 372;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 264: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 146;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={A,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 151;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,A1}, E5={R,A2}, E6={A1,A2} (Edge indel by removing edge E3={R,A,C})
			p.first = 148;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={A,B} (Edge indel by removing edge E4={R,A})
			p.first = 199;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E6={A,B} (Edge indel by removing edge E5={R,B})
			p.first = 197;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B} (Edge indel by removing edge E6={A,B})
			p.first = 169;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={R,C} (Edge indel by adding edge E7={R,C})
            p.first = 345;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C} (Edge indel by adding edge E7={A,C})
            p.first = 362;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 364;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A1,A2}, E3={R,A,B1}, E4={R,A1}, E5={R,A2}, E6={A1,A2}, E7={R,A,B2} (Edge indel by adding edge E7={R,B,C})
            p.first = 371;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 372;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 265: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2}
			// E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 147;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 152;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E3={R,A1})
			p.first = 200;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E4={R,A2})
			p.first = 200;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E6={A1,A2} (Edge indel by removing edge E5={A1,A2,B})
			p.first = 148;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B} (Edge indel by removing edge E6={A1,A2})
			p.first = 170;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2}, E7={R,B} (Edge indel by adding edge E7={R,B})
            p.first = 346;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by adding edge E7={A1,B})
            p.first = 365;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by adding edge E7={A2,B})
            p.first = 365;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={R,A,C} (Edge indel by adding edge E7={R,A1,B})
            p.first = 372;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={R,A,C} (Edge indel by adding edge E7={R,A2,B})
            p.first = 372;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 266: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={B1,B2}
			// E2={R,A,B}, E3={R,C}, E4={R,A}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E1={R,A,B1})
			p.first = 150;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 150;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E4={R,B}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E3={R,B1})
			p.first = 201;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E4={R,B2})
			p.first = 201;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E6={B1,B2} (Edge indel by removing edge E5={A,B1,B2})
			p.first = 149;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2} (Edge indel by removing edge E6={B1,B2})
			p.first = 171;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={B1,B2}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 347;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B1})
            p.first = 366;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,C}, E4={R,B}, E5={A,B,C}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B2})
            p.first = 366;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e3, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2}, E7={R,A1,A2} (Edge indel by adding edge E7={R,B1,B2})
            p.first = 370;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={B1,B2}, E7={R,A,B1,B2} (Edge indel by adding edge E7={R,A,B1,B2})
            p.first = 373;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 267: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 149;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={R,A}, E6={A,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 151;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 151;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E5={R,B}, E6={B,C} (Edge indel by removing edge E4={R,B1})
			p.first = 202;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={B,C} (Edge indel by removing edge E5={R,B2})
			p.first = 202;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2} (Edge indel by removing edge E6={B1,B2})
			p.first = 172;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={B1,B2}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 348;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B1})
            p.first = 367;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,C}, E5={R,B}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B2})
            p.first = 367;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e4, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2}, E7={R,A1,A2} (Edge indel by adding edge E7={R,B1,B2})
            p.first = 371;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={B1,B2}, E7={A,B1,B2} (Edge indel by adding edge E7={A,B1,B2})
            p.first = 373;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 268: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 150;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E2={R,A,B})
			p.first = 152;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,C}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 204;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E4={R,C})
			p.first = 203;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E6={A,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 151;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C} (Edge indel by removing edge E6={A,C})
			p.first = 173;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={B,C}, E7={R,A} (Edge indel by adding edge E7={R,B})
            p.first = 349;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 368;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 369;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,A,C})
            p.first = 372;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={B1,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,B,C})
            p.first = 373;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 269: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,C}, E6={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 154;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E2={R,A,C})
			p.first = 153;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={A,C}, E6={B,C} (Edge indel by removing edge E3={R,A})
			p.first = 189;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={R,B})
			p.first = 185;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={B,C} (Edge indel by removing edge E5={A,C})
			p.first = 158;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,C} (Edge indel by removing edge E6={B,C})
			p.first = 157;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,C})
            p.first = 337;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,C}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 353;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A1}, E4={R,A2}, E5={A1,B}, E6={A2,B}, E7={R,A2,B} (Edge indel by adding edge E7={R,B,C})
            p.first = 374;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,C}, E6={B,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 375;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,C}, E6={B,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 376;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 270: // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B}
			// E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 155;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B,C}, E5={B,C}, E6={A,C} (Edge indel by removing edge E2={R,A1})
			p.first = 190;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={A,B,C}, E5={A,C}, E6={B,C} (Edge indel by removing edge E3={R,A2})
			p.first = 190;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E4={A1,A2,B})
			p.first = 153;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B,C}, E6={B,C} (Edge indel by removing edge E5={A1,B})
			p.first = 159;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={A,B,C}, E5={B,C} (Edge indel by removing edge E6={A2,B})
			p.first = 159;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B}, E7={R,B} (Edge indel by adding edge E7={R,B})
            p.first = 340;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B}, E7={A1,A2} (Edge indel by adding edge E7={A1,A2})
            p.first = 354;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={B,C}, E7={R,A,C} (Edge indel by adding edge E7={R,A1,B})
            p.first = 375;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={A,B,C}, E5={B,C}, E6={A,C}, E7={R,A,C} (Edge indel by adding edge E7={R,A2,B})
            p.first = 375;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B}, E7={R,A1,A2,B} (Edge indel by adding edge E7={R,A1,A2,B})
            p.first = 377;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 271: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,B}, E6={A2,B}
			// E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 153;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 156;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={B,C}, E6={A,C} (Edge indel by removing edge E3={R,A1})
			p.first = 191;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,C}, E6={B,C} (Edge indel by removing edge E4={R,A2})
			p.first = 191;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E6={B,C} (Edge indel by removing edge E5={A1,B})
			p.first = 160;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={B,C} (Edge indel by removing edge E6={A2,B})
			p.first = 160;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,B}, E6={A2,B}, E7={R,B} (Edge indel by adding edge E7={R,B})
            p.first = 341;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,B}, E6={A2,B}, E7={A1,A2} (Edge indel by adding edge E7={A1,A2})
            p.first = 355;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,C}, E6={B,C}, E7={R,A,C} (Edge indel by adding edge E7={R,A1,B})
            p.first = 376;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={B,C}, E6={A,C}, E7={R,A,C} (Edge indel by adding edge E7={R,A2,B})
            p.first = 376;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,B}, E6={A2,B}, E7={A1,A2,B} (Edge indel by adding edge E7={A1,A2,B})
            p.first = 377;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 272: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2}
			// E2={R,A,B}, E3={R,C}, E4={R,A}, E5={B,C}, E6={A,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 154;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e4, e3, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 154;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E4={R,B}, E5={A,C}, E6={A,B} (Edge indel by removing edge E3={R,B1})
			p.first = 186;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={A,B}, E6={A,C} (Edge indel by removing edge E4={R,B2})
			p.first = 186;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,C}, E4={R,B}, E6={A,B} (Edge indel by removing edge E5={A,B1})
			p.first = 161;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e3, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B} (Edge indel by removing edge E6={A,B2})
			p.first = 161;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 336;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2} (Edge indel by adding edge E7={B1,B2})
            p.first = 356;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,B}, E6={A2,B}, E7={R,A1,A2} (Edge indel by adding edge E7={R,B1,B2})
            p.first = 374;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2}, E7={A,B1,B2} (Edge indel by adding edge E7={A,B1,B2})
            p.first = 378;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2}, E7={R,A,B1,B2} (Edge indel by adding edge E7={R,A,B1,B2})
            p.first = 379;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 273: // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={B,C}
			// E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 155;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E2={R,A})
			p.first = 192;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E3={R,C})
			p.first = 187;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 154;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E6={B,C} (Edge indel by removing edge E5={R,C})
			p.first = 164;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E6={B,C})
			p.first = 162;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 338;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={A,C} (Edge indel by adding edge E7={A,C})
            p.first = 357;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A,C})
            p.first = 375;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,B1}, E3={R,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,B,C})
            p.first = 378;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 380;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 274: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 154;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 156;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 193;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={R,C})
			p.first = 188;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E6={B,C} (Edge indel by removing edge E5={A,B})
			p.first = 165;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B} (Edge indel by removing edge E6={B,C})
			p.first = 163;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,C}, E5={A,B}, E6={A,C}, E7={R,A} (Edge indel by adding edge E7={R,B})
            p.first = 339;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={B,C}, E7={A,C} (Edge indel by adding edge E7={A,C})
            p.first = 358;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,C}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A,C})
            p.first = 376;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,B,C})
            p.first = 379;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={B,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 380;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 275: // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B}
			// E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 155;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={A,B,C}, E5={B,C}, E6={A,B} (Edge indel by removing edge E2={R,A1})
			p.first = 194;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E3={R,A2})
			p.first = 194;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E4={A1,A2,B})
			p.first = 156;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E6={B,C} (Edge indel by removing edge E5={A1,B})
			p.first = 166;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,B}, E3={R,A}, E4={A,B,C}, E5={B,C} (Edge indel by removing edge E6={A2,B})
			p.first = 166;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,B1}, E3={R,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={R,A} (Edge indel by adding edge E7={R,B})
            p.first = 342;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B}, E7={A1,A2} (Edge indel by adding edge E7={A1,A2})
            p.first = 359;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B}, E7={R,A1,A2} (Edge indel by adding edge E7={R,A1,A2})
            p.first = 377;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A1,B})
            p.first = 380;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,C}, E3={R,A}, E4={A,B,C}, E5={B,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,A2,B})
            p.first = 380;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 276: // E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 161;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={B,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 158;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,A}, E5={R,B}, E6={A,C} (Edge indel by removing edge E3={R,B,C})
			p.first = 157;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E5={R,A}, E6={B1,B2} (Edge indel by removing edge E4={R,A})
			p.first = 205;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E6={A,B} (Edge indel by removing edge E5={R,B})
			p.first = 195;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2} (Edge indel by removing edge E6={A,C})
			p.first = 167;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={R,A1}, E5={R,B}, E6={A1,A2}, E7={R,A2} (Edge indel by adding edge E7={R,C})
            p.first = 343;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 360;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,B}, E7={A2,B} (Edge indel by adding edge E7={B,C})
            p.first = 374;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 381;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 382;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 277: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 162;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 159;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 208;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E4={R,B})
			p.first = 196;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={A,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 157;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C} (Edge indel by removing edge E6={A,C})
			p.first =168 ;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={R,B} (Edge indel by adding edge E7={R,C})
            p.first = 344;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 361;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 375;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={R,B,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 381;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 383;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 278: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 157;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 163;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,B}, E5={R,A}, E6={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 160;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={A,C} (Edge indel by removing edge E4={R,A})
			p.first = 209;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E6={A,B} (Edge indel by removing edge E5={R,B})
			p.first = 197;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B} (Edge indel by removing edge E6={A,C})
			p.first = 169;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B}, E7={R,B} (Edge indel by adding edge E7={R,C})
            p.first = 345;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 362;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,C}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 376;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,C}, E7={R,B,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 382;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 383;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 279: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 164;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 159;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E3={R,A})
			p.first = 201;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E5={A,B1,B2}, E6={B1,B2} (Edge indel by removing edge E4={R,B})
			p.first = 206;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 158;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C} (Edge indel by removing edge E6={B,C})
			p.first = 168;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={A,B1,B2}, E6={B1,B2}, E7={R,B2} (Edge indel by adding edge E7={R,C})
            p.first = 347;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 363;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={B,C}, E7={A,C} (Edge indel by adding edge E7={A,C})
            p.first = 375;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B,C}, E3={R,B}, E4={R,A}, E5={A,B,C}, E6={A,C}, E7={R,A,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 381;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={B,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 384;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 280: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 158;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 165;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,B}, E6={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 160;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={B,C} (Edge indel by removing edge E4={R,A})
			p.first = 202;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E6={B1,B2} (Edge indel by removing edge E5={R,B})
			p.first = 207;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B} (Edge indel by removing edge E6={B,C})
			p.first = 169;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={B1,B2}, E7={R,B2} (Edge indel by adding edge E7={R,C})
            p.first = 348;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 364;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={B,C}, E7={A,C} (Edge indel by adding edge E7={A,C})
            p.first = 376;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,B}, E5={R,A}, E6={A,C}, E7={R,A,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 382;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={B,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 384;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 281: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 159;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 166;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 203;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E4={R,B})
			p.first = 210;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E6={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 160;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B} (Edge indel by removing edge E6={B,C})
			p.first = 170;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={B,C}, E7={R,C} (Edge indel by adding edge E7={R,C})
            p.first = 349;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 365;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A2,B}, E7={A1,B} (Edge indel by adding edge E7={A,C})
            p.first = 377;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={B,C}, E7={R,A,C} (Edge indel by adding edge E7={R,A,C})
            p.first = 384;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B,C}, E6={A,C}, E7={R,A,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 383;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 282: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B}
			// E2={R,A,B}, E3={R,C}, E4={R,A}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 164;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E2={R,A,C})
			p.first = 162;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E4={R,B}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E3={R,B})
			p.first = 208;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E4={R,C})
			p.first = 198;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E6={A,B} (Edge indel by removing edge E5={A,B,C})
			p.first = 161;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2} (Edge indel by removing edge E6={A,B})
			p.first = 171;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 344;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by adding edge E7={A,C})
            p.first = 378;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 366;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,B,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={R,A,B} (Edge indel by adding edge E7={R,B,C})
            p.first = 381;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 385;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 283: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 161;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={R,A}, E6={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 165;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B} (Edge indel by removing edge E3={R,A,C})
			p.first = 163;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E5={R,B}, E6={A,C} (Edge indel by removing edge E4={R,B})
			p.first = 209;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e2, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={A,B} (Edge indel by removing edge E5={R,C})
			p.first = 199;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2} (Edge indel by removing edge E6={A,B})
			p.first = 172;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 345;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2} (Edge indel by adding edge E7={A,C})
            p.first = 379;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 367;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,C}, E7={R,A,B} (Edge indel by adding edge E7={R,B,C})
            p.first = 382;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 385;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 284: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 162;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,B}, E4={R,A}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 166;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E3={R,A})
			p.first = 211;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E4={R,C})
			p.first = 200;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E6={A,B} (Edge indel by removing edge E5={A,B,C})
			p.first = 163;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C} (Edge indel by removing edge E6={A,B})
			p.first = 173;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2}, E7={R,A2} (Edge indel by adding edge E7={R,B})
            p.first = 346;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by adding edge E7={A,C})
            p.first = 368;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 380;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A,C})
            p.first = 383;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={R,A,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 385;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 285: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 164;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 166;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,C}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 204;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E4={R,C})
			p.first = 210;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E6={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 165;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C} (Edge indel by removing edge E6={B,C})
			p.first = 173;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,B})
            p.first = 349;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 380;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={B,C}, E7={A,C} (Edge indel by adding edge E7={A,C})
            p.first = 369;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A,C})
            p.first = 384;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,B,C})
            p.first = 385;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 286: // E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 171;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={A,B,C} (Edge indel by removing edge E2={R,A1,B})
			p.first = 168;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C} (Edge indel by removing edge E3={R,A2,B})
			p.first = 168;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E5={R,A}, E6={A,B1,B2} (Edge indel by removing edge E4={R,A1})
			p.first = 212;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E6={A,B1,B2} (Edge indel by removing edge E5={R,A2})
			p.first = 212;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2} (Edge indel by removing edge E6={A1,A2,B})
			p.first = 167;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={A1,A2,A3}, E7={R,A3} (Edge indel by adding edge E7={R,B})
            p.first = 350;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,A2} (Edge indel by adding edge E7={A1,A2})
            p.first = 370;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C} (Edge indel by adding edge E7={A1,B})
            p.first = 381;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={A,B,C}, E7={A,C} (Edge indel by adding edge E7={A2,B})
            p.first = 381;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e4, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={R,A1,A2,B} (Edge indel by adding edge E7={R,A1,A2,B})
            p.first = 386;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 287: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}
			// E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 167;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 172;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,A} (Edge indel by removing edge E3={R,A1,B})
			p.first = 169;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,A}, E6={R,B} (Edge indel by removing edge E4={R,A2,B})
			p.first = 169;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E6={R,A} (Edge indel by removing edge E5={R,A1})
			p.first = 213;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A} (Edge indel by removing edge E6={R,A2})
			p.first = 213;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3} (Edge indel by adding edge E7={R,B})
            p.first = 351;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2} (Edge indel by adding edge E7={A1,A2})
            p.first = 371;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,C} (Edge indel by adding edge E7={A1,B})
            p.first = 382;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={A,C} (Edge indel by adding edge E7={A2,B})
            p.first = 382;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B} (Edge indel by adding edge E7={A1,A2,B})
            p.first = 386;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 288: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 168;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 173;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B} (Edge indel by removing edge E3={R,A,C})
			p.first = 170;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={A,B,C} (Edge indel by removing edge E4={R,A})
			p.first = 215;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E6={A,B1,B2} (Edge indel by removing edge E5={R,B})
			p.first = 214;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B} (Edge indel by removing edge E6={A,B,C})
			p.first = 169;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={A,B1,B2}, E7={R,B2} (Edge indel by adding edge E7={R,C})
            p.first = 352;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 372;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C} (Edge indel by adding edge E7={A,C})
            p.first = 383;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 384;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={R,A2,B} (Edge indel by adding edge E7={R,B,C})
            p.first = 386;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 289: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 171;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={R,A}, E6={A,B,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 173;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 173;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E5={R,B}, E6={A,B,C} (Edge indel by removing edge E4={R,B1})
			p.first = 215;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={A,B,C} (Edge indel by removing edge E5={R,B2})
			p.first = 215;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2} (Edge indel by removing edge E6={A,B1,B2})
			p.first = 172;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 352;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B} (Edge indel by adding edge E7={A,B1})
            p.first = 385;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,C}, E5={R,B}, E6={A,B,C}, E7={A,B} (Edge indel by adding edge E7={A,B2})
            p.first = 385;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e4, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={B1,B2} (Edge indel by adding edge E7={B1,B2})
            p.first = 373;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={R,A1,A2} (Edge indel by adding edge E7={R,B1,B2})
            p.first = 386;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 290: // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1}, E5={A,B2}, E6={B1,B2}
			// E2={R,A,B}, E3={R,A}, E4={A,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E1={R,A,B1})
			p.first = 174;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B}, E5={A,C}, E6={B,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 174;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2} (Edge indel by removing edge E3={R,A})
			p.first = 216;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={A,B1})
			p.first = 185;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B}, E6={B,C} (Edge indel by removing edge E5={A,B2})
			p.first = 185;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E6={B1,B2})
			p.first = 178;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B}, E5={A,C}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,B1})
            p.first = 353;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={A,C}, E5={A,B}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,B2})
            p.first = 353;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1}, E5={A,B2}, E6={B1,B2}, E7={R,B1,B2} (Edge indel by adding edge E7={R,B1,B2})
            p.first = 387;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1}, E5={A,B2}, E6={B1,B2}, E7={A,B1,B2} (Edge indel by adding edge E7={A,B1,B2})
            p.first = 388;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1}, E5={A,B2}, E6={B1,B2}, E7={R,A,B1,B2} (Edge indel by adding edge E7={R,A,B1,B2})
            p.first = 389;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 291: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={A,C}, E6={B,C}
			// E2={R,A1,A2}, E3={R,B}, E4={A1,B}, E5={A1,A2}, E6={A2,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 175;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B}, E5={B,C}, E6={A,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 174;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2} (Edge indel by removing edge E3={R,B})
			p.first = 216;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={A,C}, E6={B,C} (Edge indel by removing edge E4={A,B})
			p.first = 189;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E6={B,C} (Edge indel by removing edge E5={A,C})
			p.first = 179;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={A,C} (Edge indel by removing edge E6={B,C})
			p.first = 186;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={A,C}, E6={B,C}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 353;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={A,B1}, E5={A,B2}, E6={B1,B2}, E7={R,B2} (Edge indel by adding edge E7={R,C})
            p.first = 356;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A}, E4={A,B1}, E5={B1,B2}, E6={A,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,B,C})
            p.first = 387;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={A,C}, E6={B,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 390;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B}, E5={A,C}, E6={B,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 391;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 292: // E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={B,C}
			// E2={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2} (Edge indel by removing edge E1={R,A,B})
			p.first = 176;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={A1,A2,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E2={R,A})
			p.first = 217;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={A,B}, E5={A,C}, E6={B,C} (Edge indel by removing edge E3={A,B,C})
			p.first = 174;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E5={A,C}, E6={B,C} (Edge indel by removing edge E4={A,B})
			p.first = 190;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E6={B,C} (Edge indel by removing edge E5={A,C})
			p.first = 187;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={A,C} (Edge indel by removing edge E6={B,C})
			p.first = 180;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={A1,A2,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B}, E7={R,A2} (Edge indel by adding edge E7={R,B})
            p.first = 354;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={B,C}, E7={R,C} (Edge indel by adding edge E7={R,C})
            p.first = 357;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,A,C})
            p.first = 388;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={A,C}, E7={R,A,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 390;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={B,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 392;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 293: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={A,C}, E6={B,C}
			// E2={R,A,B}, E3={R,A}, E4={A,B}, E5={A,C}, E6={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 174;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A}, E4={A,B1}, E5={A,B2}, E6={B1,B2} (Edge indel by removing edge E2={R,A,B})
			p.first = 177;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E3={R,A})
			p.first = 218;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,C}, E6={B,C} (Edge indel by removing edge E4={A,B})
			p.first = 191;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E6={B,C} (Edge indel by removing edge E5={A,C})
			p.first = 188;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={A,C} (Edge indel by removing edge E6={B,C})
			p.first = 181;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={A1,A2}, E5={A1,B}, E6={A2,B}, E7={R,A2} (Edge indel by adding edge E7={R,B})
            p.first = 355;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={A,C}, E6={B,C}, E7={R,C} (Edge indel by adding edge E7={R,C})
            p.first = 358;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A}, E4={A,B1}, E5={A,B2}, E6={B1,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,A,C})
            p.first = 389;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,B}, E5={B,C}, E6={A,C}, E7={R,A,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 391;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B}, E5={A,C}, E6={B,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 392;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 294: // E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B}
			// E2={R,A}, E3={A,B1,B2}, E4={B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 176;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e5, e6, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={A1,A2,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E2={R,B})
			p.first = 217;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E3={A1,A2,B})
			p.first = 175;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E4={A1,A2})
			p.first = 182;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,B}, E6={A,C} (Edge indel by removing edge E5={A1,B})
			p.first = 192;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,B}, E5={A,C} (Edge indel by removing edge E6={A2,B})
			p.first = 192;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={B,C}, E7={R,A} (Edge indel by adding edge E7={R,A1})
            p.first = 357;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,C}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={A,C}, E7={R,A} (Edge indel by adding edge E7={R,A2})
            p.first = 357;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,B}, E3={A,B,C}, E4={A,C}, E5={A,B}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A1,B})
            p.first = 390;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,B}, E3={A,B,C}, E4={A,C}, E5={B,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,A2,B})
            p.first = 390;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e6, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,B}, E3={A1,A2,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B}, E7={R,A1,A2,B} (Edge indel by adding edge E7={R,A1,A2,B})
            p.first = 393;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 295: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B}
			// E2={R,A1,A2}, E3={R,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 175;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A}, E4={B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 177;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E3={R,B})
			p.first = 218;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E4={A1,A2})
			p.first = 183;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B}, E6={A,C} (Edge indel by removing edge E5={A1,B})
			p.first = 193;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B}, E5={A,C} (Edge indel by removing edge E6={A2,B})
			p.first = 193;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B}, E5={A,C}, E6={B,C}, E7={R,A} (Edge indel by adding edge E7={R,A1})
            p.first = 358;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B}, E5={B,C}, E6={A,C}, E7={R,A} (Edge indel by adding edge E7={R,A2})
            p.first = 358;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={A,C}, E5={A,B}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A1,B})
            p.first = 391;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={A,C}, E5={B,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,A2,B})
            p.first = 391;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e6, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B}, E7={A1,A2,B} (Edge indel by adding edge E7={A1,A2,B})
            p.first = 393;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 296: // E1={R,A,B1,B2}, E2={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2}
			// E2={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 176;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E3={A1,A2,A3}, E4={A1,A2}, E5={A1,A3}, E6={A2,A3} (Edge indel by removing edge E2={R,A})
			p.first = 219;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A}, E4={A,B1}, E5={A,B2}, E6={B1,B2} (Edge indel by removing edge E3={A,B1,B2})
			p.first = 177;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={A,B1})
			p.first = 194;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,B}, E6={B,C} (Edge indel by removing edge E5={A,B2})
			p.first = 194;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E6={B1,B2})
			p.first = 184;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={A1,A2,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B}, E7={R,A2} (Edge indel by adding edge E7={R,B1})
            p.first = 359;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1}, E3={A1,A2,B}, E4={A1,B}, E5={A1,A2}, E6={A2,B}, E7={R,A2} (Edge indel by adding edge E7={R,B2})
            p.first = 359;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, EDGES_ALPHABET[i], e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A,B1})
            p.first = 392;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={A,B,C}, E4={A,C}, E5={A,B}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A,B2})
            p.first = 392;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,B}, E3={A1,A2,B}, E4={A1,B}, E5={A2,B}, E6={A1,A2}, E7={R,A1,A2} (Edge indel by adding edge E7={R,B1,B2})
            p.first = 393;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e6, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 297: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,C}, E6={A,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 179;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={A,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 179;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,A}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E3={R,B1,B2})
			p.first = 178;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E4={R,A})
			p.first = 220;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E6={A,B} (Edge indel by removing edge E5={A,B1})
			p.first = 195;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B} (Edge indel by removing edge E6={A,B2})
			p.first = 195;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B}, E6={A,C}, E7={R,B} (Edge indel by adding edge E7={R,B1})
            p.first = 360;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E5={A,C}, E6={A,B}, E7={R,B} (Edge indel by adding edge E7={R,B2})
            p.first = 360;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}, E7={R,A,B1,B2} (Edge indel by adding edge E7={B1,B2})
            p.first = 387;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}, E7={A,B1,B2} (Edge indel by adding edge E7={A,B1,B2})
            p.first = 394;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}, E7={R,A,B1,B2} (Edge indel by adding edge E7={R,A,B1,B2})
            p.first = 395;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 298: // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}
			// E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={A,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 180;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 180;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E3={R,A})
			p.first = 221;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E4={A,B1,B2})
			p.first = 178;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E6={A,B} (Edge indel by removing edge E5={A,B1})
			p.first = 196;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E6={A,B2})
			p.first = 196;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={R,B} (Edge indel by adding edge E7={R,B1})
            p.first = 361;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={A,B}, E7={R,B} (Edge indel by adding edge E7={R,B2})
            p.first = 361;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2} (Edge indel by adding edge E7={B1,B2})
            p.first = 388;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={R,B1,B2} (Edge indel by adding edge E7={R,B1,B2})
            p.first = 394;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={R,A,B1,B2} (Edge indel by adding edge E7={R,A,B1,B2})
            p.first = 396;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 299: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 178;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={A,C}, E6={A,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 181;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B}, E6={A,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 181;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E4={R,A})
			p.first = 222;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E6={A,B} (Edge indel by removing edge E5={A,B1})
			p.first = 197;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B} (Edge indel by removing edge E6={A,B2})
			p.first = 197;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B}, E6={A,C}, E7={R,B} (Edge indel by adding edge E7={R,B1})
            p.first = 362;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={A,C}, E6={A,B}, E7={R,B} (Edge indel by adding edge E7={R,B2})
            p.first = 362;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}, E7={B1,B2} (Edge indel by adding edge E7={B1,B2})
            p.first = 389;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}, E7={R,B1,B2} (Edge indel by adding edge E7={R,B1,B2})
            p.first = 395;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}, E7={A,B1,B2} (Edge indel by adding edge E7={A,B1,B2})
            p.first = 396;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 300: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C}
			// E2={R,A1,A2}, E3={R,B}, E4={A!,A2,B}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 182;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 180;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E3={R,B})
			p.first = 223;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 179;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E6={B,C} (Edge indel by removing edge E5={A,B})
			p.first = 201;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E6={B,C})
			p.first = 198;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 363;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,C} (Edge indel by adding edge E7={R,C})
            p.first = 366;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={A,C} (Edge indel by adding edge E7={A,C})
            p.first = 390;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,B,C})
            p.first = 394;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 397;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 301: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 179;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1,A2}, E4={R,B}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 183;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B}, E6={A,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 181;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={R,B})
			p.first = 224;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={B,C} (Edge indel by removing edge E5={A,B})
			p.first = 202;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B} (Edge indel by removing edge E6={B,C})
			p.first = 199;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={B,C}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 364;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={B,C}, E7={R,C} (Edge indel by adding edge E7={R,C})
            p.first = 367;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={B,C}, E7={A,C} (Edge indel by adding edge E7={A,C})
            p.first = 391;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,B,C})
            p.first = 395;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={B,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 397;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 302: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C}
			// E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 180;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E2={R,A,B})
			p.first = 184;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 225;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B}, E6={A,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 181;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E6={A,C} (Edge indel by removing edge E5={A,B})
			p.first = 203;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E6={A,C})
			p.first = 200;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A} (Edge indel by adding edge E7={R,B})
            p.first = 365;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={R,C} (Edge indel by adding edge E7={R,C})
            p.first = 368;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 392;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,A,C})
            p.first = 396;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 397;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 303: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B}
			// E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 182;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 184;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E3={R,B})
			p.first = 226;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E4={A1,A2,B})
			p.first = 183;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E6={A,C} (Edge indel by removing edge E5={A1,B})
			p.first = 204;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E6={A2,B})
			p.first = 204;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={B,C}, E7={R,A} (Edge indel by adding edge E7={R,A1})
            p.first = 369;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,B,C}, E5={B,C}, E6={A,C}, E7={R,A} (Edge indel by adding edge E7={R,A2})
            p.first = 369;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B}, E7={A1,A2} (Edge indel by adding edge E7={A1,A2})
            p.first = 393;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A1,B})
            p.first = 397;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,c}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={B,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,A2,B})
            p.first = 397;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 304: // E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B}, E6={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={B,C}, E6={A,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 189;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={A,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 186;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,A}, E5={A,B}, E6={B,C} (Edge indel by removing edge E3={R,B,C})
			p.first = 185;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E4={R,A})
			p.first = 220;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E6={B1,B2} (Edge indel by removing edge E5={A,B})
			p.first = 205;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B} (Edge indel by removing edge E6={B,C})
			p.first = 195;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={A,C}, E7={R,A} (Edge indel by adding edge E7={R,B})
            p.first = 360;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={R,A1}, E5={A1,B}, E6={A2,B}, E7={R,A2} (Edge indel by adding edge E7={R,C})
            p.first = 374;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1}, E6={B1,B2}, E7={A,B2} (Edge indel by adding edge E7={A,C})
            p.first = 387;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B}, E6={B,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 398;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B}, E6={B,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 399;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 305: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C}
			// E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 190;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 187;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E3={R,A})
			p.first = 223;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 185;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E6={B1,B2} (Edge indel by removing edge E5={A,B})
			p.first = 206;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E6={B,C})
			p.first = 196;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,B})
            p.first = 363;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,C})
            p.first = 375;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={B1,B2}, E7={A,B2} (Edge indel by adding edge E7={A,C})
            p.first = 388;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,B,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 398;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 400;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 306: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B}, E6={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B}, E6={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 185;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={A,C}, E6={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 191;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B}, E6={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 188;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={R,A})
			p.first = 224;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E6={B1,B2} (Edge indel by removing edge E5={A,B})
			p.first = 207;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B} (Edge indel by removing edge E6={B,C})
			p.first = 197;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,B})
            p.first = 364;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={A,C}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,C})
            p.first = 376;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1}, E6={B,C}, E7={A,B2} (Edge indel by adding edge E7={A,C})
            p.first = 389;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B}, E6={B,C}, E7={R,B,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 399;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B}, E6={B,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 400;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 307: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={A,C}
			// E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,C}, E6={A,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 192;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 187;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E3={R,B})
			p.first = 221;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={A,B}, E6={A,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 186;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E6={A,C} (Edge indel by removing edge E5={A,B})
			p.first = 208;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E6={A,C})
			p.first = 198;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 361;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={R,B2} (Edge indel by adding edge E7={R,C})
            p.first = 378;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 390;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 398;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 401;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 308: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={A,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 186;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={A,C}, E6={A,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 193;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B}, E6={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 188;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E4={R,B})
			p.first = 222;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={A,C} (Edge indel by removing edge E5={A,B})
			p.first = 209;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B} (Edge indel by removing edge E6={A,C})
			p.first = 199;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={A,C}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 362;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={A,B1}, E6={A,B2}, E7={R,B2} (Edge indel by adding edge E7={R,C})
            p.first = 379;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 391;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E5={A,B}, E6={B,C}, E7={R,A,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 399;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={A,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 401;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 309: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C}
			// E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 187;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 194;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E3={R,A})
			p.first = 225;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 188;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E6={B,C} (Edge indel by removing edge E5={A,B})
			p.first = 210;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E6={B,C})
			p.first = 200;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,B})
            p.first = 365;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,C} (Edge indel by adding edge E7={R,C})
            p.first = 380;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={A,C} (Edge indel by adding edge E7={A,C})
            p.first = 392;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A,C} (Edge indel by adding edge E7={R,A,C})
            p.first = 400;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={R,A,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 401;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 310: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={B,C}
			// E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 192;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B,C}, E5={B,C}, E6={A,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 190;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E3={R,B})
			p.first = 223;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={A,C}, E6={B,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 189;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E6={B,C} (Edge indel by removing edge E5={A,C})
			p.first = 201;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E6={B,C})
			p.first = 208;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={B,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A})
            p.first = 375;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,C})
            p.first = 366;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 390;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,B,C}, E3={R,A}, E4={A,B,C}, E5={B,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,B,C})
            p.first = 398;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={B,C}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 402;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 311: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,C}, E6={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,C}, E6={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 189;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 193;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={B,C}, E6={A,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 191;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={R,B})
			p.first = 224;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={B,C} (Edge indel by removing edge E5={A,C})
			p.first = 202;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,C} (Edge indel by removing edge E6={B,C})
			p.first = 209;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,C}, E6={B,C}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 376;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,C}, E5={A,B}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,C})
            p.first = 367;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,C}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 391;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={B,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,B,C})
            p.first = 399;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,C}, E6={B,C}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 402;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 312: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={B,C}
			// E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 190;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 194;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E3={R,A})
			p.first = 226;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,C}, E6={B,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 191;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E6={B,C} (Edge indel by removing edge E5={A,C})
			p.first = 210;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C} (Edge indel by removing edge E6={B,C})
			p.first = 203;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B}, E7={R,A2} (Edge indel by adding edge E7={R,B})
            p.first = 377;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={B,C}, E7={R,C} (Edge indel by adding edge E7={R,C})
            p.first = 369;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 392;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,A,C})
            p.first = 400;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,B,C}, E5={B,C}, E6={A,C}, E7={R,A,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 402;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 313: // E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}
			// E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 192;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={A,B,C}, E5={B,C}, E6={A,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 194;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E3={R,C})
			p.first = 225;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 193;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E6={A,C} (Edge indel by removing edge E5={A,B})
			p.first = 204;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by removing edge E6={A,C})
			p.first = 211;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 368;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A} (Edge indel by adding edge E7={R,B})
            p.first = 380;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B} (Edge indel by adding edge E7={B,C})
            p.first = 393;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,A,C})
            p.first = 401;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={B,C}, E7={R,A,B} (Edge indel by adding edge E7={R,B,C})
            p.first = 402;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 314: // E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={A,B}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 201;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E2={R,A,C})
			p.first = 198;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E3={R,B,C})
			p.first = 196;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E4={R,A})
			p.first = 227;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E6={A,B} (Edge indel by removing edge E5={A,B,C})
			p.first = 195;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2} (Edge indel by removing edge E6={A,B})
			p.first = 212;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={A1,A2,B}, E6={A1,A2}, E7={R,A2} (Edge indel by adding edge E7={R,B})
            p.first = 370;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={R,B} (Edge indel by adding edge E7={R,C})
            p.first = 381;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by adding edge E7={A,C})
            p.first = 394;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 398;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={R,A,B,C} (Edge indel by adding edge E7={R,A,B,C})
            p.first = 403;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 315: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 195;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,B}, E6={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 202;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={A,B} (Edge indel by removing edge E3={R,A,C})
			p.first = 199;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,A}, E6={A,B} (Edge indel by removing edge E4={R,B,C})
			p.first = 197;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E6={A1,A2} (Edge indel by removing edge E5={R,A})
			p.first = 228;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A} (Edge indel by removing edge E6={A,B})
			p.first = 213;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={A1,A2}, E7={R,A2} (Edge indel by adding edge E7={R,B})
            p.first = 371;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E6={A,C}, E7={R,B} (Edge indel by adding edge E7={R,C})
            p.first = 382;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1}, E7={A,B2} (Edge indel by adding edge E7={A,C})
            p.first = 395;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 399;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B}, E7={A,B,C} (Edge indel by adding edge E7={A,B,C})
            p.first = 403;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 316: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 196;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 203;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E3={R,A,C})
			p.first = 200;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E4={R,A})
			p.first = 229;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E6={A,B} (Edge indel by removing edge E5={A,B,C})
			p.first = 197;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2} (Edge indel by removing edge E6={A,B})
			p.first = 214;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={R,B} (Edge indel by adding edge E7={R,B})
            p.first = 372;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,C}, E7={R,B} (Edge indel by adding edge E7={R,C})
            p.first = 383;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by adding edge E7={A,C})
            p.first = 396;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 400;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={R,B,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 403;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 317: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 198;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 204;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E3={R,A,C})
			p.first = 200;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E4={R,B})
			p.first = 229;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={A,B} (Edge indel by removing edge E5={A,B,C})
			p.first = 199;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C} (Edge indel by removing edge E6={A,B})
			p.first = 215;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 372;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={R,C} (Edge indel by adding edge E7={R,C})
            p.first = 385;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by adding edge E7={A,C})
            p.first = 401;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 397;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={R,A,C} (Edge indel by adding edge E7={R,B,C})
            p.first = 403;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 318: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 201;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 204;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 203;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1,B2}, E6={B1,B2} (Edge indel by removing edge E4={R,B})
			p.first = 230;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 202;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C} (Edge indel by removing edge E6={B,C})
			p.first = 215;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={B,C}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 384;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={A,B1,B2}, E6={B1,B2}, E7={R,B2} (Edge indel by adding edge E7={R,C})
            p.first = 373;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 397;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={B,C}, E7={A,C} (Edge indel by adding edge E7={A,C})
            p.first = 402;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={R,A,B} (Edge indel by adding edge E7={R,B,C})
            p.first = 403;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 319: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E6={B1,B2}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E1={R,A,B1})
			p.first = 208;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 208;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={B1,B2} (Edge indel by removing edge E3={R,B1,B2})
			p.first = 206;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,A1,A2}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E4={R,A})
			p.first = 227;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e3, e1, e2, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E6={B1,B2} (Edge indel by removing edge E5={A,B1,B2})
			p.first = 205;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2} (Edge indel by removing edge E6={B1,B2})
			p.first = 212;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={R,A} (Edge indel by adding edge E7={R,B1})
            p.first = 381;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={R,A} (Edge indel by adding edge E7={R,B2})
            p.first = 381;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e1, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B1})
            p.first = 398;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B2})
            p.first = 398;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E6={B1,B2}, E7={R,A,B1,B2} (Edge indel by adding edge E7={R,A,B1,B2})
            p.first = 404;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 320: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 205;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,A}, E6={A,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 209;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,A}, E6={A,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 209;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,A}, E6={B1,B2} (Edge indel by removing edge E4={R,B1,B2})
			p.first = 207;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1,A2}, E6={A1,A2} (Edge indel by removing edge E5={R,A})
			p.first = 228;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e4, e2, e3, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A} (Edge indel by removing edge E6={B1,B2})
			p.first = 213;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E5={R,B}, E6={A,C}, E7={R,A} (Edge indel by adding edge E7={R,B1})
            p.first = 382;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,B}, E6={A,C}, E7={R,A} (Edge indel by adding edge E7={R,B2})
            p.first = 382;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e2, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={R,A,B1,B2})
            p.first = 399;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={R,A,B1,B2})
            p.first = 399;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={B1,B2}, E7={A,B1,B2} (Edge indel by adding edge E7={A,B1,B2})
            p.first = 404;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 321: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 206;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 210;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 210;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1,B2}, E6={B1,B2} (Edge indel by removing edge E4={R,A})
			p.first = 230;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E6={B1,B2} (Edge indel by removing edge E5={A,B1,B2})
			p.first = 207;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2} (Edge indel by removing edge E6={B1,B2})
			p.first = 214;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,B1})
            p.first = 384;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={A,B,C}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,B2})
            p.first = 384;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B1})
            p.first = 400;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={A,B,C}, E6={B,C}, E7={A,B} (Edge indel by adding edge E7={A,B2})
            p.first = 400;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={B1,B2}, E7={R,B1,B2} (Edge indel by adding edge E7={R,B1,B2})
            p.first = 404;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 322: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 208;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E2={R,A,B})
			p.first = 211;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 210;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E4={R,B})
			p.first = 229;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={A,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 209;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C} (Edge indel by removing edge E6={A,C})
			p.first = 215;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 383;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={R,B} (Edge indel by adding edge E7={R,C})
            p.first = 385;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={A,B} (Edge indel by adding edge E7={A,B})
            p.first = 401;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={B,C} (Edge indel by adding edge E7={B,C})
            p.first = 402;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E6={B1,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,B,C})
            p.first = 404;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 323: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 212;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,A}, E6={A,B,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 215;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,A}, E6={A,B,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 215;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,A}, E6={A,B1,B2} (Edge indel by removing edge E4={R,B1,B2})
			p.first = 214;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E6={A1,A2,A3} (Edge indel by removing edge E5={R,A})
			p.first = 231;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A} (Edge indel by removing edge E6={A,B1,B2})
			p.first = 213;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={A1,A2,B}, E7={R,A2} (Edge indel by adding edge E7={R,B1})
            p.first = 386;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={R,A1}, E6={A1,A2,B}, E7={R,A2} (Edge indel by adding edge E7={R,B2})
            p.first = 386;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E7={A,B} (Edge indel by adding edge E7={A,B1})
            p.first = 403;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E7={A,B} (Edge indel by adding edge E7={A,B2})
            p.first = 403;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2}, E7={B1,B2} (Edge indel by adding edge E7={B1,B2})
            p.first = 404;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 324: // E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={A1,A2}, E5={A1,A3}, E6={A2,A3}
			// E2={R,A,B1}, E3={R,A,B2}, E4={B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 216;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e5, e6, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E3={R,A,B2}, E4={A,B1}, E5={B1,B2}, E6={A,B2} (Edge indel by removing edge E2={R,A1,A3})
			p.first = 216;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2} (Edge indel by removing edge E3={R,A2,A3})
			p.first = 216;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E4={A1,A2})
			p.first = 220;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e1, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E4={A,B1}, E6={A,B2} (Edge indel by removing edge E5={A1,A3})
			p.first = 220;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E6={A2,A3})
			p.first = 220;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2}, E7={R,A} (Edge indel by adding edge E7={R,A1})
            p.first = 387;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E4={A,B1}, E5={B1,B2}, E6={A,B2}, E7={R,A} (Edge indel by adding edge E7={R,A2})
            p.first = 387;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={B1,B2}, E5={A,B1}, E6={A,B2}, E7={R,A} (Edge indel by adding edge E7={R,A3})
            p.first = 387;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e1, EDGES_ALPHABET[i], e5, e6, e4, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={A1,A2}, E5={A1,A3}, E6={A2,A3}, E7={A1,A2,A3} (Edge indel by adding edge E7={A1,A2,A3})
            p.first = 405;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={A1,A2}, E5={A1,A3}, E6={A2,A3}, E7={R,A1,A2,A3} (Edge indel by adding edge E7={R,A1,A2,A3})
            p.first = 406;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 325: // E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2}
			// E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,B}, E5={A1,A2}, E6={A2,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 217;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={A1,A2,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E2={R,A,B2})
			p.first = 217;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2} (Edge indel by removing edge E3={A,B1,B2})
			p.first = 216;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={A,B1})
			p.first = 223;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={A,B}, E6={B,C} (Edge indel by removing edge E5={A,B2})
			p.first = 223;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E6={B1,B2})
			p.first = 221;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 388;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,B1})
            p.first = 390;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={A,B,C}, E4={A,C}, E5={A,B}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,B2})
            p.first = 390;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, EDGES_ALPHABET[i], e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={A1,A2,A3}, E4={A1,A2}, E5={A1,A3}, E6={A2,A3}, E7={R,A2,A3} (Edge indel by adding edge E7={R,B1,B2})
            p.first = 405;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2}, E7={R,A,B1,B2} (Edge indel by adding edge E7={R,A,B1,B2})
            p.first = 407;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 326: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 216;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1,A2}, E4={A1,B}, E5={A1,A2}, E6={A2,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 218;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E3={R,A,B2})
			p.first = 218;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={A,B1})
			p.first = 224;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B}, E6={B,C} (Edge indel by removing edge E5={A,B2})
			p.first = 224;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1}, E5={A,B2} (Edge indel by removing edge E6={B1,B2})
			p.first = 222;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 389;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B}, E5={A,C}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,B1})
            p.first = 391;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={A,C}, E5={A,B}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,B2})
            p.first = 391;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], e5, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={A1,A2}, E5={A1,A3}, E6={A2,A3}, E7={R,A2,A3} (Edge indel by adding edge E7={R,B1,B2})
            p.first = 406;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2}, E7={A,B1,B2} (Edge indel by adding edge E7={A,B1,B2})
            p.first = 407;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 327: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B}
			// E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 217;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E3={A1,A2,A3}, E4={A1,A2}, E5={A1,A3}, E6={A2,A3} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 219;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E3={A1,A2,B})
			p.first = 218;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B}, E5={A1,B}, E6={A2,B} (Edge indel by removing edge E4={A1,A2})
			p.first = 226;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,B}, E6={A,C} (Edge indel by removing edge E5={A1,B})
			p.first = 225;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,B}, E5={A,C} (Edge indel by removing edge E6={A2,B})
			p.first = 225;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,B}, E5={A,C}, E6={B,C}, E7={R,A} (Edge indel by adding edge E7={R,A1})
            p.first = 392;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={A,B,C}, E4={A,B}, E5={B,C}, E6={A,C}, E7={R,A} (Edge indel by adding edge E7={R,A2})
            p.first = 392;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={A1,A2,B}, E4={A1,A2}, E5={A1,B}, E6={A2,B}, E7={R,B} (Edge indel by adding edge E7={R,B})
            p.first = 393;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={A,B1,B2}, E4={A,B1}, E5={A,B2}, E6={B1,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,A1,B})
            p.first = 407;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={A,B1,B2}, E4={A,B1}, E5={B1,B2}, E6={A,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,A2,B})
            p.first = 407;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 328: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}
			// E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={B,C}, E6={A,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 223;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 223;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E3={R,B1,B2})
			p.first = 221;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E4={A,B1,B2})
			p.first = 220;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E5={A,B1})
			p.first = 227;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={A1,A2,B}, E5={A1,A2} (Edge indel by removing edge E6={A,B2})
			p.first = 227;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 394;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A} (Edge indel by adding edge E7={R,B1})
            p.first = 398;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={B,C}, E6={A,B}, E7={R,A} (Edge indel by adding edge E7={R,B2})
            p.first = 398;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e1, EDGES_ALPHABET[i], e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={A1,A2,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3} (Edge indel by adding edge E7={B1,B2})
            p.first = 405;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={R,A,B1,B2} (Edge indel by adding edge E7={R,A,B1,B2})
            p.first = 408;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 329: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={A,B1}, E6={A,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 220;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={B,C}, E6={A,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 224;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 224;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E4={R,B1,B2})
			p.first = 222;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E6={A1,A2} (Edge indel by removing edge E5={A,B1})
			p.first = 228;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={A1,A2} (Edge indel by removing edge E6={A,B2})
			p.first = 228;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={A,B1}, E6={A,B2}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 395;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E5={A,B}, E6={B,C}, E7={R,A} (Edge indel by adding edge E7={R,B1})
            p.first = 399;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,B,C}, E3={R,A,B}, E4={R,A,C}, E5={B,C}, E6={A,B}, E7={R,A} (Edge indel by adding edge E7={R,B2})
            p.first = 399;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e2, EDGES_ALPHABET[i], e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3} (Edge indel by adding edge E7={B1,B2})
            p.first = 406;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={A,B1}, E6={A,B2}, E7={A,B1,B2} (Edge indel by adding edge E7={A,B1,B2})
            p.first = 408;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 330: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 221;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={A,B,C}, E5={A,C}, E6={A,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 225;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 225;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E4={A,B1,B2})
			p.first = 222;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={A,B,C}, E6={A,B} (Edge indel by removing edge E5={A,B1})
			p.first = 229;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E6={A,B2})
			p.first = 229;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 396;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={R,B} (Edge indel by adding edge E7={R,B1})
            p.first = 401;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={A,B,C}, E5={A,C}, E6={A,B}, E7={R,B} (Edge indel by adding edge E7={R,B2})
            p.first = 401;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e6, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2} (Edge indel by adding edge E7={B1,B2})
            p.first = 407;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={R,B1,B2} (Edge indel by adding edge E7={R,B1,B2})
            p.first = 408;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 331: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B}, E6={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 223;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 226;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 225;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 224;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E6={B1,B2} (Edge indel by removing edge E5={A,B})
			p.first = 230;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B} (Edge indel by removing edge E6={B,C})
			p.first = 229;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,A} (Edge indel by adding edge E7={R,A})
            p.first = 400;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,B})
            p.first = 397;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={A,B,C}, E5={A,C}, E6={B,C}, E7={R,B} (Edge indel by adding edge E7={R,C})
            p.first = 402;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={B1,B2}, E7={A,B2} (Edge indel by adding edge E7={A,C})
            p.first = 407;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={R,A,B2} (Edge indel by adding edge E7={R,B,C})
            p.first = 408;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 332: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={A1,A2,B}, E6={A1,A2}
			// E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 227;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={A,B1,B2}, E6={B1,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 230;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E3={R,A1,B})
			p.first = 229;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E4={R,A2,B})
			p.first = 229;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E6={A1,A2} (Edge indel by removing edge E5={A1,A2,B})
			p.first = 228;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={A1,A2,A3} (Edge indel by removing edge E6={A1,A2})
			p.first = 231;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={A,B,C}, E6={A,B}, E7={R,A} (Edge indel by adding edge E7={R,A1})
            p.first = 403;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E5={A,B,C}, E6={A,B}, E7={R,A} (Edge indel by adding edge E7={R,A2})
            p.first = 403;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={A,B1,B2}, E6={B1,B2}, E7={R,A} (Edge indel by adding edge E7={R,B})
            p.first = 404;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e2, EDGES_ALPHABET[i], e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by adding edge E7={A1,B})
            p.first = 408;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by adding edge E7={A2,B})
            p.first = 408;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 333: // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B}
			// E2={R,A1}, E3={R,A2}, E4={R,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 232;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={B,C}, E7={A,C} (Edge indel by removing edge E2={R,A1})
			p.first = 249;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={R,C}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E3={R,A2})
			p.first = 249;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E5={A1,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E4={R,B})
			p.first = 248;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E5={A1,A2})
			p.first = 234;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E5={A,B}, E7={A,C} (Edge indel by removing edge E6={A1,B})
			p.first = 233;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E7={A2,B})
			p.first = 233;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2}, E8={R,A,B2} (Edge indel by adding edge E8={R,A1,B})
            p.first = 409;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,B1}, E3={R,A}, E4={R,B2}, E5={A,B1}, E6={B1,B2}, E7={A,B2}, E8={R,A,B2} (Edge indel by adding edge E8={R,A2,B})
            p.first = 409;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B}, E8={A1,A2,B} (Edge indel by adding edge E8={A1,A2,B})
            p.first = 410;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B}, E8={R,A1,A2,B} (Edge indel by adding edge E8={R,A1,A2,B})
            p.first = 411;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 334: // E1={R,A1}, E2={R,A2}, E3={R,A3}, E4={A1,A2,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3}
			// E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B}, E7={A1,A2} (Edge indel by removing edge E1={R,A1})
			p.first = 250;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e2, e3, e4, e7, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A1,A2}, E7={A2,B} (Edge indel by removing edge E2={R,A2})
			p.first = 250;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1}, E2={R,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E3={R,A3})
			p.first = 250;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1}, E2={R,A2}, E3={R,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3} (Edge indel by removing edge E4={A1,A2,A3})
			p.first = 232;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,B1}, E2={R,B2}, E3={R,A}, E4={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E5={A1,A2})
			p.first = 235;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e3, e1, e2, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,B1}, E2={R,A}, E3={R,B2}, E4={A,B1,B2}, E5={A,B1}, E7={A,B2} (Edge indel by removing edge E6={A1,A3})
			p.first = 235;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e1, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A}, E2={R,B1}, E3={R,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E7={A2,A3})
			p.first = 235;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1}, E2={R,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B}, E8={R,A1,A2} (Edge indel by adding edge E8={R,A1,A2})
            p.first = 410;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={R,B}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A1,A2}, E7={A2,B}, E8={R,A1,A2} (Edge indel by adding edge E8={R,A1,A3})
            p.first = 410;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e3, e2, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A2,B}, E7={A1,A2}, E8={R,A1,A2} (Edge indel by adding edge E8={R,A2,A3})
            p.first = 410;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e2, e3, e1, e4, e7, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1}, E2={R,A2}, E3={R,A3}, E4={A1,A2,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3}, E8={R,A1,A2,A3} (Edge indel by adding edge E8={R,A1,A2,A3})
            p.first = 412;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 335: // E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={R,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3}
			// E2={R,A1}, E3={R,A2}, E4={R,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3} (Edge indel by removing edge E1={R,A1,A2,A3})
			p.first = 232;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,B}, E6={A1,B}, E7={A1,A2} (Edge indel by removing edge E2={R,A1})
			p.first = 251;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e3, e4, e7, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E4={R,A2}, E5={A1,B}, E6={A1,A2}, E7={A2,B} (Edge indel by removing edge E3={R,A2})
			p.first = 251;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E5={A1,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E4={R,A3})
			p.first = 251;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,B1}, E3={R,B2}, E4={R,A}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E5={A1,A2})
			p.first = 236;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e4, e2, e3, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,B1}, E3={R,A}, E4={R,B2}, E5={A,B1}, E7={A,B2} (Edge indel by removing edge E6={A1,A3})
			p.first = 236;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E7={A2,A3})
			p.first = 236;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B}, E8={R,A1,A2} (Edge indel by adding edge E8={R,A1,A2})
            p.first = 411;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,B}, E4={R,A2}, E5={A1,B}, E6={A1,A2}, E7={A2,B}, E8={R,A1,A2} (Edge indel by adding edge E8={R,A1,A3})
            p.first = 411;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,B}, E3={R,A1}, E4={R,A2}, E5={A1,B}, E6={A2,B}, E7={A1,A2}, E8={R,A1,A2} (Edge indel by adding edge E8={R,A2,A3})
            p.first = 411;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e4, e2, e7, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={R,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3}, E8={A1,A2,A3} (Edge indel by adding edge E8={A1,A2,A3})
            p.first = 412;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 336: // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}
			// E2={R,A,B}, E3={R,B}, E4={R,C}, E5={R,A}, E6={B,C}, E7={A,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 233;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e5, e3, e4, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 233;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e4, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E3={R,A})
			p.first = 266;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E5={R,B}, E6={A,C}, E7={A,B} (Edge indel by removing edge E4={R,B1})
			p.first = 252;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={A,B}, E7={A,C} (Edge indel by removing edge E5={R,B2})
			p.first = 252;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={R,B}, E7={A,B} (Edge indel by removing edge E6={A,B1})
			p.first = 237;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e4, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B} (Edge indel by removing edge E7={A,B2})
			p.first = 237;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by adding edge E8={B1,B2})
            p.first = 409;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={R,B1,B2} (Edge indel by adding edge E8={R,B1,B2})
            p.first = 413;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={A,B1,B2} (Edge indel by adding edge E8={A,B1,B2})
            p.first = 414;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={R,A,B1,B2} (Edge indel by adding edge E8={R,A,B1,B2})
            p.first = 415;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 337: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B}, E7={B,C}
			// E2={R,A1,A2}, E3={R,A1}, E4={R,B}, E5={R,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 234;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e5, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 233;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E3={R,A})
			p.first = 256;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E5={R,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E4={R,B})
			p.first = 269;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={R,C})
			p.first = 253;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E7={B1,B2} (Edge indel by removing edge E6={A,B})
			p.first = 240;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B} (Edge indel by removing edge E7={B,C})
			p.first = 237;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={B1,B2}, E8={A,B2} (Edge indel by adding edge E8={A,C})
            p.first = 409;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,B1}, E4={R,A}, E5={R,B1}, E6={A,B1}, E7={A,B2}, E8={R,A,B2} (Edge indel by adding edge E8={R,B,C})
            p.first = 413;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B}, E7={B,C}, E8={A,B,C} (Edge indel by adding edge E8={A,B,C})
            p.first = 416;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B}, E7={B,C}, E8={R,A,B,C} (Edge indel by adding edge E8={R,A,B,C})
            p.first = 417;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 338: // E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C}
			// E2={R,A}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E1={R,A,B})
			p.first = 235;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E2={R,A})
			p.first = 273;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E3={R,B})
			p.first = 257;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E4={R,C})
			p.first = 254;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 233;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={A,B,C}, E7={A,C} (Edge indel by removing edge E6={A,B})
			p.first = 241;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E7={A,C})
			p.first = 238;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B} (Edge indel by adding edge E8={B,C})
            p.first = 410;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={R,A,B2} (Edge indel by adding edge E8={R,A,C})
            p.first = 414;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,A,C} (Edge indel by adding edge E8={R,B,C})
            p.first = 416;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,A,B,C} (Edge indel by adding edge E8={R,A,B,C})
            p.first = 418;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, EDGES_ALPHABET[i], e1, e3, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 339: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B}, E7={A,C}
			// E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 233;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e4, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E2={R,A,B})
			p.first = 236;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E3={R,A})
			p.first = 274;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={R,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E4={R,B})
			p.first = 258;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={R,C})
			p.first = 255;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E7={A,C} (Edge indel by removing edge E6={A,B})
			p.first = 242;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2} (Edge indel by removing edge E7={A,C})
			p.first = 239;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B} (Edge indel by adding edge E8={B,C})
            p.first = 411;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={R,A,B2} (Edge indel by adding edge E8={R,A,C})
            p.first = 415;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={A,B}, E7={B,C}, E8={R,A,C} (Edge indel by adding edge E8={R,B,C})
            p.first = 417;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={A,B}, E7={B,C}, E8={A,B,C} (Edge indel by adding edge E8={A,B,C})
            p.first = 418;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 340: // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B}
			// E2={R,B1}, E3={R,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 235;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e4, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={B,C}, E7={A,C} (Edge indel by removing edge E2={R,A1})
			p.first = 259;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C}, E7={B,C} (Edge indel by removing edge E3={R,A2})
			p.first = 259;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E4={R,B})
			p.first = 270;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E5={A1,A2,B})
			p.first = 234;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E7={A,C} (Edge indel by removing edge E6={A1,B})
			p.first = 241;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E7={A2,B})
			p.first = 241;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B}, E8={A1,A2} (Edge indel by adding edge E8={A1,A2})
            p.first = 410;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A}, E3={R,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,A,B} (Edge indel by adding edge E8={R,A1,B})
            p.first = 416;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e4, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={B,C}, E7={A,B}, E8={R,A,B} (Edge indel by adding edge E8={R,A2,B})
            p.first = 416;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e3, e4, e2, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B}, E8={R,A1,A2,B} (Edge indel by adding edge E8={R,A1,A2,B})
            p.first = 419;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 341: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,B}, E7={A2,B}
			// E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 234;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,B1}, E4={R,B2}, E5={R,A}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 236;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e5, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={B,C}, E7={A,C} (Edge indel by removing edge E3={R,A1})
			p.first = 260;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={R,C}, E6={A,C}, E7={B,C} (Edge indel by removing edge E4={R,A2})
			p.first = 260;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E5={R,B})
			p.first = 271;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E7={A,C} (Edge indel by removing edge E6={A1,B})
			p.first = 242;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,C} (Edge indel by removing edge E7={A2,B})
			p.first = 242;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,B}, E7={A2,B}, E8={A1,A2} (Edge indel by adding edge E8={A1,A2})
            p.first = 411;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={R,C}, E5={R,B}, E6={A,B}, E7={B,C}, E8={R,A,B} (Edge indel by adding edge E8={R,A1,B})
            p.first = 417;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,C}, E4={R,A}, E5={R,B}, E6={B,C}, E7={A,B}, E8={R,A,B} (Edge indel by adding edge E8={R,A2,B})
            p.first = 417;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e4, e5, e3, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,B}, E7={A2,B}, E8={A1,A2,B} (Edge indel by adding edge E8={A1,A2,B})
            p.first = 419;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 342: // E1={R,A,B1,B2}, E2={R,A}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}
			// E2={R,A}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 235;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E2={R,A})
			p.first = 275;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,B}, E4={R,A}, E5={A,B,C}, E6={B,C}, E7={A,B} (Edge indel by removing edge E3={R,B2})
			p.first = 261;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e4, e2, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,B}, E3={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E4={R,B2})
			p.first = 261;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A}, E3={R,B1}, E4={R,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E5={A,B1,B2})
			p.first = 236;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,B}, E4={R,A2}, E5={A1,A2,B}, E7={A1,A2} (Edge indel by removing edge E6={A,B1})
			p.first = 243;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e4, e3, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E7={A,B2})
			p.first = 243;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={R,A3}, E5={A1,A2,A3}, E6={A1,A2}, E7={A1,A3}, E8={A2,A3} (Edge indel by adding edge E8={B1,B2})
            p.first = 412;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,A,B} (Edge indel by adding edge E8={R,A,B1})
            p.first = 418;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,B}, E3={R,C}, E4={R,A}, E5={A,B,C}, E6={B,C}, E7={A,B}, E8={R,A,B} (Edge indel by adding edge E8={R,A,B2})
            p.first = 418;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, EDGES_ALPHABET[i], e4, e2, e3, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B}, E8={R,A1,A2} (Edge indel by adding edge E8={R,B1,B2})
            p.first = 419;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e4, e2, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 343: // E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={R,B}, E7={A1,A2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={R,A}, E7={B1,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 240;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e6, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={R,C}, E7={A,B} (Edge indel by removing edge E2={R,A1,B})
			p.first = 237;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B} (Edge indel by removing edge E3={R,A2,B})
			p.first = 237;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,B,C}, E3={R,A,B}, E5={R,A}, E6={R,B}, E7={A,C} (Edge indel by removing edge E4={R,A1})
			p.first = 276;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e3, e1, e2, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E6={R,B}, E7={A,C} (Edge indel by removing edge E5={R,A2})
			p.first = 276;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E7={A1,A2} (Edge indel by removing edge E6={R,B})
			p.first = 262;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3} (Edge indel by removing edge E7={A1,A2})
			p.first = 244;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2} (Edge indel by adding edge E8={A1,B})
            p.first = 413;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E4={R,B1}, E5={R,A}, E6={R,B2}, E7={A,B1}, E8={A,B2} (Edge indel by adding edge E8={A2,B})
            p.first = 413;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e4, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={R,B}, E7={A1,A2}, E8={A1,A2,B} (Edge indel by adding edge E8={A1,A2,B})
            p.first = 420;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={R,B}, E7={A1,A2}, E8={R,A1,A2,B} (Edge indel by adding edge E8={R,A1,A2,B})
            p.first = 421;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 344: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={R,B}, E6={A,B,C}, E7={A,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 241;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e5, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E7={A1,A2} (Edge indel by removing edge E2={R,A,C})
			p.first = 238;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E3={R,A})
			p.first = 282;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C} (Edge indel by removing edge E4={R,B})
			p.first = 277;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E5={R,C})
			p.first = 263;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E7={A,B} (Edge indel by removing edge E6={A,B,C})
			p.first = 237;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2} (Edge indel by removing edge E7={A,B})
			p.first = 245;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by adding edge E8={A,C})
            p.first = 414;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by adding edge E8={B,C})
            p.first = 416;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E7={A1,A2}, E8={R,A2,B} (Edge indel by adding edge E8={A,B,C})
            p.first = 420;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={R,A,B,C} (Edge indel by adding edge E8={R,A,B,C})
            p.first = 422;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 345: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 237;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={R,B}, E7={A,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 242;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,A1}, E5={R,A2}, E6={R,B}, E7={A1,A2} (Edge indel by removing edge E3={R,A,C})
			p.first = 239;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={R,C}, E7={A,B} (Edge indel by removing edge E4={R,A})
			p.first = 283;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E6={R,B}, E7={A,C} (Edge indel by removing edge E5={R,B})
			p.first = 278;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={A,B} (Edge indel by removing edge E6={R,C})
			p.first = 264;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2} (Edge indel by removing edge E7={A,B})
			p.first = 246;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2} (Edge indel by adding edge E8={A,C})
            p.first = 415;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B}, E8={B,C} (Edge indel by adding edge E8={B,C})
            p.first = 417;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A1}, E5={R,A2}, E6={R,B}, E7={A1,A2}, E8={R,A2,B} (Edge indel by adding edge E8={R,B,C})
            p.first = 421;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B}, E8={R,A,B,C} (Edge indel by adding edge E8={R,A,B,C})
            p.first = 422;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 346: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E7={A1,A2}
			// E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E7={A1,A2} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 238;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E7={A1,A2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 243;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E3={R,A1})
			p.first = 284;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E4={R,A2})
			p.first = 284;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E6={A1,A2,B}, E7={A1,A2} (Edge indel by removing edge E5={R,B})
			p.first = 265;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E7={A1,A2} (Edge indel by removing edge E6={A1,A2,B})
			p.first = 239;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B} (Edge indel by removing edge E7={A1,A2})
			p.first = 247;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by adding edge E8={A1,B})
            p.first = 418;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by adding edge E8={A2,B})
            p.first = 418;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={R,A,C} (Edge indel by adding edge E8={R,A1,B})
            p.first = 422;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={R,A,C} (Edge indel by adding edge E8={R,A1,B})
            p.first = 422;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 347: // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={B1,B2}
			// E2={R,A,B}, E3={R,B}, E4={R,C}, E5={R,A}, E6={A,B,C}, E7={A,C} (Edge indel by removing edge E1={R,A,B1})
			p.first = 241;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e5, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 241;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e4, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={B1,B2} (Edge indel by removing edge E3={R,A})
			p.first = 266;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E5={R,B}, E6={A,B,C}, E7={B,C} (Edge indel by removing edge E4={R,B1})
			p.first = 279;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={A,B,C}, E7={B,C} (Edge indel by removing edge E5={R,B2})
			p.first = 279;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E7={B1,B2} (Edge indel by removing edge E6={A,B1,B2})
			p.first = 240;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2} (Edge indel by removing edge E7={B1,B2})
			p.first = 245;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={B,C}, E8={A,B} (Edge indel by adding edge E8={A,B1})
            p.first = 416;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={R,B}, E6={A,B,C}, E7={B,C}, E8={A,B} (Edge indel by adding edge E8={A,B2})
            p.first = 416;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e4, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,A2}, E8={R,A1,A2} (Edge indel by adding edge E8={R,B1,B2})
            p.first = 420;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e4, e5, e3, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={B1,B2}, E8={R,A,B1,B2} (Edge indel by adding edge E8={R,A,B1,B2})
            p.first = 423;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 348: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 240;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,B}, E5={R,C}, E6={R,A}, E7={A,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 242;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e6, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,B}, E5={R,A}, E6={R,C}, E7={A,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 242;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e5, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={B1,B2} (Edge indel by removing edge E4={R,A})
			p.first = 267;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E6={R,B}, E7={B,C} (Edge indel by removing edge E5={R,B1})
			p.first = 280;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={B,C} (Edge indel by removing edge E6={R,B2})
			p.first = 280;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2} (Edge indel by removing edge E7={B1,B2})
			p.first = 246;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={B,C}, E8={A,B} (Edge indel by adding edge E8={A,B1})
            p.first = 417;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={R,B}, E7={B,C}, E8={A,B} (Edge indel by adding edge E8={A,B2})
            p.first = 417;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e5, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2}, E8={R,A1,A2} (Edge indel by adding edge E8={R,B1,B2})
            p.first = 421;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e6, e4, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={B1,B2}, E8={A,B1,B2} (Edge indel by adding edge E8={A,B1,B2})
            p.first = 423;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 349: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={B,C}
			// E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 241;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e4, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,A2} (Edge indel by removing edge E2={R,A,B})
			p.first = 243;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e4, e5, e3, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 268;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={R,C}, E6={A,B,C}, E7={B,C} (Edge indel by removing edge E4={R,B})
			p.first = 285;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E6={A,B,C}, E7={B,C} (Edge indel by removing edge E5={R,C})
			p.first = 281;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E7={A,C} (Edge indel by removing edge E6={A,B,C})
			p.first = 242;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B} (Edge indel by removing edge E7={B,C})
			p.first = 247;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={B,C}, E8={A,B} (Edge indel by adding edge E8={A,B})
            p.first = 418;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E7={A2,B}, E8={A1,B} (Edge indel by adding edge E8={R,A,B,C})
            p.first = 419;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={B1,B2}, E8={R,A,B2} (Edge indel by adding edge E8={R,A,C})
            p.first = 423;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={R,A,B} (Edge indel by adding edge E8={R,B,C})
            p.first = 422;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e4, e5, e3, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 350: // E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={A1,A2,A3}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={R,A}, E7={A,B1,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 245;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e6, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,A}, E6={R,B2}, E7={A,B1,B2} (Edge indel by removing edge E2={R,A1,A3})
			p.first = 245;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2} (Edge indel by removing edge E3={R,A2,A3})
			p.first = 245;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,A1,A2}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B} (Edge indel by removing edge E4={R,A1})
			p.first = 286;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e3, e1, e2, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={R,A1}, E6={R,A2}, E7={A1,A2,B} (Edge indel by removing edge E5={R,A2})
			p.first = 286;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E7={A1,A2,B} (Edge indel by removing edge E6={R,A3})
			p.first = 286;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3} (Edge indel by removing edge E7={A1,A2,A3})
			p.first = 244;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={R,B}, E7={A1,A2,B}, E8={A1,A2} (Edge indel by adding edge E8={A1,A2})
            p.first = 420;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={R,A1}, E5={R,B}, E6={R,A2}, E7={A1,A2,B}, E8={A1,A2} (Edge indel by adding edge E8={A1,A3})
            p.first = 420;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, e5, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,A1,A2}, E4={R,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,A2} (Edge indel by adding edge E8={A2,A3})
            p.first = 420;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e3, e1, e2, e5, e6, e4, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={A1,A2,A3}, E8={R,A1,A2,A3} (Edge indel by adding edge E8={R,A1,A2,A3})
            p.first = 424;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 351: // E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3}
			// E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3} (Edge indel by removing edge E1={R,A1,A2,A3})
			p.first = 244;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={R,A} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 246;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e7, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,A}, E7={R,B2} (Edge indel by removing edge E3={R,A1,A3})
			p.first = 246;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,A}, E6={R,B1}, E7={R,B2} (Edge indel by removing edge E4={R,A2,A3})
			p.first = 246;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1,A2}, E6={R,A1}, E7={R,A2} (Edge indel by removing edge E5={R,A1})
			p.first = 287;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e4, e2, e3, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={R,A1}, E7={R,A2} (Edge indel by removing edge E6={R,A2})
			p.first = 287;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2} (Edge indel by removing edge E7={R,A3})
			p.first = 287;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={R,B}, E8={A1,A2} (Edge indel by adding edge E8={A1,A2})
            p.first = 421;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={R,A1}, E6={R,B}, E7={R,A2}, E8={A1,A2} (Edge indel by adding edge E8={A1,A3})
            p.first = 421;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, e6, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1,A2}, E5={R,B}, E6={R,A1}, E7={R,A2}, E8={A1,A2} (Edge indel by adding edge E8={A2,A3})
            p.first = 421;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e4, e2, e3, e6, e7, e5, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3}, E8={A1,A2,A3} (Edge indel by adding edge E8={A1,A2,A3})
            p.first = 424;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 352: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 245;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1,A2}, E4={R,A1}, E5={R,B}, E6={R,A2}, E7={A1,A2,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 247;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,A1}, E5={R,A2}, E6={R,B}, E7={A1,A2,B} (Edge indel by removing edge E3={R,A,B2})
			p.first = 247;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2} (Edge indel by removing edge E4={R,A})
			p.first = 289;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E6={R,B}, E7={A,B,C} (Edge indel by removing edge E5={R,B1})
			p.first = 288;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={A,B,C} (Edge indel by removing edge E6={R,B2})
			p.first = 288;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2} (Edge indel by removing edge E7={A,B1,B2})
			p.first = 246;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={A,B} (Edge indel by adding edge E8={A,B1})
            p.first = 422;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={R,B}, E7={A,B,C}, E8={A,B} (Edge indel by adding edge E8={A,B2})
            p.first = 422;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e5, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={B1,B2}, E8={B1,B2} (Edge indel by adding edge E8={B1,B2})
            p.first = 423;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={A1,A2,A3}, E8={R,A2,A3} (Edge indel by adding edge E8={R,B1,B2})
            p.first = 424;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 353: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={A,C}, E7={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 249;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E2={R,A,C})
			p.first = 248;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E3={R,A})
			p.first = 291;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E5={A,B1}, E6={A,B2}, E7={B1,B2} (Edge indel by removing edge E4={R,B})
			p.first = 290;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E5={A,B})
			p.first = 269;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E7={B,C} (Edge indel by removing edge E6={A,C})
			p.first = 253;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={A,C} (Edge indel by removing edge E7={B,C})
			p.first = 252;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={A,B1}, E6={A,B2}, E7={B1,B2}, E8={R,B2} (Edge indel by adding edge E8={R,C})
            p.first = 409;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2}, E6={A1,B}, E7={A2,B}, E8={R,A2,B} (Edge indel by adding edge E8={R,B,C})
            p.first = 425;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={A,C}, E7={B,C}, E8={A,B,C} (Edge indel by adding edge E8={A,B,C})
            p.first = 426;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B}, E6={A,C}, E7={B,C}, E8={R,A,B,C} (Edge indel by adding edge E8={R,A,B,C})
            p.first = 427;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 354: // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B}
			// E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 250;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={A,C} (Edge indel by removing edge E2={R,A1})
			p.first = 292;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E3={R,A2})
			p.first = 292;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E5={A1,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E4={A1,A2,B})
			p.first = 248;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E5={A1,A2})
			p.first = 270;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,B}, E7={B,C} (Edge indel by removing edge E6={A1,B})
			p.first = 254;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E7={A2,B})
			p.first = 254;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B}, E8={R,B} (Edge indel by adding edge E8={R,B})
            p.first = 410;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C}, E8={R,A,C} (Edge indel by adding edge E8={R,A1,B})
            p.first = 426;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={A,C}, E8={R,A,C} (Edge indel by adding edge E8={R,A2,B})
            p.first = 426;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B}, E8={R,A1,A2,B} (Edge indel by adding edge E8={R,A1,A2,B})
            p.first = 428;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 355: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2}, E6={A1,B}, E7={A2,B}
			// E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 248;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 251;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B}, E6={B,C}, E7={A,C} (Edge indel by removing edge E3={R,A1})
			p.first = 293;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E4={R,A2})
			p.first = 293;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E5={A1,A2})
			p.first = 271;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B}, E7={B,C} (Edge indel by removing edge E6={A1,B})
			p.first = 255;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B}, E6={B,C} (Edge indel by removing edge E7={A2,B})
			p.first = 255;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2}, E6={A1,B}, E7={A2,B}, E8={R,B} (Edge indel by adding edge E8={R,B})
            p.first = 411;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B}, E6={A,C}, E7={B,C}, E8={R,A,C} (Edge indel by adding edge E8={R,A1,B})
            p.first = 427;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B}, E6={B,C}, E7={A,C}, E8={R,A,C} (Edge indel by adding edge E8={R,A2,B})
            p.first = 427;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2}, E6={A1,B}, E7={A2,B}, E8={A1,A2,B} (Edge indel by adding edge E8={A1,A2,B})
            p.first = 428;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 356: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2}
			// E2={R,A,B}, E3={R,C}, E4={R,A}, E5={B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E1={R,A,B1})
			p.first = 249;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e4, e3, e6, e7, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={B,C}, E7={A,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 249;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E4={R,B}, E5={A,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E3={R,B1})
			p.first = 291;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E4={R,B2})
			p.first = 291;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,C}, E4={R,B}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={A,B1})
			p.first = 256;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e3, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B}, E7={B,C} (Edge indel by removing edge E6={A,B2})
			p.first = 256;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E7={B1,B2})
			p.first = 272;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2}, E8={R,A} (Edge indel by adding edge E8={R,A})
            p.first = 409;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,B}, E6={A2,B}, E7={A1,A2}, E8={R,A1,A2} (Edge indel by adding edge E8={R,B1,B2})
            p.first = 425;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e7, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2}, E8={A,B1,B2} (Edge indel by adding edge E8={A,B1,B2})
            p.first = 429;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2}, E8={R,A,B1,B2} (Edge indel by adding edge E8={R,A,B1,B2})
            p.first = 430;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 357: // E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C}
			// E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A1,A2}, E7={A2,B} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 250;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E2={R,A})
			p.first = 294;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E3={R,C})
			p.first = 292;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 249;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E6={A,C}, E7={B,C} (Edge indel by removing edge E5={A,B})
			p.first = 259;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}, E7={B,C} (Edge indel by removing edge E6={A,C})
			p.first = 273;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E7={B,C})
			p.first = 257;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B}, E8={R,A2} (Edge indel by adding edge E8={R,B})
            p.first = 410;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={A,B}, E7={B,C}, E8={R,A,B} (Edge indel by adding edge E8={R,A,C})
            p.first = 426;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,B1}, E3={R,B2}, E4={A,B1,B2}, E5={A,B1}, E6={B1,B2}, E7={A,B2}, E8={R,A,B2} (Edge indel by adding edge E8={R,B,C})
            p.first = 429;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C}, E8={R,A,B,C} (Edge indel by adding edge E8={R,A,B,C})
            p.first = 431;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 358: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={A,C}, E7={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 249;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,B}, E6={A1,A2}, E7={A2,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 251;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E3={R,A})
			p.first = 295;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E4={R,C})
			p.first = 293;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E6={A,C}, E7={B,C} (Edge indel by removing edge E5={A,B})
			p.first = 260;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E7={B,C} (Edge indel by removing edge E6={A,C})
			p.first = 274;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E7={B,C})
			p.first = 258;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B}, E8={R,A2} (Edge indel by adding edge E8={R,B})
            p.first = 411;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,C}, E6={A,B}, E7={B,C}, E8={R,A,B} (Edge indel by adding edge E8={R,A,C})
            p.first = 427;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1}, E4={R,B2}, E5={A,B1}, E6={B1,B2}, E7={A,B2}, E8={R,A,B2} (Edge indel by adding edge E8={R,B,C})
            p.first = 430;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B}, E6={A,C}, E7={B,C}, E8={A,B,C} (Edge indel by adding edge E8={A,B,C})
            p.first = 431;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 359: // E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B}
			// E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 250;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={B1,B2}, E7={A,B2} (Edge indel by removing edge E2={R,A1})
			p.first = 296;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2} (Edge indel by removing edge E3={R,A2})
			p.first = 296;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E5={A1,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E4={A1,A2,B})
			p.first = 251;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E5={A1,A2})
			p.first = 275;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A}, E3={R,B}, E4={A,B,C}, E5={A,B}, E7={B,C} (Edge indel by removing edge E6={A1,B})
			p.first = 261;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C} (Edge indel by removing edge E7={A2,B})
			p.first = 261;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={A1,A2,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3}, E8={R,A3} (Edge indel by adding edge E8={R,B})
            p.first = 412;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B}, E8={R,A1,A2} (Edge indel by adding edge E8={R,A1,A2})
            p.first = 428;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A}, E3={R,C}, E4={A,B,C}, E5={A,C}, E6={A,B}, E7={B,C}, E8={R,A,B} (Edge indel by adding edge E8={R,A1,B})
            p.first = 431;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,C}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={B,C}, E7={A,B}, E8={R,A,B} (Edge indel by adding edge E8={R,A2,B})
            p.first = 431;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e7, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 360: // E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={B,C}, E7={A,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 256;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={A,B}, E7={B,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 253;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C} (Edge indel by removing edge E3={R,B,C})
			p.first = 252;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E5={R,A}, E6={A,B}, E7={B,C} (Edge indel by removing edge E4={R,A})
			p.first = 304;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E5={R,B})
			p.first = 297;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E7={A,C} (Edge indel by removing edge E6={A,B})
			p.first = 276;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2} (Edge indel by removing edge E7={A,C})
			p.first = 262;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={R,B1}, E6={A,B1}, E7={A,B2}, E8={R,B2} (Edge indel by adding edge E8={R,C})
            p.first = 413;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2}, E7={A1,B}, E8={A2,B} (Edge indel by adding edge E8={B,C})
            p.first = 425;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C}, E8={A,B,C} (Edge indel by adding edge E8={A,B,C})
            p.first = 432;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C}, E8={R,A,B,C} (Edge indel by adding edge E8={R,A,B,C})
            p.first = 433;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 361: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C}, E7={A,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 257;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 254;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e4, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 307;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E4={R,B})
			p.first = 298;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={A,B}, E7={A,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 252;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			
			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E7={A,C} (Edge indel by removing edge E6={A,B})
			p.first = 277;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E7={A,C})
			p.first = 263;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={R,B2} (Edge indel by adding edge E8={R,C})
            p.first = 414;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by adding edge E8={B,C})
            p.first = 426;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={R,B,C} (Edge indel by adding edge E8={R,B,C})
            p.first = 432;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={R,A,B,C} (Edge indel by adding edge E8={R,A,B,C})
            p.first = 434;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 362: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 252;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={A,C}, E7={A,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 258;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,B}, E5={R,A}, E6={A,B}, E7={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 255;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e5, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={A,B}, E7={A,C} (Edge indel by removing edge E4={R,A})
			p.first = 308;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E5={R,B})
			p.first = 299;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={A,C} (Edge indel by removing edge E6={A,B})
			p.first = 278;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B} (Edge indel by removing edge E7={A,C})
			p.first = 264;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={A,B1}, E7={A,B2}, E8={R,B2} (Edge indel by adding edge E8={R,C})
            p.first = 415;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by adding edge E8={B,C})
            p.first = 427;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C}, E8={R,B,C} (Edge indel by adding edge E8={R,B,C})
            p.first = 433;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C}, E8={A,B,C} (Edge indel by adding edge E8={A,B,C})
            p.first = 434;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 363: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C}, E7={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 259;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 254;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E3={R,A})
			p.first = 300;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E4={R,B})
			p.first = 305;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 253;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E7={B,C} (Edge indel by removing edge E6={A,B})
			p.first = 279;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E7={B,C})
			p.first = 263;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,C} (Edge indel by adding edge E8={R,C})
            p.first = 416;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={A,C} (Edge indel by adding edge E8={A,C})
            p.first = 426;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B,C}, E3={R,B}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={R,A,C} (Edge indel by adding edge E8={R,B,C})
            p.first = 432;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,A,B,C} (Edge indel by adding edge E8={R,A,B,C})
            p.first = 435;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 364: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 253;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={A,C}, E7={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 260;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,B}, E6={A,B}, E7={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 255;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={A,B}, E7={B,C} (Edge indel by removing edge E4={R,A})
			p.first = 301;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={R,B})
			p.first = 306;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={B,C} (Edge indel by removing edge E6={A,B})
			p.first = 280;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B} (Edge indel by removing edge E7={B,C})
			p.first = 264;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={B,C}, E8={R,C} (Edge indel by adding edge E8={R,C})
            p.first = 417;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={B,C}, E8={A,C} (Edge indel by adding edge E8={A,C})
            p.first = 427;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,B}, E5={R,A}, E6={A,B}, E7={A,C}, E8={R,A,C} (Edge indel by adding edge E8={R,B,C})
            p.first = 433;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e5, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={B,C}, E8={A,B,C} (Edge indel by adding edge E8={A,B,C})
            p.first = 435;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 365: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 254;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 261;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 302;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E4={R,B})
			p.first = 309;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 255;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E7={B,C} (Edge indel by removing edge E6={A,B})
			p.first = 281;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E7={B,C})
			p.first = 265;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,C} (Edge indel by adding edge E8={R,C})
            p.first = 418;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2}, E7={A2,B}, E8={A1,B} (Edge indel by adding edge E8={A,C})
            p.first = 428;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,A,C} (Edge indel by adding edge E8={R,A,C})
            p.first = 435;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={R,A,C} (Edge indel by adding edge E8={R,B,C})
            p.first = 434;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;
 
		case 366: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C}
			// E2={R,A,B}, E3={R,C}, E4={R,A}, E5={A,B,C}, E6={B,C}, E7={A,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 259;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e4, e3, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 257;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={B,C} (Edge indel by removing edge E3={R,B})
			p.first = 310;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E4={R,C})
			p.first = 300;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 256;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E7={B1,B2} (Edge indel by removing edge E6={A,B})
			p.first = 266;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E7={B,C})
			p.first = 282;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,A} (Edge indel by adding edge E8={R,A})
            p.first = 416;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={B1,B2}, E8={A,B2} (Edge indel by adding edge E8={A,C})
            p.first = 429;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,B,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={A,B}, E8={R,A,B} (Edge indel by adding edge E8={R,B,C})
            p.first = 432;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,A,B,C} (Edge indel by adding edge E8={R,A,B,C})
            p.first = 436;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 367: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B}, E7={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 256;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={R,A}, E6={B,C}, E7={A,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 260;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e5, e4, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 258;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E5={R,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E4={R,B})
			p.first = 311;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={R,C})
			p.first = 301;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E7={B1,B2} (Edge indel by removing edge E6={A,B})
			p.first = 267;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B} (Edge indel by removing edge E7={B,C})
			p.first = 283;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B}, E7={B,C}, E8={R,A} (Edge indel by adding edge E8={R,A})
            p.first = 417;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={B1,B2}, E8={A,B2} (Edge indel by adding edge E8={A,C})
            p.first = 430;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,C}, E7={A,B}, E8={R,A,B} (Edge indel by adding edge E8={R,B,C})
            p.first = 433;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B}, E7={B,C}, E8={A,B,C} (Edge indel by adding edge E8={A,B,C})
            p.first = 436;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 368: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 257;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,B}, E4={R,A}, E5={A,B,C}, E6={B,C}, E7={A,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 261;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e4, e3, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 313;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E4={R,C})
			p.first = 302;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 258;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E7={A,C} (Edge indel by removing edge E6={A,B})
			p.first = 268;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E7={A,C})
			p.first = 284;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,A} (Edge indel by adding edge E8={R,B})
            p.first = 418;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by adding edge E8={B,C})
            p.first = 431;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={A,B}, E8={R,A,B} (Edge indel by adding edge E8={R,A,C})
            p.first = 434;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,A,C} (Edge indel by adding edge E8={R,B,C})
            p.first = 436;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 369: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C}, E7={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C}, E7={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 259;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 261;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E3={R,A})
			p.first = 303;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B,C}, E6={A,C}, E7={B,C} (Edge indel by removing edge E4={R,C})
			p.first = 312;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E6={A,C}, E7={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 260;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E7={B,C} (Edge indel by removing edge E6={A,C})
			p.first = 285;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E7={B,C})
			p.first = 268;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,B}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B}, E8={R,A2} (Edge indel by adding edge E8={R,B})
            p.first = 419;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C}, E7={B,C}, E8={A,B} (Edge indel by adding edge E8={A,B})
            p.first = 431;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,A,B} (Edge indel by adding edge E8={R,A,C})
            p.first = 435;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,C}, E4={R,B}, E5={A,B,C}, E6={B,C}, E7={A,B}, E8={R,A,B} (Edge indel by adding edge E8={R,B,C})
            p.first = 436;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 370: // E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,A2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={B1,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 266;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E2={R,A1,B})
			p.first = 263;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E3={R,A2,B})
			p.first = 263;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E5={R,A}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E4={R,A1})
			p.first = 314;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E5={R,A2})
			p.first = 314;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E7={A1,A2} (Edge indel by removing edge E6={A1,A2,B})
			p.first = 262;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B} (Edge indel by removing edge E7={A1,A2})
			p.first = 286;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,A2}, E8={R,B} (Edge indel by adding edge E8={R,B})
            p.first = 420;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C} (Edge indel by adding edge E8={A1,B})
            p.first = 432;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={A,B,C}, E7={A,B}, E8={A,C} (Edge indel by adding edge E8={A2,B})
            p.first = 432;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e4, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,A2}, E8={R,A1,A2,B} (Edge indel by adding edge E8={R,A1,A2,B})
            p.first = 437;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 371: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2}
			// E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 262;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={B1,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 267;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={A,B} (Edge indel by removing edge E3={R,A1,B})
			p.first = 264;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,A}, E6={R,B}, E7={A,B} (Edge indel by removing edge E4={R,A2,B})
			p.first = 264;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E6={R,A}, E7={A,B} (Edge indel by removing edge E5={R,A1})
			p.first = 315;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E7={A,B} (Edge indel by removing edge E6={R,A2})
			p.first = 315;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2} (Edge indel by removing edge E7={A1,A2})
			p.first = 287;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2}, E8={R,B} (Edge indel by adding edge E8={R,B})
            p.first = 421;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,B}, E8={A,C} (Edge indel by adding edge E8={A1,B})
            p.first = 433;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={A,B}, E8={A,C} (Edge indel by adding edge E8={A2,B})
            p.first = 433;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e5, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2}, E8={A1,A2,B} (Edge indel by adding edge E8={A1,A2,B})
            p.first = 437;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 372: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 263;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 268;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,A2} (Edge indel by removing edge E3={R,A,C})
			p.first = 265;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E4={R,A})
			p.first = 317;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E5={R,B})
			p.first = 316;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={A,B} (Edge indel by removing edge E6={A,B,C})
			p.first = 264;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C} (Edge indel by removing edge E7={A,B})
			p.first = 288;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={R,C} (Edge indel by adding edge E8={R,C})
            p.first = 422;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C} (Edge indel by adding edge E8={A,C})
            p.first = 434;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by adding edge E8={B,C})
            p.first = 435;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,A2}, E8={R,A2,B} (Edge indel by adding edge E8={R,B,C})
            p.first = 437;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 373: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 266;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={R,A}, E6={A,B,C}, E7={A,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 268;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e5, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 268;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E5={R,B}, E6={A,B,C}, E7={B,C} (Edge indel by removing edge E4={R,B1})
			p.first = 318;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={A,B,C}, E7={B,C} (Edge indel by removing edge E5={R,B2})
			p.first = 318;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E7={B1,B2} (Edge indel by removing edge E6={A,B1,B2})
			p.first = 267;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2} (Edge indel by removing edge E7={B1,B2})
			p.first = 289;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={B1,B2}, E8={R,A} (Edge indel by adding edge E8={R,A})
            p.first = 423;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={B,C}, E8={A,B} (Edge indel by adding edge E8={A,B1})
            p.first = 436;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,C}, E5={R,B}, E6={A,B,C}, E7={B,C}, E8={A,B} (Edge indel by adding edge E8={A,B2})
            p.first = 436;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e4, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,A2}, E8={R,A1,A2} (Edge indel by adding edge E8={R,B1,B2})
            p.first = 437;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 374: // E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,B}, E7={A2,B}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 272;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={B,C}, E7={A,C} (Edge indel by removing edge E2={R,A1,B})
			p.first = 269;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,A}, E5={R,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E3={R,A2,B})
			p.first = 269;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,B,C}, E3={R,A,B}, E5={R,A}, E6={B,C}, E7={A,B} (Edge indel by removing edge E4={R,A1})
			p.first = 304;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e3, e1, e2, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={R,A2})
			p.first = 304;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E4={R,B}, E5={R,A}, E7={A,C} (Edge indel by removing edge E6={A1,B})
			p.first = 276;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e4, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,C} (Edge indel by removing edge E7={A2,B})
			p.first = 276;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={R,A} (Edge indel by adding edge E8={R,B})
            p.first = 413;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e1, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,B}, E7={A2,B}, E8={A1,A2} (Edge indel by adding edge E8={A1,A2})
            p.first = 425;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,B}, E7={A2,B}, E8={A1,A2,B} (Edge indel by adding edge E8={A1,A2,B})
            p.first = 438;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,B}, E7={A2,B}, E8={R,A1,A2,B} (Edge indel by adding edge E8={R,A1,A2,B})
            p.first = 439;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 375: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 273;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E2={R,A,C})
			p.first = 270;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={B,C} (Edge indel by removing edge E3={R,A})
			p.first = 310;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E4={R,B})
			p.first = 305;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 269;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E7={B,C} (Edge indel by removing edge E6={A,C})
			p.first = 279;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E7={B,C})
			p.first = 277;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,B} (Edge indel by adding edge E8={R,C})
            p.first = 416;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={B,C}, E8={A,B} (Edge indel by adding edge E8={A,B})
            p.first = 426;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B}, E8={R,A2,B} (Edge indel by adding edge E8={R,B,C})
            p.first = 438;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={B,C}, E8={R,A,B,C} (Edge indel by adding edge E8={R,A,B,C})
            p.first = 440;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 376: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,C}, E7={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 269;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 274;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,A1}, E5={R,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E3={R,A,C})
			p.first = 271;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E4={R,A})
			p.first = 311;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={R,B})
			p.first = 306;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={B,C} (Edge indel by removing edge E6={A,C})
			p.first = 280;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,C} (Edge indel by removing edge E7={B,C})
			p.first = 278;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B}, E7={B,C}, E8={R,B} (Edge indel by adding edge E8={R,C})
            p.first = 417;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,C}, E7={B,C}, E8={A,B} (Edge indel by adding edge E8={A,B})
            p.first = 427;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A1}, E5={R,A2}, E6={A1,B}, E7={A2,B}, E8={R,A2,B} (Edge indel by adding edge E8={R,B,C})
            p.first = 439;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,C}, E7={B,C}, E8={A,B,C} (Edge indel by adding edge E8={A,B,C})
            p.first = 440;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 377: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B}
			// E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 270;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 275;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C}, E6={B,C}, E7={A,C} (Edge indel by removing edge E3={R,A1})
			p.first = 312;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B,C}, E6={A,C}, E7={B,C} (Edge indel by removing edge E4={R,A2})
			p.first = 312;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E5={A1,A2,B})
			p.first = 271;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E7={B,C} (Edge indel by removing edge E6={A1,B})
			p.first = 281;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B,C}, E6={B,C} (Edge indel by removing edge E7={A2,B})
			p.first = 281;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B}, E8={R,B} (Edge indel by adding edge E8={R,B})
            p.first = 419;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B}, E8={A1,A2} (Edge indel by adding edge E8={A1,A2})
            p.first = 428;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={B,C}, E8={R,A,C} (Edge indel by adding edge E8={R,A1,B})
            p.first = 440;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B,C}, E6={B,C}, E7={A,C}, E8={R,A,C} (Edge indel by adding edge E8={R,A2,B})
            p.first = 440;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 378: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}
			// E2={R,A,B}, E3={R,C}, E4={R,A}, E5={A,B,C}, E6={B,C}, E7={A,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 273;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e4, e3, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 273;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={A,B} (Edge indel by removing edge E3={R,B1})
			p.first = 307;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E4={R,B2})
			p.first = 307;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E5={A,B1,B2})
			p.first = 272;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,C}, E4={R,B}, E5={A,B,C}, E7={A,B} (Edge indel by removing edge E6={A,B1})
			p.first = 282;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e3, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E7={A,B2})
			p.first = 282;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={R,A} (Edge indel by adding edge E8={R,A})
            p.first = 414;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by adding edge E8={B1,B2})
            p.first = 429;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B}, E8={R,A1,A2} (Edge indel by adding edge E8={R,B1,B2})
            p.first = 438;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={R,A,B1,B2} (Edge indel by adding edge E8={R,A,B1,B2})
            p.first = 441;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 379: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 272;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={R,A}, E6={B,C}, E7={A,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 274;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e5, e4, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 274;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			
			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E5={R,B}, E6={A,C}, E7={A,B} (Edge indel by removing edge E4={R,B1})
			p.first = 308;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={A,B}, E7={A,C} (Edge indel by removing edge E5={R,B2})
			p.first = 308;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,C}, E5={R,B}, E7={A,B} (Edge indel by removing edge E6={A,B1})
			p.first = 283;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e4, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B} (Edge indel by removing edge E7={A,B2})
			p.first = 283;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={R,A} (Edge indel by adding edge E8={R,A})
            p.first = 415;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by adding edge E8={B1,B2})
            p.first = 430;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,B}, E7={A2,B}, E8={R,A1,A2} (Edge indel by adding edge E8={R,B1,B2})
            p.first = 439;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={A,B1,B2} (Edge indel by adding edge E8={A,B1,B2})
            p.first = 441;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 380: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 273;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 275;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 313;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E4={R,C})
			p.first = 309;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 274;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E7={B,C} (Edge indel by removing edge E6={A,B})
			p.first = 285;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E7={B,C})
			p.first = 284;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,B} (Edge indel by adding edge E8={R,B})
            p.first = 418;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={A,C} (Edge indel by adding edge E8={A,C})
            p.first = 431;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={B,C}, E8={R,A,B} (Edge indel by adding edge E8={R,A,C})
            p.first = 440;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={R,A,B2} (Edge indel by adding edge E8={R,B,C})
            p.first = 441;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 381: // E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 282;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={A,B,C}, E7={B,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 279;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C} (Edge indel by removing edge E3={R,B,C})
			p.first = 277;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E5={R,A}, E6={A,B1,B2}, E7={B1,B2} (Edge indel by removing edge E4={R,A})
			p.first = 319;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E5={R,B})
			p.first = 314;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E7={A,C} (Edge indel by removing edge E6={A,B,C})
			p.first = 276;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B} (Edge indel by removing edge E7={A,C})
			p.first = 286;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={R,A1}, E5={R,B}, E6={A1,A2,B}, E7={A1,A2}, E8={R,A2} (Edge indel by adding edge E8={R,C})
            p.first = 420;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={A,B} (Edge indel by adding edge E8={A,B})
            p.first = 432;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,B}, E8={A2,B} (Edge indel by adding edge E8={B,C})
            p.first = 438;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={R,A,B,C} (Edge indel by adding edge E8={R,A,B,C})
            p.first = 442;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 382: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 276;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,C}, E7={A,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 283;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 280;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,A}, E6={R,B}, E7={A,C} (Edge indel by removing edge E4={R,B,C})
			p.first = 278;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E6={R,A}, E7={B1,B2} (Edge indel by removing edge E5={R,A})
			p.first = 320;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E7={A,B} (Edge indel by removing edge E6={R,B})
			p.first = 315;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2} (Edge indel by removing edge E7={A,C})
			p.first = 287;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={R,A1}, E6={R,B}, E7={A1,A2}, E8={R,A2} (Edge indel by adding edge E8={R,C})
            p.first = 421;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,C}, E8={A,B} (Edge indel by adding edge E8={A,B})
            p.first = 433;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,B}, E8={A2,B} (Edge indel by adding edge E8={B,C})
            p.first = 439;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,C}, E8={A,B,C} (Edge indel by adding edge E8={A,B,C})
            p.first = 442;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 383: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 277;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 284;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,B}, E5={R,A}, E6={A,B,C}, E7={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 281;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e5, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={A,B,C}, E7={A,C} (Edge indel by removing edge E4={R,A})
			p.first = 322;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E5={R,B})
			p.first = 316;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={A,C} (Edge indel by removing edge E6={A,B,C})
			p.first = 278;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C} (Edge indel by removing edge E7={A,C})
			p.first = 288;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={R,B} (Edge indel by adding edge E8={R,C})
            p.first = 422;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={A,B} (Edge indel by adding edge E8={A,B})
            p.first = 434;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={B,C} (Edge indel by adding edge E8={B,C})
            p.first = 440;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={R,B,C} (Edge indel by adding edge E8={R,B,C})
            p.first = 442;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 384: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 279;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 285;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 281;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={A,B,C}, E7={B,C} (Edge indel by removing edge E4={R,A})
			p.first = 318;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			
			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E6={A,B1,B2}, E7={B1,B2} (Edge indel by removing edge E5={R,B})
			p.first = 321;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={B,C} (Edge indel by removing edge E6={A,B,C})
			p.first = 280;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C} (Edge indel by removing edge E7={B,C})
			p.first = 288;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={A,B1,B2}, E7={B1,B2}, E8={R,B2} (Edge indel by adding edge E8={R,C})
            p.first = 423;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={B,C}, E8={A,B} (Edge indel by adding edge E8={A,B})
            p.first = 435;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={B,C}, E8={A,C} (Edge indel by adding edge E8={A,C})
            p.first = 440;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,B}, E5={R,A}, E6={A,B,C}, E7={A,C}, E8={R,A,C} (Edge indel by adding edge E8={R,B,C})
            p.first = 442;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e5, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 385: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 282;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={R,A}, E6={A,B,C}, E7={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 285;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e5, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E3={R,A,C})
			p.first = 284;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E5={R,B}, E6={A,B,C}, E7={A,C} (Edge indel by removing edge E4={R,B})
			p.first = 322;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E5={R,C})
			p.first = 317;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E7={A,B} (Edge indel by removing edge E6={A,B,C})
			p.first = 283;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2} (Edge indel by removing edge E7={A,B})
			p.first = 289;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={R,A} (Edge indel by adding edge E8={R,A})
            p.first = 422;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by adding edge E8={A,C})
            p.first = 441;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by adding edge E8={B,C})
            p.first = 436;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={R,A,B} (Edge indel by adding edge E8={R,B,C})
            p.first = 442;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 386: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}
			// E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 286;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 289;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={A,B,C} (Edge indel by removing edge E3={R,A1,B})
			p.first = 288;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,A}, E6={R,B}, E7={A,B,C} (Edge indel by removing edge E4={R,A2,B})
			p.first = 288;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E6={R,A}, E7={A,B1,B2} (Edge indel by removing edge E5={R,A1})
			p.first = 323;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E7={A,B1,B2} (Edge indel by removing edge E6={R,A2})
			p.first = 323;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2} (Edge indel by removing edge E7={A1,A2,B})
			p.first = 287;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={A1,A2,A3}, E8={R,A3} (Edge indel by adding edge E8={R,B})
            p.first = 424;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,A2} (Edge indel by adding edge E8={A1,A2})
            p.first = 437;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,B,C}, E8={A,C} (Edge indel by adding edge E8={A1,B})
            p.first = 442;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={A,B,C}, E8={A,C} (Edge indel by adding edge E8={A2,B})
            p.first = 442;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e5, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 387: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}, E7={B1,B2}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E1={R,A,B1})
			p.first = 291;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e6, e7, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={B,C}, E7={A,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 291;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}, E7={B1,B2} (Edge indel by removing edge E3={R,B1,B2})
			p.first = 290;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3} (Edge indel by removing edge E4={R,A})
			p.first = 324;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={A,B1})
			p.first = 304;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B}, E7={B,C} (Edge indel by removing edge E6={A,B2})
			p.first = 304;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E7={B1,B2})
			p.first = 297;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={A1,A2}, E6={A1,B}, E7={A2,B}, E8={R,A2} (Edge indel by adding edge E8={R,B1})
            p.first = 425;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={R,A1}, E5={A1,B}, E6={A1,A2}, E7={A2,B}, E8={R,A2} (Edge indel by adding edge E8={R,B2})
            p.first = 425;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}, E7={B1,B2}, E8={A,B1,B2} (Edge indel by adding edge E8={A,B1,B2})
            p.first = 443;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}, E7={B1,B2}, E8={R,A,B1,B2} (Edge indel by adding edge E8={R,A,B1,B2})
            p.first = 444;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 388: // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2}
			// E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E1={R,A,B1})
			p.first = 292;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 292;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2} (Edge indel by removing edge E3={R,A})
			p.first = 325;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E5={A,B1}, E6={A,B2}, E7={B1,B2} (Edge indel by removing edge E4={A,B1,B2})
			p.first = 290;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={A,B1})
			p.first = 305;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E7={B,C} (Edge indel by removing edge E6={A,B2})
			p.first = 305;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E7={B1,B2})
			p.first = 298;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C}, E8={R,B} (Edge indel by adding edge E8={R,B1})
            p.first = 426;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,C}, E6={A,B}, E7={B,C}, E8={R,B} (Edge indel by adding edge E8={R,B2})
            p.first = 426;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, EDGES_ALPHABET[i], e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2}, E8={R,B1,B2} (Edge indel by adding edge E8={R,B1,B2})
            p.first = 443;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2}, E8={R,A,B1,B2} (Edge indel by adding edge E8={R,A,B1,B2})
            p.first = 445;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 389: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}, E7={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}, E7={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 290;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={A,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 293;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 293;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2} (Edge indel by removing edge E4={R,A})
			p.first = 326;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={A,B1})
			p.first = 306;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B}, E7={B,C} (Edge indel by removing edge E6={A,B2})
			p.first = 306;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E7={B1,B2})
			p.first = 299;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B}, E6={A,C}, E7={B,C}, E8={R,B} (Edge indel by adding edge E8={R,B1})
            p.first = 427;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={A,C}, E6={A,B}, E7={B,C}, E8={R,B} (Edge indel by adding edge E8={R,B2})
            p.first = 427;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}, E7={B1,B2}, E8={R,B1,B2} (Edge indel by adding edge E8={R,B1,B2})
            p.first = 444;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1}, E6={A,B2}, E7={B1,B2}, E8={A,B1,B2} (Edge indel by adding edge E8={A,B1,B2})
            p.first = 445;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 390: // E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C}
			// E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,B}, E6={A1,A2}, E7={A2,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 294;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={A,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 292;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2} (Edge indel by removing edge E3={R,B})
			p.first = 325;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 291;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E6={A,C}, E7={B,C} (Edge indel by removing edge E5={A,B})
			p.first = 310;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E7={B,C} (Edge indel by removing edge E6={A,C})
			p.first = 300;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E7={B,C})
			p.first = 307;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C}, E8={R,A} (Edge indel by adding edge E8={R,A})
            p.first = 426;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2}, E8={R,B2} (Edge indel by adding edge E8={R,C})
            p.first = 429;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={B1,B2}, E7={A,B2}, E8={R,A,B2} (Edge indel by adding edge E8={R,B,C})
            p.first = 443;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C}, E8={R,A,B,C} (Edge indel by adding edge E8={R,A,B,C})
            p.first = 446;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 391: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={A,C}, E7={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 291;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1,A2}, E4={R,B}, E5={A1,B}, E6={A1,A2}, E7={A2,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 295;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B}, E6={B,C}, E7={A,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 293;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2} (Edge indel by removing edge E4={R,B})
			p.first = 326;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E5={A,B})
			p.first = 311;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E7={B,C} (Edge indel by removing edge E6={A,C})
			p.first = 301;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={A,C} (Edge indel by removing edge E7={B,C})
			p.first = 308;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={A,C}, E7={B,C}, E8={R,A} (Edge indel by adding edge E8={R,A})
            p.first = 427;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={A,B1}, E6={A,B2}, E7={B1,B2}, E8={R,B2} (Edge indel by adding edge E8={R,C})
            p.first = 430;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A}, E5={A,B1}, E6={B1,B2}, E7={A,B2}, E8={R,A,B2} (Edge indel by adding edge E8={R,B,C})
            p.first = 444;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B}, E6={A,C}, E7={B,C}, E8={A,B,C} (Edge indel by adding edge E8={A,B,C})
            p.first = 446;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 392: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C}
			// E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 292;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2} (Edge indel by removing edge E2={R,A,B})
			p.first = 296;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E3={R,A})
			p.first = 327;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E4={A,B,C})
			p.first = 293;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E6={A,C}, E7={B,C} (Edge indel by removing edge E5={A,B})
			p.first = 312;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E7={B,C} (Edge indel by removing edge E6={A,C})
			p.first = 309;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E7={B,C})
			p.first = 302;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B}, E8={R,A2} (Edge indel by adding edge E8={R,B})
            p.first = 428;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C}, E8={R,C} (Edge indel by adding edge E8={R,C})
            p.first = 431;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2}, E8={R,A,B2} (Edge indel by adding edge E8={R,A,C})
            p.first = 445;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={A,C}, E8={R,A,C} (Edge indel by adding edge E8={R,B,C})
            p.first = 446;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 393: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B}
			// E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 294;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A}, E4={A,B1,B2}, E5={B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 296;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e6, e7, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E3={R,B})
			p.first = 327;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E4={A1,A2,B})
			p.first = 295;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,B}, E4={A1,A2,B}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E5={A1,A2})
			p.first = 303;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E7={A,C} (Edge indel by removing edge E6={A1,B})
			p.first = 313;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C} (Edge indel by removing edge E7={A2,B})
			p.first = 313;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C}, E8={R,A} (Edge indel by adding edge E8={R,A1})
            p.first = 431;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,C}, E4={A,B,C}, E5={A,B}, E6={B,C}, E7={A,C}, E8={R,A} (Edge indel by adding edge E8={R,A2})
            p.first = 431;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={A,B}, E7={B,C}, E8={R,A,B} (Edge indel by adding edge E8={R,A1,B})
            p.first = 446;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B}, E4={A,B,C}, E5={A,C}, E6={B,C}, E7={A,B}, E8={R,A,B} (Edge indel by adding edge E8={R,A2,B})
            p.first = 446;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e7, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 394: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={A,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 300;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 300;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E3={R,B1,B2})
			p.first = 298;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E4={R,A})
			p.first = 328;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E5={A,B1,B2})
			p.first = 297;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E7={A,B} (Edge indel by removing edge E6={A,B1})
			p.first = 314;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E7={A,B2})
			p.first = 314;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={R,B} (Edge indel by adding edge E8={R,B1})
            p.first = 432;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={A,C}, E7={A,B}, E8={R,B} (Edge indel by adding edge E8={R,B2})
            p.first = 432;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by adding edge E8={B1,B2})
            p.first = 443;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={R,A,B1,B2} (Edge indel by adding edge E8={R,A,B1,B2})
            p.first = 447;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 395: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1}, E7={A,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 297;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,A}, E6={B,C}, E7={A,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 301;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,A}, E6={A,B}, E7={B,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 301;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,A}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E4={R,B1,B2})
			p.first = 299;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E5={R,A})
			p.first = 329;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E7={A,B} (Edge indel by removing edge E6={A,B1})
			p.first = 315;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B} (Edge indel by removing edge E7={A,B2})
			p.first = 315;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B}, E7={A,C}, E8={R,B} (Edge indel by adding edge E8={R,B1})
            p.first = 433;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E6={A,C}, E7={A,B}, E8={R,B} (Edge indel by adding edge E8={R,B2})
            p.first = 433;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by adding edge E8={B1,B2})
            p.first = 444;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1}, E7={A,B2}, E8={A,B1,B2} (Edge indel by adding edge E8={A,B1,B2})
            p.first = 447;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 396: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 298;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,C}, E7={A,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 302;
			p.second = create_permutations_subset(mismatches, root, a, c, c, p.first, e1, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 302;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E4={R,A})
			p.first = 330;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E5={A,B1,B2})
			p.first = 299;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={A,B,C}, E7={A,B} (Edge indel by removing edge E6={A,B1})
			p.first = 316;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E7={A,B2})
			p.first = 316;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={R,B} (Edge indel by adding edge E8={R,B1})
            p.first = 434;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,C}, E7={A,B}, E8={R,B} (Edge indel by adding edge E8={R,B2})
            p.first = 434;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by adding edge E8={B1,B2})
            p.first = 445;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={R,B1,B2} (Edge indel by adding edge E8={R,B1,B2})
            p.first = 447;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 397: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 300;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 303;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 302;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E4={R,B})
			p.first = 331;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 301;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E7={B,C} (Edge indel by removing edge E6={A,B})
			p.first = 318;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E7={B,C})
			p.first = 317;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,A} (Edge indel by adding edge E8={R,A})
            p.first = 435;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,C} (Edge indel by adding edge E8={R,C})
            p.first = 436;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={A,C} (Edge indel by adding edge E8={A,C})
            p.first = 446;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={R,A,B2} (Edge indel by adding edge E8={R,B,C})
            p.first = 447;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 398: // E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={B,C}, E7={A,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 310;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 307;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E3={R,B,C})
			p.first = 305;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E4={R,A})
			p.first = 328;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 304;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E7={B1,B2} (Edge indel by removing edge E6={A,B})
			p.first = 319;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E7={B,C})
			p.first = 314;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={R,A} (Edge indel by adding edge E8={R,B})
            p.first = 432;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={R,A1}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B}, E8={R,A2} (Edge indel by adding edge E8={R,C})
            p.first = 438;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={B1,B2}, E8={A,B2} (Edge indel by adding edge E8={A,C})
            p.first = 443;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,A,B,C} (Edge indel by adding edge E8={R,A,B,C})
            p.first = 448;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 399: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B}, E7={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B}, E7={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 304;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,B}, E6={B,C}, E7={A,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 311;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={A,B}, E7={A,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 308;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,A}, E6={A,B}, E7={B,C} (Edge indel by removing edge E4={R,B,C})
			p.first = 306;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E5={R,A})
			p.first = 329;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E7={B1,B2} (Edge indel by removing edge E6={A,B})
			p.first = 320;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B} (Edge indel by removing edge E7={B,C})
			p.first = 315;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E5={R,B}, E6={A,B}, E7={A,C}, E8={R,A} (Edge indel by adding edge E8={R,B})
            p.first = 433;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={R,A1}, E6={A1,B}, E7={A2,B}, E8={R,A2} (Edge indel by adding edge E8={R,C})
            p.first = 439;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1}, E7={B1,B2}, E8={A,B2} (Edge indel by adding edge E8={A,C})
            p.first = 444;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B}, E7={B,C}, E8={A,B,C} (Edge indel by adding edge E8={A,B,C})
            p.first = 448;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 400: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 305;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,C}, E7={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 312;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 309;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E4={R,A})
			p.first = 331;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 306;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E7={B1,B2} (Edge indel by removing edge E6={A,B})
			p.first = 321;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E7={B,C})
			p.first = 316;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,B} (Edge indel by adding edge E8={R,B})
            p.first = 435;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,C}, E7={B,C}, E8={R,B} (Edge indel by adding edge E8={R,C})
            p.first = 440;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={B1,B2}, E8={A,B2} (Edge indel by adding edge E8={A,C})
            p.first = 445;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,B,C} (Edge indel by adding edge E8={R,B,C})
            p.first = 448;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 401: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 307;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={A,B,C}, E6={A,C}, E7={A,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 313;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 309;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E4={R,B})
			p.first = 330;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={A,B}, E7={A,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 308;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E7={A,C} (Edge indel by removing edge E6={A,B})
			p.first = 322;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B} (Edge indel by removing edge E7={A,C})
			p.first = 317;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={R,A} (Edge indel by adding edge E8={R,A})
            p.first = 434;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={R,B2} (Edge indel by adding edge E8={R,C})
            p.first = 441;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by adding edge E8={B,C})
            p.first = 446;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,A,C} (Edge indel by adding edge E8={R,B,C})
            p.first = 448;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 402: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 310;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 313;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C}, E6={B,C}, E7={A,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 312;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E4={R,B})
			p.first = 331;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={A,C}, E7={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 311;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E7={B,C} (Edge indel by removing edge E6={A,C})
			p.first = 318;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,C} (Edge indel by removing edge E7={B,C})
			p.first = 322;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={B,C}, E8={R,A} (Edge indel by adding edge E8={R,A})
            p.first = 440;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,B} (Edge indel by adding edge E8={R,C})
            p.first = 436;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={B,C}, E8={A,B} (Edge indel by adding edge E8={A,B})
            p.first = 446;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={B,C}, E7={A,B}, E8={R,A,B} (Edge indel by adding edge E8={R,B,C})
            p.first = 448;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 403: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E7={A,B}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 314;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,B}, E6={A,B,C}, E7={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 318;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={R,B}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E3={R,A,C})
			p.first = 317;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,A}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E4={R,B,C})
			p.first = 316;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1,A2}, E6={A1,A2,B}, E7={A1,A2} (Edge indel by removing edge E5={R,A})
			p.first = 332;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e4, e2, e3, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E7={A,B} (Edge indel by removing edge E6={A,B,C})
			p.first = 315;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2} (Edge indel by removing edge E7={A,B})
			p.first = 323;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={A1,A2,B}, E7={A1,A2}, E8={R,A2} (Edge indel by adding edge E8={R,B})
            p.first = 437;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E7={A,C}, E8={R,B} (Edge indel by adding edge E8={R,C})
            p.first = 442;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by adding edge E8={A,C})
            p.first = 447;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by adding edge E8={B,C})
            p.first = 448;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 404: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2}, E7={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2}, E7={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 319;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,B}, E6={A,B,C}, E7={A,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 322;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={A,B,C}, E7={A,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 322;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,A}, E6={A,B1,B2}, E7={B1,B2} (Edge indel by removing edge E4={R,B1,B2})
			p.first = 321;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1,A2}, E6={A1,A2,B}, E7={A1,A2} (Edge indel by removing edge E5={R,A})
			p.first = 332;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e4, e2, e3, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E7={B1,B2} (Edge indel by removing edge E6={A,B1,B2})
			p.first = 320;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2} (Edge indel by removing edge E7={B1,B2})
			p.first = 323;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={R,A} (Edge indel by adding edge E8={R,B1})
            p.first = 442;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={R,A} (Edge indel by adding edge E8={R,B2})
            p.first = 442;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e2, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E7={B,C}, E8={A,B} (Edge indel by adding edge E8={A,B1})
            p.first = 448;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E7={B,C}, E8={A,B} (Edge indel by adding edge E8={A,B2})
            p.first = 448;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e6, EDGES_ALPHABET[i], e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 405: // E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={A1,A2,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3}
			// E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 325;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e6, e7, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={B1,B2}, E7={A,B2} (Edge indel by removing edge E2={R,A1,A3})
			p.first = 325;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2} (Edge indel by removing edge E3={R,A2,A3})
			p.first = 325;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3} (Edge indel by removing edge E4={A1,A2,A3})
			p.first = 324;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E5={A1,A2})
			p.first = 328;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e1, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E7={A,B2} (Edge indel by removing edge E6={A1,A3})
			p.first = 328;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E7={A2,A3})
			p.first = 328;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2}, E8={R,A} (Edge indel by adding edge E8={R,A1})
            p.first = 443;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={B1,B2}, E7={A,B2}, E8={R,A} (Edge indel by adding edge E8={R,A2})
            p.first = 443;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={B1,B2}, E6={A,B1}, E7={A,B2}, E8={R,A} (Edge indel by adding edge E8={R,A3})
            p.first = 443;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e1, EDGES_ALPHABET[i], e4, e6, e7, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={A1,A2,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3}, E8={R,A1,A2,A3} (Edge indel by adding edge E8={R,A1,A2,A3})
            p.first = 449;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 406: // E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3}
			// E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3} (Edge indel by removing edge E1={R,A1,A2,A3})
			p.first = 324;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 326;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e6, e7, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E4={R,A,B2}, E5={A,B1}, E6={B1,B2}, E7={A,B2} (Edge indel by removing edge E3={R,A1,A3})
			p.first = 326;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2} (Edge indel by removing edge E4={R,A2,A3})
			p.first = 326;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E5={A1,A2})
			p.first = 329;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e2, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E5={A,B1}, E7={A,B2} (Edge indel by removing edge E6={A1,A3})
			p.first = 329;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E7={A2,A3})
			p.first = 329;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2}, E8={R,A} (Edge indel by adding edge E8={R,A1})
            p.first = 444;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E5={A,B1}, E6={B1,B2}, E7={A,B2}, E8={R,A} (Edge indel by adding edge E8={R,A2})
            p.first = 444;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, EDGES_ALPHABET[i], e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B1,B2}, E2={R,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={B1,B2}, E6={A,B1}, E7={A,B2}, E8={R,A} (Edge indel by adding edge E8={R,A3})
            p.first = 444;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e2, EDGES_ALPHABET[i], e6, e7, e5, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3}, E8={A1,A2,A3} (Edge indel by adding edge E8={A1,A2,A3})
            p.first = 449;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 407: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 325;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1,A2}, E4={A1,A2,B}, E5={A1,B}, E6={A1,A2}, E7={A2,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 327;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={A1,A2,B}, E5={A1,A2}, E6={A1,B}, E7={A2,B} (Edge indel by removing edge E3={R,A,B2})
			p.first = 327;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2} (Edge indel by removing edge E4={A,B1,B2})
			p.first = 326;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E5={A,B1})
			p.first = 331;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B}, E7={B,C} (Edge indel by removing edge E6={A,B2})
			p.first = 331;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2} (Edge indel by removing edge E7={B1,B2})
			p.first = 330;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={A,B1,B2}, E5={A,B1}, E6={A,B2}, E7={B1,B2}, E8={R,A} (Edge indel by adding edge E8={R,A})
            p.first = 445;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={A,B,C}, E5={A,B}, E6={A,C}, E7={B,C}, E8={R,B} (Edge indel by adding edge E8={R,B1})
            p.first = 446;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={A,B,C}, E5={A,C}, E6={A,B}, E7={B,C}, E8={R,B} (Edge indel by adding edge E8={R,B2})
            p.first = 446;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, EDGES_ALPHABET[i], e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={A1,A2,A3}, E5={A1,A2}, E6={A1,A3}, E7={A2,A3}, E8={R,A2,A3} (Edge indel by adding edge E8={R,B1,B2})
            p.first = 449;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;

		case 408: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 328;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={A,B,C}, E6={B,C}, E7={A,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 331;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 331;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E4={R,B1,B2})
			p.first = 330;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E5={A,B1,B2})
			p.first = 329;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={A1,A2,B}, E7={A1,A2} (Edge indel by removing edge E6={A,B1})
			p.first = 332;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={A1,A2,B}, E6={A1,A2} (Edge indel by removing edge E7={A,B2})
			p.first = 332;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={R,A,B1,B2} (Edge indel by adding edge E8={R,A})
            p.first = 447;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={R,A} (Edge indel by adding edge E8={R,B1})
            p.first = 448;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, EDGES_ALPHABET[i], e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A,B,C}, E2={R,B,C}, E3={R,A,B}, E4={R,A,C}, E5={A,B,C}, E6={B,C}, E7={A,B}, E8={R,A} (Edge indel by adding edge E8={R,B2})
            p.first = 448;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e2, EDGES_ALPHABET[i], e5, e7, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={A1,A2,A3}, E6={A1,A2}, E7={A1,A3}, E8={A2,A3} (Edge indel by adding edge E8={B1,B2})
            p.first = 449;
            for (unsigned i = 0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            }
			break;
	
		case 409: // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}
			// E2={R,A1,A2}, E3={R,A1}, E4={R,B}, E5={R,A2}, E6={A1,B}, E7={A1,A2}, E8={A2,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 333;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e5, e4, e7, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E2={R,A,B2})
			p.first = 333;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by removing edge E3={R,A})
			p.first = 356;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E5={R,B}, E6={A,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E4={R,B1})
			p.first = 353;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e7, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E5={R,B2})
			p.first = 353;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={R,B}, E7={A,B}, E8={B,C} (Edge indel by removing edge E6={A,B1})
			p.first = 337;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e4, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B}, E8={B,C} (Edge indel by removing edge E7={A,B2})
			p.first = 337;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E8={B1,B2})
			p.first = 336;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A1}, E4={R,A2}, E5={R,A3}, E6={A1,A2}, E7={A1,A3}, E8={A2,A3}, E9={R,A2,A3} (Edge indel by adding edge E9={R,B1,B2})
			p.first = 450;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}, E9={A,B1,B2} (Edge indel by adding edge E9={A,B1,B2})
			p.first = 451;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}, E9={R,A,B1,B2} (Edge indel by adding edge E9={R,A,B1,B2})
			p.first = 452;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 410: // E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B}
			// E2={R,A1}, E3={R,A2}, E4={R,A3}, E5={A1,A2,A3}, E6={A1,A2}, E7={A1,A3}, E8={A2,A3} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 334;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={A,C} (Edge indel by removing edge E2={R,A1})
			p.first = 357;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,B}, E8={B,C} (Edge indel by removing edge E3={R,A2})
			p.first = 357;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E5={A1,A2,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E4={R,B})
			p.first = 354;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E5={A1,A2,B})
			p.first = 333;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E6={A1,A2})
			p.first = 340;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E8={A,C} (Edge indel by removing edge E7={A1,B})
			p.first = 338;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E8={A2,B})
			p.first = 338;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}, E9={R,A,B2} (Edge indel by adding edge E9={R,A1,B})
			p.first = 451;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,B1}, E3={R,A}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={B1,B2}, E8={A,B2}, E9={R,A,B2} (Edge indel by adding edge E9={R,A2,B})
			p.first = 451;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e3, e2, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B}, E9={R,A,B1,B2} (Edge indel by adding edge E9={R,A1,A2,B})
			p.first = 453;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 411: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B}
			// E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 333;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E3={R,A1}, E4={R,A2}, E5={R,A3}, E6={A1,A2}, E7={A1,A3}, E8={A2,A3} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 335;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B}, E7={B,C}, E8={A,C} (Edge indel by removing edge E3={R,A1})
			p.first = 358;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={R,C}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E4={R,A2})
			p.first = 358;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E6={A1,A2}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E5={R,B})
			p.first = 355;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E6={A1,A2})
			p.first = 341;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={A,B}, E8={A,C} (Edge indel by removing edge E7={A1,B})
			p.first = 339;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E8={A2,B})
			p.first = 339;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}, E9={R,A,B2} (Edge indel by adding edge E9={R,A1,B})
			p.first = 452;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1}, E4={R,A}, E5={R,B2}, E6={A,B1}, E7={B1,B2}, E8={A,B2}, E9={R,A,B2} (Edge indel by adding edge E9={R,A2,B})
			p.first = 452;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B}, E9={R,A,B1,B2} (Edge indel by adding edge E9={A1,A2,B})
			p.first = 453;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 412: // E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={R,A3}, E5={A1,A2,A3}, E6={A1,A2}, E7={A1,A3}, E8={A2,A3}
			// E2={R,A1}, E3={R,A2}, E4={R,A3}, E5={A1,A2,A3}, E6={A1,A2}, E7={A1,A3}, E8={A2,A3} (Edge indel by removing edge E1={R,A1,A2,A3})
			p.first = 334;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B}, E8={A1,A2} (Edge indel by removing edge E2={R,A1})
			p.first = 359;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e3, e4, e5, e8, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A1,A2}, E8={A2,B} (Edge indel by removing edge E3={R,A2})
			p.first = 359;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, e4, e5, e7, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E5={A1,A2,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E4={R,A3})
			p.first = 359;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1}, E3={R,A2}, E4={R,A3}, E6={A1,A2}, E7={A1,A3}, E8={A2,A3} (Edge indel by removing edge E5={A1,A2,A3})
			p.first = 335;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,B1}, E3={R,B2}, E4={R,A}, E5={A,B1,B2}, E7={A,B}, E8={A,C} (Edge indel by removing edge E6={A1,A2})
			p.first = 342;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e4, e2, e3, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,B1}, E3={R,A}, E4={R,B2}, E5={A,B1,B2}, E6={A,B}, E8={A,C} (Edge indel by removing edge E7={A1,A3})
			p.first = 342;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B}, E7={A,C}, (Edge indel by removing edge E8={A2,A3})
			p.first = 342;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B}, E9={R,A1,A2} (Edge indel by adding edge E9={R,A1,A2})
			p.first = 453;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1}, E3={R,B}, E4={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A1,A2}, E8={A2,B}, E9={R,A1,A2} (Edge indel by adding edge E9={R,A1,A3})
			p.first = 453;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, e5, e7, e6, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B}, E8={A1,A2}, E9={R,A1,A2} (Edge indel by adding edge E9={R,A2,A3})
			p.first = 453;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e3, e4, e2, e5, e8, e6, e7, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 413: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={R,A}, E7={B,C}, E8={A,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 337;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e6, e4, e5, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={R,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 337;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E3={R,B1,B2})
			p.first = 336;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,A1,A2}, E5={R,A1}, E6={R,A2}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E4={R,A})
			p.first = 374;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e3, e1, e2, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E6={R,B}, E7={A,C}, E8={A,B} (Edge indel by removing edge E5={R,B1})
			p.first = 360;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E7={A,B}, E8={A,C} (Edge indel by removing edge E6={R,B2})
			p.first = 360;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={R,B}, E8={A1,A2} (Edge indel by removing edge E7={A,B1})
			p.first = 343;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={R,A1}, E5={R,B}, E6={R,A2}, E7={A1,A2} (Edge indel by removing edge E1={A,B2})
			p.first = 343;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, e5, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={A1,A2}, E8={A1,A3}, E9={A2,A3} (Edge indel by adding edge E9={B1,B2})
			p.first = 450;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2}, E9={A,B1,B2} (Edge indel by adding edge E9={A,B1,B2})
			p.first = 454;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2}, E9={R,A,B1,B2} (Edge indel by adding edge E9={R,A,B1,B2})
			p.first = 455;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 414: // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={A,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 338;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e5, e4, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 338;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E3={R,A})
			p.first = 378;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={A,B} (Edge indel by removing edge E4={R,B1})
			p.first = 361;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E5={R,B2})
			p.first = 361;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E6={A,B1,B2})
			p.first = 336;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={R,B}, E6={A,B,C}, E8={A,B} (Edge indel by removing edge E7={A,B1})
			p.first = 344;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e4, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E1={A,B2})
			p.first = 344;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2} (Edge indel by adding edge E9={B1,B2})
			p.first = 451;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={R,B1,B2} (Edge indel by adding edge E9={R,B1,B2})
			p.first = 454;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={R,A,B1,B2} (Edge indel by adding edge E9={R,A,B1,B2})
			p.first = 456;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 415: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 336;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={R,B}, E7={A,C}, E8={A,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 339;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e6, e5, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 339;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E4={R,A})
			p.first = 379;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E6={R,B}, E7={A,C}, E8={A,B} (Edge indel by removing edge E5={R,B1})
			p.first = 362;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={A,B}, E8={A,C} (Edge indel by removing edge E6={R,B2})
			p.first = 362;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={R,B}, E8={A,B} (Edge indel by removing edge E7={A,B1})
			p.first = 345;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e5, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B} (Edge indel by removing edge E8={A,B2})
			p.first = 345;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2} (Edge indel by adding edge E9={B1,B2})
			p.first = 452;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2}, E9={R,B1,B2} (Edge indel by adding edge E9={R,B1,B2})
			p.first = 455;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2}, E9={A,B1,B2} (Edge indel by adding edge E9={A,B1,B2})
			p.first = 456;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 416: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C}
			// E2={R,A1,A2}, E3={R,A1}, E4={R,B}, E5={R,A2}, E6={A1,A2,B}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 340;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e5, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 338;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e4, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E3={R,A})
			p.first = 366;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={B,C} (Edge indel by removing edge E4={R,B})
			p.first = 375;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E5={R,C})
			p.first = 363;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E6={A,B,C})
			p.first = 337;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E8={B1,B2} (Edge indel by removing edge E7={A,B})
			p.first = 347;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E8={B,C})
			p.first = 344;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={B1,B2}, E9={A,B2} (Edge indel by adding edge E9={A,C})
			p.first = 451;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,B1}, E4={R,A}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={R,A,B2} (Edge indel by adding edge E9={R,B,C})
			p.first = 454;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, EDGES_ALPHABET[i], e2, e4, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C}, E9={R,A,B,C} (Edge indel by adding edge E9={R,A,B,C})
			p.first = 457;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 417: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B}, E8={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 337;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1,A2}, E4={R,A1}, E5={R,B}, E6={R,A2}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 341;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e6, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,B}, E5={R,A}, E6={R,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 339;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e5, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={R,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E4={R,A})
			p.first = 367;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E6={R,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E5={R,B})
			p.first = 376;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={A,B}, E8={B,C} (Edge indel by removing edge E6={R,C})
			p.first = 364;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E8={B1,B2} (Edge indel by removing edge E7={A,B})
			p.first = 348;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B} (Edge indel by removing edge E8={B,C})
			p.first = 345;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={B1,B2}, E9={A,B2} (Edge indel by adding edge E9={A,C})
			p.first = 452;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,B1}, E5={R,A}, E6={R,B2}, E7={A,B1}, E8={A,B2}, E9={R,A,B2} (Edge indel by adding edge E9={R,B,C})
			p.first = 455;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e5, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B}, E8={B,C}, E9={A,B,C} (Edge indel by adding edge E9={A,B,C})
			p.first = 457;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 418: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C}
			// E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 338;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e2, e4, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,B1}, E4={R,A}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E2={R,A,B})
			p.first = 342;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e4, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E3={R,A})
			p.first = 368;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E4={R,B})
			p.first = 380;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E5={R,C})
			p.first = 365;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E6={A,B,C})
			p.first = 339;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E8={B,C} (Edge indel by removing edge E7={A,B})
			p.first = 349;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E7={A1,A2} (Edge indel by removing edge E8={B,C})
			p.first = 346;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E7={A1,A2}, E8={A2,B}, E9={A1,B} (Edge indel by adding edge E9={A,C})
			p.first = 453;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C}, E9={R,A,C} (Edge indel by adding edge E9={R,A,C})
			p.first = 457;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1}, E4={R,A}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={R,A,B2} (Edge indel by adding edge E9={R,B,C})
			p.first = 456;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 419: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E7={A1,B}, E8={A2,B}
			// E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 340;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,B1}, E4={R,B2}, E5={R,A}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 342;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e5, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={B,C}, E8={A,C} (Edge indel by removing edge E3={R,A1})
			p.first = 369;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={R,C}, E6={A,B,C}, E7={A,C}, E8={B,C} (Edge indel by removing edge E4={R,A2})
			p.first = 369;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E6={A1,A2,B}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E5={R,B})
			p.first = 377;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E6={A1,A2,B})
			p.first = 341;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E8={B,C} (Edge indel by removing edge E7={A1,B})
			p.first = 349;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={B,C} (Edge indel by removing edge E8={A2,B})
			p.first = 349;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E7={A1,B}, E8={A2,B}, E9={A1,A2} (Edge indel by adding edge E9={A1,A2})
			p.first = 453;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A}, E4={R,C}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={B,C}, E9={R,A,B} (Edge indel by adding edge E9={R,A1,B})
			p.first = 457;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={B,C}, E8={A,B}, E9={R,A,B} (Edge indel by adding edge E9={R,A2,B})
			p.first = 457;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e4, e5, e3, e6, e8, e7, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 420: // E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={R,B}, E7={A1,A2,B}, E8={A1,A2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={R,A}, E7={A,B1,B2}, E8={B1,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 347;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e6, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={R,C}, E7={A,B,C}, E8={A,B} (Edge indel by removing edge E2={R,A1,B})
			p.first = 344;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={A,B} (Edge indel by removing edge E3={R,A2,B})
			p.first = 344;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,B,C}, E3={R,A,B}, E5={R,A}, E6={R,B}, E7={A,B,C}, E8={A,C} (Edge indel by removing edge E4={R,A1})
			p.first = 381;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e3, e1, e2, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E6={R,B}, E7={A,B,C}, E8={A,C} (Edge indel by removing edge E5={R,A2})
			p.first = 381;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E7={A1,A2,B}, E8={A1,A2} (Edge indel by removing edge E6={R,B})
			p.first = 370;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={R,B}, E8={A1,A2} (Edge indel by removing edge E7={A1,A2,B})
			p.first = 343;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={A1,A2,A3} (Edge indel by removing edge E8={A1,A2})
			p.first = 350;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2} (Edge indel by adding edge E9={A1,B})
			p.first = 454;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E4={R,B1}, E5={R,A}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2} (Edge indel by adding edge E9={A2,B})
			p.first = 454;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e4, e6, e7, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={R,B}, E7={A1,A2,B}, E8={A1,A2}, E9={R,A1,A2,B} (Edge indel by adding edge E9={R,A1,A2,B})
			p.first = 458;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 421: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={R,B}, E8={A1,A2}
			// E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={R,B}, E8={A1,A2} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 343;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={R,A}, E8={B1,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 348;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e7, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={R,C}, E8={A,B} (Edge indel by removing edge E3={R,A1,B})
			p.first = 345;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B} (Edge indel by removing edge E4={R,A2,B})
			p.first = 345;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B,C}, E4={R,A,B}, E6={R,A}, E7={R,B}, E8={A,C} (Edge indel by removing edge E5={R,A1})
			p.first = 382;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e4, e2, e3, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E7={R,B}, E8={A,C} (Edge indel by removing edge E6={R,A2})
			p.first = 382;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E8={A1,A2} (Edge indel by removing edge E7={R,B})
			p.first = 371;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3} (Edge indel by removing edge E8={A1,A2})
			p.first = 351;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={R,B1}, E7={R,B2}, E8={A,B1}, E9={A,B2} (Edge indel by adding edge E9={A1,B})
			p.first = 455;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E5={R,B1}, E6={R,A}, E7={R,B2}, E8={A,B1}, E9={A,B2} (Edge indel by adding edge E9={A2,B})
			p.first = 455;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e5, e7, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={R,B}, E8={A1,A2}, E9={A1,A2,B} (Edge indel by adding edge E9={A1,A2,B})
			p.first = 458;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 422: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={A,B}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={A,B} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 344;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,B}, E5={R,C}, E6={R,A}, E7={A,B,C}, E8={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 349;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e6, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,A1}, E5={R,A2}, E6={R,B}, E7={A1,A2,B}, E8={A1,A2} (Edge indel by removing edge E3={R,A,C})
			p.first = 346;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={A,B} (Edge indel by removing edge E4={R,A})
			p.first = 385;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E6={R,B}, E7={A,B,C}, E8={A,C} (Edge indel by removing edge E5={R,B})
			p.first = 383;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={A,B,C}, E8={A,B} (Edge indel by removing edge E6={R,C})
			p.first = 372;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E8={A,B} (Edge indel by removing edge E7={A,B,C})
			p.first = 345;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2} (Edge indel by removing edge E8={A,B})
			p.first = 352;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2} (Edge indel by adding edge E9={A,C})
			p.first = 456;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={A,B}, E9={B,C} (Edge indel by adding edge E9={B,C})
			p.first = 457;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A1}, E5={R,A2}, E6={R,B}, E7={A1,A2,B}, E8={A1,A2}, E9={R,A2,B} (Edge indel by adding edge E9={R,B,C})
			p.first = 458;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 423: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 347;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={R,B}, E7={A,B,C}, E8={B,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 349;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e6, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={B,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 349;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={B1,B2} (Edge indel by removing edge E4={R,A})
			p.first = 373;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E6={R,B}, E7={A,B,C}, E8={B,C} (Edge indel by removing edge E5={R,B1})
			p.first = 384;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={A,B,C}, E8={B,C} (Edge indel by removing edge E6={R,B2})
			p.first = 384;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E8={B1,B2} (Edge indel by removing edge E7={A,B1,B2})
			p.first = 348;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2} (Edge indel by removing edge E8={B1,B2})
			p.first = 352;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={B,C}, E9={A,B} (Edge indel by adding edge E9={A,B1})
			p.first = 457;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={R,B}, E7={A,B,C}, E8={B,C}, E9={A,B} (Edge indel by adding edge E9={A,B2})
			p.first = 457;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e5, e7, EDGES_ALPHABET[i], e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,A2}, E9={R,A1,A2} (Edge indel by adding edge E9={R,B1,B2})
			p.first = 458;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e5, e6, e4, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 424: // E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3}, E8={A1,A2,A3}
			// E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3}, E8={A1,A2,A3} (Edge indel by removing edge E1={R,A1,A2,A3})
			p.first = 350;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={R,A}, E8={A,B1,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 352;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e7, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,A}, E7={R,B2}, E8={A,B1,B2} (Edge indel by removing edge E3={R,A1,A3})
			p.first = 352;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,A}, E6={R,B1}, E7={R,B2}, E8={A,B1,B2} (Edge indel by removing edge E4={R,A2,A3})
			p.first = 352;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1,A2}, E6={R,A1}, E7={R,A2}, E8={A1,A2,B} (Edge indel by removing edge E5={R,A1})
			p.first = 386;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e4, e2, e3, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={R,A1}, E7={R,A2}, E8={A1,A2,B} (Edge indel by removing edge E6={R,A2})
			p.first = 386;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E8={A1,A2,B} (Edge indel by removing edge E7={R,A3})
			p.first = 386;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3} (Edge indel by removing edge E8={A1,A2,A3})
			p.first = 351;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={R,B}, E8={A1,A2,B}, E9={A1,A2} (Edge indel by adding edge E9={A1,A2})
			p.first = 458;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={R,A1}, E6={R,B}, E7={R,A2}, E8={A1,A2,B}, E9={A1,A2} (Edge indel by adding edge E9={A1,A3})
			p.first = 458;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, e6, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1,A2}, E5={R,B}, E6={R,A1}, E7={R,A2}, E8={A1,A2,B}, E9={A1,A2} (Edge indel by adding edge E9={A2,A3})
			p.first = 458;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e4, e2, e3, e6, e7, e5, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 425: // E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2}, E7={A1,B}, E8={A2,B}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 356;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, e7, e8, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={A,B}, E7={B,C}, E8={A,C} (Edge indel by removing edge E2={R,A1,B})
			p.first = 353;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E3={R,A2,B})
			p.first = 353;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E5={R,A}, E6={A,B1}, E7={B1,B2}, E8={A,B2} (Edge indel by removing edge E4={R,A1})
			p.first = 387;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by removing edge E5={R,A2})
			p.first = 387;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E6={A1,A2})
			p.first = 374;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={A,B}, E8={A,C} (Edge indel by removing edge E7={A1,B})
			p.first = 360;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e4, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C} (Edge indel by removing edge E8={A2,B})
			p.first = 360;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={A1,A2}, E7={A1,A3}, E8={A2,A3}, E9={R,A3} (Edge indel by adding edge E9={R,B})
			p.first = 450;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2}, E7={A1,B}, E8={A2,B}, E9={A1,A2,B} (Edge indel by adding edge E9={A1,A2,B})
			p.first = 459;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2}, E7={A1,B}, E8={A2,B}, E9={R,A1,A2,B} (Edge indel by adding edge E9={R,A1,A2,B})
			p.first = 460;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 426: // E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E1={R,A,B})
			p.first = 357;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e4, e5, e7, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E2={R,A,C})
			p.first = 354;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E3={R,A})
			p.first = 390 ;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by removing edge E4={R,B})
			p.first = 388;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 353;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E7={A,C}, E8={B,C} (Edge indel by removing edge E6={A,B})
			p.first = 375;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E8={B,C} (Edge indel by removing edge E7={A,C})
			p.first = 363;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E8={B,C})
			p.first = 361;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}, E9={R,B2} (Edge indel by adding edge E9={R,C})
			p.first = 451;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B}, E9={R,A2,B} (Edge indel by adding edge E9={R,B,C})
			p.first = 459;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C}, E9={R,A,B,C} (Edge indel by adding edge E9={R,A,B,C})
			p.first = 461;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 427: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C}, E8={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 353;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={A,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 358;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e7, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,A1}, E5={R,A2}, E6={A1,A2}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E3={R,A,C})
			p.first = 355;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E4={R,A})
			p.first = 391;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by removing edge E5={R,B})
			p.first = 389;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E6={A,B})
			p.first = 376;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E8={B,C} (Edge indel by removing edge E7={A,C})
			p.first = 364;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C} (Edge indel by removing edge E8={B,C})
			p.first = 362;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={A,B1}, E7={A,B2}, E8={B1,B2}, E9={R,B2} (Edge indel by adding edge E9={R,C})
			p.first = 452;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2}, E7={A1,B}, E8={A2,B}, E9={R,A2,B} (Edge indel by adding edge E9={R,B,C})
			p.first = 460;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B}, E7={A,C}, E8={B,C}, E9={A,B,C} (Edge indel by adding edge E9={A,B,C})
			p.first = 461;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 428: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B}
			// E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 354;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 359;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={A,C} (Edge indel by removing edge E3={R,A1})
			p.first = 392;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E4={R,A2})
			p.first = 392;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E6={A1,A2}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E5={A1,A2,B})
			p.first = 355;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E6={A1,A2})
			p.first = 377;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E8={B,C} (Edge indel by removing edge E7={A1,B})
			p.first = 365;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C} (Edge indel by removing edge E8={A2,B})
			p.first = 365;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B}, E9={R,B} (Edge indel by adding edge E9={R,B})
			p.first = 453;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C}, E9={R,A,C} (Edge indel by adding edge E9={R,A1,B})
			p.first = 461;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={A,C}, E9={R,A,C} (Edge indel by adding edge E9={R,A2,B})
			p.first = 461;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 429: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}
			// E2={R,A,B}, E3={R,C}, E4={R,A}, E5={A,B,C}, E6={B,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E1={R,A,B1})
			p.first = 357;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e4, e3, e5, e7, e8, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={A,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 357;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E3={R,B1})
			p.first = 390;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e5, e7, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E5={A,B,C}, E6={A,B}, E7={A,B}, E8={B,C} (Edge indel by removing edge E4={R,B2})
			p.first = 390;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by removing edge E5={A,B1,B2})
			p.first = 356;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,C}, E4={R,B}, E5={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E6={A,B1})
			p.first = 366;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e4, e2, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B}, E4={R,C}, E5={A,B,C}, E6={A,B}, E8={B,C} (Edge indel by removing edge E7={A,B2})
			p.first = 366;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E8={B1,B2})
			p.first = 378;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}, E9={R,A} (Edge indel by adding edge E9={R,A})
			p.first = 451;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A2,B}, E8={A1,A2}, E9={R,A1,A2} (Edge indel by adding edge E9={R,B1,B2})
			p.first = 459;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}, E9={R,A,B1,B2} (Edge indel by adding edge E9={R,A,B1,B2})
			p.first = 462;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 430: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 356;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={R,A}, E6={B,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 358;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e5, e4, e7, e8, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B}, E7={B,C}, E8={A,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 358;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E5={R,B}, E6={A,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E4={R,B1})
			p.first = 391;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e7, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E5={R,B2})
			p.first = 391;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,C}, E5={R,B}, E7={A,B}, E8={B,C} (Edge indel by removing edge E6={A,B1})
			p.first = 367;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e4, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B}, E8={B,C} (Edge indel by removing edge E7={A,B2})
			p.first = 367;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E8={B1,B2})
			p.first = 379;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}, E9={R,A} (Edge indel by adding edge E9={R,A})
			p.first = 452;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,B}, E7={A2,B}, E8={A1,A2}, E9={R,A1,A2} (Edge indel by adding edge E9={R,B1,B2})
			p.first = 460;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}, E9={A,B1,B2} (Edge indel by adding edge E9={A,B1,B2})
			p.first = 462;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 431: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C}
			// E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 357;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1}, E4={R,A2}, E5={A1,A2,B}, E6={A1,B}, E7={A1,A2}, E8={A2,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 359;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e7, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E3={R,A})
			p.first = 393;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E4={R,C})
			p.first = 392;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 358;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E7={A,C}, E8={B,C} (Edge indel by removing edge E6={A,B})
			p.first = 369;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E8={B,C} (Edge indel by removing edge E7={A,C})
			p.first = 380;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E8={B,C})
			p.first = 368;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,B}, E5={A1,A2,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B}, E9={R,A2} (Edge indel by adding edge E9={R,B})
			p.first = 453;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={A,B,C}, E6={A,C}, E7={A,B}, E8={B,C}, E9={R,A,C} (Edge indel by adding edge E9={R,A,C})
			p.first = 457;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e7, e6, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1}, E4={R,B2}, E5={A,B1,B2}, E6={A,B1}, E7={B1,B2}, E8={A,B2}, E9={R,A,B2} (Edge indel by adding edge E9={R,B,C})
			p.first = 462;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 432: // E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={B,C}, E8={A,B} (Edge indel by removing edge E1={R,A,B})
			p.first = 366;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,B,C}, E4={R,B}, E5={R,A}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E2={R,A,C})
			p.first = 363;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E3={R,B,C})
			p.first = 361;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E5={R,A}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E4={R,A})
			p.first = 398;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E5={R,B})
			p.first = 394;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E7={A,B}, E8={A,C} (Edge indel by removing edge E6={A,B,C})
			p.first = 360;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E8={A,C} (Edge indel by removing edge E7={A,B})
			p.first = 381;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,A2} (Edge indel by removing edge E8={A,C})
			p.first = 370;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={R,B1}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={R,B2} (Edge indel by adding edge E9={R,C})
			p.first = 454;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,A2}, E8={A1,B}, E9={A2,B} (Edge indel by adding edge E9={B,C})
			p.first = 459;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C}, E9={R,A,B,C} (Edge indel by adding edge E9={R,A,B,C})
			p.first = 463;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 433: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,B}, E8={A,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,B}, E8={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 360;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,C}, E7={B,C}, E8={A,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 367;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={A,B}, E8={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 364;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,A}, E6={R,B}, E7={A,B}, E8={A,C} (Edge indel by removing edge E4={R,B,C})
			p.first = 362;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E6={R,B}, E7={A,B}, E8={B,C} (Edge indel by removing edge E5={R,A})
			p.first = 399;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E6={R,B})
			p.first = 395;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E8={A,C} (Edge indel by removing edge E7={A,B})
			p.first = 382;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2} (Edge indel by removing edge E8={A,C})
			p.first = 371;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={R,B1}, E7={A,B1}, E8={A,B2}, E9={R,B2} (Edge indel by adding edge E9={R,C})
			p.first = 455;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2}, E8={A1,B}, E9={A2,B} (Edge indel by adding edge E9={B,C})
			p.first = 460;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,B}, E8={A,C}, E9={A,B,C} (Edge indel by adding edge E9={A,B,C})
			p.first = 463;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 434: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 361;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,C}, E8={A,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 368;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,B}, E5={R,A}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 365;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e5, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E4={R,A})
			p.first = 401;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E5={R,B})
			p.first = 396;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={A,B}, E8={A,C} (Edge indel by removing edge E6={A,B,C})
			p.first = 362;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E8={A,C} (Edge indel by removing edge E7={A,B})
			p.first = 383;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E8={A,C})
			p.first = 372;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={R,B2} (Edge indel by adding edge E9={R,C})
			p.first = 456;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C}, E9={B,C} (Edge indel by adding edge E9={B,C})
			p.first = 461;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C}, E9={R,B,C} (Edge indel by adding edge E9={R,B,C})
			p.first = 463;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 435: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 363;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,C}, E8={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 369;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 365;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E4={R,A})
			p.first = 397;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E5={R,B})
			p.first = 400;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={A,B}, E8={B,C} (Edge indel by removing edge E6={A,B,C})
			p.first = 364;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E8={B,C} (Edge indel by removing edge E7={A,B})
			p.first = 384;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E8={B,C})
			p.first = 372;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={B,C}, E9={R,C} (Edge indel by adding edge E9={R,C})
			p.first = 457;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={B,C}, E9={A,C} (Edge indel by adding edge E9={A,C})
			p.first = 461;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,B}, E5={R,A}, E6={A,B,C}, E7={A,B}, E8={A,C}, E9={R,A,C} (Edge indel by adding edge E9={R,B,C})
			p.first = 463;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e5, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 436: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 366;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={R,A}, E6={A,B,C}, E7={B,C}, E8={A,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 369;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e5, e4, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B},, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 368;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={B,C} (Edge indel by removing edge E4={R,B})
			p.first = 402;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E5={R,C})
			p.first = 397;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E6={A,B,C})
			p.first = 367;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E8={B1,B2} (Edge indel by removing edge E7={A,B})
			p.first = 373;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E8={B,C})
			p.first = 385;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C}, E9={R,A} (Edge indel by adding edge E9={R,A})
			p.first = 457;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={B1,B2}, E9={A,B2} (Edge indel by adding edge E9={A,C})
			p.first = 462;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={A,B}, E9={R,A,B} (Edge indel by adding edge E9={R,B,C})
			p.first = 463;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 437: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,A2}
			// E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,A2} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 370;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={B1,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 373;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={A,B,C}, E8={A,B} (Edge indel by removing edge E3={R,A1,B})
			p.first = 372;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,A}, E6={R,B}, E7={A,B,C}, E8={A,B} (Edge indel by removing edge E4={R,A2,B})
			p.first = 372;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E6={R,A}, E7={A,B,C}, E8={A,B} (Edge indel by removing edge E5={R,A1})
			p.first = 403;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E7={A,B,C}, E8={A,B} (Edge indel by removing edge E6={R,A2})
			p.first = 403;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E8={A1,A2} (Edge indel by removing edge E7={A1,A2,B})
			p.first = 371;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B} (Edge indel by removing edge E8={A1,A2})
			p.first = 386;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,A2}, E9={R,B} (Edge indel by adding edge E9={R,B})
			p.first = 458;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,B,C}, E8={A,B}, E9={A,C} (Edge indel by adding edge E9={A1,B})
			p.first = 463;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={A,B,C}, E8={A,B}, E9={A,C} (Edge indel by adding edge E9={A2,B})
			p.first = 463;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e5, e7, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 438: // E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,B}, E8={A2,B}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1} E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 378;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={A,B,C}, E7={B,C}, E8={A,C} (Edge indel by removing edge E2={R,A1,B})
			p.first = 375;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={B,C} (Edge indel by removing edge E3={R,A2,B})
			p.first = 375;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,B,C}, E3={R,A,B}, E5={R,A}, E6={A,B,C}, E7={B,C}, E8={A,B} (Edge indel by removing edge E4={R,A1})
			p.first = 398;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e3, e1, e2, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E5={R,A2})
			p.first = 398;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E6={A1,A2,B})
			p.first = 374;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={A,B,C}, E8={A,C} (Edge indel by removing edge E7={A1,B})
			p.first = 381;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e4, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C} (Edge indel by removing edge E8={A2,B})
			p.first = 381;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={R,A} (Edge indel by adding edge E9={R,B})
			p.first = 454;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e1, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,B}, E8={A2,B}, E9={A1,A2} (Edge indel by adding edge E9={A1,A2})
			p.first = 459;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,B}, E8={A2,B}, E9={R,A1,A2,B} (Edge indel by adding edge E9={R,A1,A2,B})
			p.first = 464;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 439: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,B}, E8={A2,B}
			// E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 374;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 379;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={B,C}, E8={A,C} (Edge indel by removing edge E3={R,A1,B})
			p.first = 376;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,A}, E6={R,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E4={R,A2,B})
			p.first = 376;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B,C}, E4={R,A,B}, E6={R,A}, E7={B,C}, E8={A,B} (Edge indel by removing edge E5={R,A1})
			p.first = 399;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e4, e2, e3, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E7={A,B}, E8={B,C} (Edge indel by removing edge E6={R,A2})
			p.first = 399;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E5={R,B}, E6={R,A}, E8={A,C} (Edge indel by removing edge E7={A1,B})
			p.first = 382;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e5, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,C} (Edge indel by removing edge E8={A2,B})
			p.first = 382;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2}, E9={R,A} (Edge indel by adding edge E9={R,B})
			p.first = 455;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e2, EDGES_ALPHABET[i], e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,B}, E8={A2,B}, E9={A1,A2} (Edge indel by adding edge E9={A1,A2})
			p.first = 460;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,B}, E8={A2,B}, E9={A1,A2,B} (Edge indel by adding edge E9={A1,A2,B})
			p.first = 464;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 440: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 375;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 380;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,B}, E8={A2,B} (Edge indel by removing edge E3={R,A,C})
			p.first = 377;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={B,C} (Edge indel by removing edge E4={R,A})
			p.first = 402;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E5={R,B})
			p.first = 400;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E6={A,B,C})
			p.first = 376;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E8={B,C} (Edge indel by removing edge E7={A,C})
			p.first = 384;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C} (Edge indel by removing edge E8={B,C})
			p.first = 383;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C}, E9={R,B} (Edge indel by adding edge E9={R,C})
			p.first = 457;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={B,C}, E9={A,B} (Edge indel by adding edge E9={A,B})
			p.first = 461;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,B}, E8={A2,B}, E9={R,A2,B} (Edge indel by adding edge E9={R,B,C})
			p.first = 464;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 441: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 378;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={R,A}, E6={A,B,C}, E7={B,C}, E8={A,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 380;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e5, e4, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 380;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={A,B} (Edge indel by removing edge E4={R,B1})
			p.first = 401;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E5={R,B2})
			p.first = 401;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E6={A,B1,B2})
			p.first = 379;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,C}, E5={R,B}, E6={A,B,C}, E8={A,B} (Edge indel by removing edge E7={A,B1})
			p.first = 385;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e4, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E8={A,B2})
			p.first = 385;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={R,A} (Edge indel by adding edge E9={R,A})
			p.first = 456;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={A,B} (Edge indel by adding edge E9={B1,B2})
			p.first = 462;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,B}, E8={A2,B}, E9={R,A1,A2} (Edge indel by adding edge E9={R,B,C})
			p.first = 464;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 442: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,B,C}, E8={A,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,B,C}, E8={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 381;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={A,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 385;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={A,B,C}, E8={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 384;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,A}, E6={R,B}, E7={A,B,C}, E8={A,C} (Edge indel by removing edge E4={R,B,C})
			p.first = 383;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E6={R,A}, E7={A,B1,B2}, E8={B1,B2} (Edge indel by removing edge E5={R,A})
			p.first = 404;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E7={A,B,C}, E8={A,B} (Edge indel by removing edge E6={R,B})
			p.first = 403;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E8={A,C} (Edge indel by removing edge E7={A,B,C})
			p.first = 382;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B} (Edge indel by removing edge E8={A,C})
			p.first = 386;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={R,A1}, E6={R,B}, E7={A1,A2,B}, E8={A1,A2}, E9={R,A2} (Edge indel by adding edge E9={R,C})
			p.first = 458;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,B,C}, E8={A,C}, E9={A,B} (Edge indel by adding edge E9={A,B})
			p.first = 463;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,B}, E9={A2,B} (Edge indel by adding edge E9={B,C})
			p.first = 464;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 443: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={B,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E1={R,A,B1})
			p.first = 390;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, e7, e8, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={A,C} (Edge indel by removing edge E2={R,A,B2})
			p.first = 390;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by removing edge E3={R,B1,B2})
			p.first = 388;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E5={A1,A2,A3}, E6={A1,A2}, E7={A1,A3}, E8={A2,A3} (Edge indel by removing edge E4={R,A})
			p.first = 405;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by removing edge E5={A,B1,B2})
			p.first = 387;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E6={A,B1})
			p.first = 398;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E8={B,C} (Edge indel by removing edge E7={A,B2})
			p.first = 398;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E8={B1,B2})
			p.first = 394;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={A1,A2,B}, E6={A1,A2}, E7={A1,B}, E8={A2,B}, E9={R,A2} (Edge indel by adding edge E9={R,B1})
			p.first = 459;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={R,A1}, E5={A1,A2,B}, E6={A1,B}, E7={A1,A2}, E8={A2,B}, E9={R,A2} (Edge indel by adding edge E9={R,B2})
			p.first = 459;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, EDGES_ALPHABET[i], e5, e7, e6, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}, E9={R,A,B1,B2} (Edge indel by adding edge E9={R,A,B1,B2})
			p.first = 465;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 444: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1}, E7={A,B2}, E8={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 387;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			
			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,A}, E6={B,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 391;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e7, e8, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,A}, E6={A,B}, E7={B,C}, E8={A,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 391;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,A}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by removing edge E4={R,B1,B2})
			p.first = 389;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E6={A1,A2}, E7={A1,A3}, E8={A2,A3} (Edge indel by removing edge E5={R,A})
			p.first = 406;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E7={A,B}, E8={B,C} (Edge indel by removing edge E6={A,B1})
			p.first = 399;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B}, E8={B,C} (Edge indel by removing edge E7={A,B2})
			p.first = 399;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E8={B1,B2})
			p.first = 395;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={A1,A2}, E7={A1,B}, E8={A2,B}, E9={R,A2} (Edge indel by adding edge E9={R,B1})
			p.first = 460;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={R,A1}, E6={A1,B}, E7={A1,A2}, E8={A2,B}, E9={R,A2} (Edge indel by adding edge E9={R,B2})
			p.first = 460;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], e7, e6, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1}, E7={A,B2}, E8={B1,B2}, E9={A,B1,B2} (Edge indel by adding edge E9={A,B1,B2})
			p.first = 465;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 445: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 388;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 392;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e7, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 392;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by removing edge E4={R,A})
			p.first = 407;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by removing edge E5={A,B1,B2})
			p.first = 389;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E6={A,B1})
			p.first = 400;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E8={B,C} (Edge indel by removing edge E7={A,B2})
			p.first = 400;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E8={B1,B2})
			p.first = 396;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C}, E9={R,B} (Edge indel by adding edge E9={R,B1})
			p.first = 461;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,C}, E7={A,B}, E8={B,C}, E9={R,B} (Edge indel by adding edge E9={R,B2})
			p.first = 461;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, EDGES_ALPHABET[i], e5, e7, e6, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}, E9={R,B1,B2} (Edge indel by adding edge E9={R,B1,B2})
			p.first = 465;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 446: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 390;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A,B}, E4={R,C}, E5={A1,A2,B}, E6={A1,B}, E7={A1,A2}, E8={A2,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 393;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e7, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={A,B,C}, E6={A,B}, E7={B,C}, E8={A,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 392;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by removing edge E4={R,B})
			p.first = 407;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={A,B}, E7={A,C}, E8={B,C} (Edge indel by removing edge E5={A,B,C})
			p.first = 391;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E7={A,C}, E8={B,C} (Edge indel by removing edge E6={A,B})
			p.first = 402;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E8={B,C} (Edge indel by removing edge E7={A,C})
			p.first = 397;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C} (Edge indel by removing edge E8={B,C})
			p.first = 401;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={A,B,C}, E6={A,B}, E7={A,C}, E8={B,C}, E9={R,A} (Edge indel by adding edge E9={R,A})
			p.first = 461;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}, E9={R,B2} (Edge indel by adding edge E9={R,B2})
			p.first = 462;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A}, E5={A,B1,B2}, E6={A,B1}, E7={B1,B2}, E8={A,B2}, E9={R,A,B2} (Edge indel by adding edge E9={R,B,C})
			p.first = 465;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 447: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 394;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,B}, E6={A,B,C}, E7={B,C}, E8={A,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 397;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 397;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,A}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E4={R,B1,B2})
			p.first = 396;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E5={R,A})
			p.first = 408;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E6={A,B1,B2})
			p.first = 395;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E8={A,B} (Edge indel by removing edge E7={A,B1})
			p.first = 403;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E8={A,B2})
			p.first = 403;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E7={A,B}, E8={A,C}, E9={R,B} (Edge indel by adding edge E9={R,B1})
			p.first = 463;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E7={A,C}, E8={A,B}, E9={R,B} (Edge indel by adding edge E9={R,B2})
			p.first = 463;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], e6, e8, e7, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2} (Edge indel by adding edge E9={B1,B2})
			p.first = 465;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 448: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E7={A,B}, E8={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 398;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,B}, E6={A,B,C}, E7={B,C}, E8={A,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 402;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,B,C}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 401;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,A}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E4={R,B,C})
			p.first = 400;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E5={R,A})
			p.first = 408;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E7={A,B}, E8={B,C} (Edge indel by removing edge E6={A,B,C})
			p.first = 399;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2}, E8={B1,B2} (Edge indel by removing edge E7={A,B})
			p.first = 404;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E7={A,B} (Edge indel by removing edge E8={B,C})
			p.first = 403;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C}, E9={R,A} (Edge indel by adding edge E9={R,B})
			p.first = 463;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, EDGES_ALPHABET[i], e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={R,A1}, E6={A1,A2,B}, E7={A1,B}, E8={A2,B}, E9={R,A2} (Edge indel by adding edge E9={R,C})
			p.first = 464;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2}, E7={A,B1}, E8={B1,B2}, E9={A,B2} (Edge indel by adding edge E9={A,C})
			p.first = 465;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 449: // E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={A1,A2,A3}, E6={A1,A2}, E7={A1,A3}, E8={A2,A3}
			// E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={A1,A2,A3}, E6={A1,A2}, E7={A1,A3}, E8={A2,A3} (Edge indel by removing edge E1={R,A1,A2,A3})
			p.first = 405;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={A,B1,B2}, E6={B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 407;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e7, e8, e6, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E4={R,A,B2}, E5={A,B1,B2}, E6={A,B1}, E7={B1,B2}, E8={A,B2} (Edge indel by removing edge E3={R,A1,A3})
			p.first = 407;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2} (Edge indel by removing edge E4={R,A2,A3})
			p.first = 407;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E6={A1,A2}, E7={A1,A3}, E8={A2,A3} (Edge indel by removing edge E5={A1,A2,A3})
			p.first = 406;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={A,B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E6={A1,A2})
			p.first = 408;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e2, e5, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E5={A,B1,B2}, E6={A,B1}, E8={A,B2} (Edge indel by removing edge E7={A1,A3})
			p.first = 408;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, e6, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2} (Edge indel by removing edge E8={A2,A3})
			p.first = 408;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={A,B1,B2}, E6={A,B1}, E7={A,B2}, E8={B1,B2}, E9={R,A} (Edge indel by adding edge E9={R,A1})
			p.first = 465;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, EDGES_ALPHABET[i], e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E5={A,B1,B2}, E6={A,B1}, E7={B1,B2}, E8={A,B2}, E9={R,A} (Edge indel by adding edge E9={R,A2})
			p.first = 465;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, EDGES_ALPHABET[i], e5, e6, e8, e7, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={A,B1,B2}, E6={B1,B2}, E7={A,B1}, E8={A,B2}, E9={R,A} (Edge indel by adding edge E9={R,A3})
			p.first = 465;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e2, EDGES_ALPHABET[i], e5, e7, e8, e6, ZERO_CHAR, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 450: // E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={A1,A2}, E8={A1,A3}, E9={A2,A3}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={R,A}, E7={B1,B2}, E8={A,B1}, E9={A,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 409;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e6, e4, e5, e8, e9, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,A}, E6={R,B2}, E7={A,B1}, E8={B1,B2}, E9={A,B2} (Edge indel by removing edge E2={R,A1,A3})
			p.first = 409;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2} (Edge indel by removing edge E3={R,A2,A3})
			p.first = 409;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,A1,A2}, E5={R,A1}, E6={R,A2}, E7={A1,B}, E8={A2,B}, E9={A1,A2} (Edge indel by removing edge E4={R,A1})
			p.first = 425;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e3, e1, e2, e5, e6, e9, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={R,A1}, E6={R,A2}, E7={A1,B}, E8={A1,A2}, E9={A2,B} (Edge indel by removing edge E5={R,A2})
			p.first = 425;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, e8, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E7={A1,A2}, E8={A1,B}, E9={A2,B} (Edge indel by removing edge E6={R,A3})
			p.first = 425;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={R,A}, E8={A,B1}, E9={A,B2} (Edge indel by removing edge E7={A1,A2})
			p.first = 413;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e1, e6, e4, e5, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E4={R,B1}, E5={R,A}, E6={R,B2}, E7={A,B1}, E9={A,B2} (Edge indel by removing edge E8={A1,A3})
			p.first = 413;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e4, e6, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E9={A2,A3})
			p.first = 413;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={A1,A2}, E8={A1,A3}, E9={A2,A3}, E10={A1,A2,A3} (Edge indel by adding edge E10={A1,A2,A3})
			p.first = 466;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={A1,A2}, E8={A1,A3}, E9={A2,A3}, E10={R,A1,A2,A3} (Edge indel by adding edge E10={R,A1,A2,A3})
			p.first = 467;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 451: // E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2}
			// E2={R,A1,A2}, E3={R,A1}, E4={R,B}, E5={R,A2}, E6={A1,A2,B}, E7={A1,B}, E8={A1,A2}, E9={A2,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 410;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e3, e5, e4, e6, e8, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E7={A1,A2}, E8={A1,B}, E9={A2,B} (Edge indel by removing edge E2={R,A,B2})
			p.first = 410;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2} (Edge indel by removing edge E3={R,A})
			p.first = 429;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={A,B}, E9={B,C} (Edge indel by removing edge E4={R,B1})
			p.first = 426;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e6, e8, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C}, E9={B,C} (Edge indel by removing edge E5={R,B2})
			p.first = 426;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2} (Edge indel by removing edge E6={A,B1,B2})
			p.first = 409;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,A}, E4={R,C}, E5={R,B}, E6={A,B,C}, E8={A,C}, E9={B,C} (Edge indel by removing edge E7={A,B1})
			p.first = 416;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e5, e4, e6, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E9={B,C} (Edge indel by removing edge E8={A,B2})
			p.first = 416;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E9={B1,B2})
			p.first = 414;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A1}, E4={R,A2}, E5={R,A3}, E6={A1,A2,A3}, E7={A1,A2}, E8={A1,A3}, E9={A2,A3}, E10={R,A2,A3} (Edge indel by adding edge E10={R,B1,B2})
			p.first = 466;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2}, E10={R,A,B1,B2} (Edge indel by adding edge E10={R,A1,A2,A3})
			p.first = 468;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 452: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 409;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1,A2}, E4={R,A1}, E5={R,B}, E6={R,A2}, E7={A1,B}, E8={A1,A2}, E9={A2,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 411;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e6, e5, e8, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,A1}, E5={R,A2}, E6={R,B}, E7={A1,A2}, E8={A1,B}, E9={A2,B} (Edge indel by removing edge E3={R,A,B2})
			p.first = 411;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2} (Edge indel by removing edge E4={R,A})
			p.first = 430;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E6={R,B}, E7={A,C}, E8={A,B}, E9={B,C} (Edge indel by removing edge E5={R,B1})
			p.first = 426;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e8, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={A,B}, E8={A,C}, E9={B,C} (Edge indel by removing edge E6={R,B2})
			p.first = 426;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={R,B}, E8={A,B}, E9={B,C} (Edge indel by removing edge E7={A,B1})
			p.first = 417;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e5, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B}, E9={B,C} (Edge indel by removing edge E8={A,B2})
			p.first = 417;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E9={B1,B2})
			p.first = 415;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={A1,A2}, E8={A1,A3}, E9={A2,A3}, E10={R,A2,A3} (Edge indel by adding edge E10={R,B1,B2})
			p.first = 467;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2}, E10={R,A,B1,B2} (Edge indel by adding edge E10={A,B1,B2})
			p.first = 468;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 453: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E7={A1,A2}, E8={A1,B}, E9={A2,B}
			// E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E7={A1,A2}, E8={A1,B}, E9={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 410;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E3={R,A1}, E4={R,A2}, E5={R,A3}, E6={A1,A2,A3}, E7={A1,A2}, E8={A1,A3}, E9={A2,A3} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 412;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C}, E9={A,C} (Edge indel by removing edge E3={R,A1})
			p.first = 431;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={A,C}, E9={B,C} (Edge indel by removing edge E4={R,A2})
			p.first = 431;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E6={A1,A2,B}, E7={A1,A2}, E8={A1,B}, E9={A2,B} (Edge indel by removing edge E5={R,B})
			p.first = 428;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E7={A1,A2}, E8={A1,B}, E9={A2,B} (Edge indel by removing edge E6={A1,A2,B})
			p.first = 411;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1}, E4={R,A2}, E5={R,B}, E6={A1,A2,B}, E8={A1,B}, E9={A2,B} (Edge indel by removing edge E7={A1,A2})
			p.first = 419;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E9={B,C} (Edge indel by removing edge E8={A1,B})
			p.first = 418;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C} (Edge indel by removing edge E9={A2,B})
			p.first = 418;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2}, E10={R,A,B2} (Edge indel by adding edge E10={R,A1,B})
			p.first = 468;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1}, E4={R,A}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={B1,B2}, E9={A,B2}, E10={R,A,B2} (Edge indel by adding edge E10={R,A2,B})
			p.first = 468;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e4, e3, e5, e6, e7, e9, e8, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 454: // E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B}, E5={R,C}, E6={R,A}, E7={A,B,C}, E8={B,C}, E9={A,B} (Edge indel by removing edge E1={R,A,B1})
			p.first = 416;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e6, e4, e5, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E3={R,A,B2}, E4={R,B}, E5={R,A}, E6={R,C}, E7={A,B,C}, E8={A,B}, E9={B,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 416;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2} (Edge indel by removing edge E3={R,B1,B2})
			p.first = 414;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,A1,A2}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,B}, E9={A2,B} (Edge indel by removing edge E4={R,A})
			p.first = 438;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e3, e1, e2, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A}, E6={R,B}, E7={A,B,C}, E8={A,C}, E9={A,B} (Edge indel by removing edge E5={R,B1})
			p.first = 432;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E7={A,B,C}, E8={A,B}, E9={A,C} (Edge indel by removing edge E6={R,B2})
			p.first = 432;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E8={A,B1}, E9={A,B2} (Edge indel by removing edge E7={A,B1,B2})
			p.first = 413;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={R,A1}, E5={R,B}, E6={R,A2}, E7={A1,A2,B}, E9={A1,A2} (Edge indel by removing edge E8={A,B1})
			p.first = 420;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, e5, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={R,B}, E7={A1,A2,B}, E8={A1,A2} (Edge indel by removing edge E9={A,B2})
			p.first = 420;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={A1,A2,A3}, E8={A1,A2}, E9={A1,A3}, E10={A2,A3} (Edge indel by adding edge E10={B1,B2})
			p.first = 466;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, e9, EDGES_ALPHABET[i], ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2}, E10={R,A,B1,B2} (Edge indel by adding edge E10={R,A,B1,B2})
			p.first = 469;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 455: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={R,B1}, E7={R,B2}, E8={A,B1}, E9={A,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={R,B1}, E7={R,B2}, E8={A,B1}, E9={A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 413;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,C}, E7={R,A}, E8={B,C}, E9={A,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 417;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e7, e5, e6, e9, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={R,C}, E8={A,B}, E9={B,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 417;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,A}, E6={R,B1}, E7={R,B2}, E8={A,B1}, E9={A,B2} (Edge indel by removing edge E4={R,B1,B2})
			p.first = 415;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1,A2}, E6={R,A1}, E7={R,A2}, E8={A1,B}, E9={A2,B} (Edge indel by removing edge E5={R,A})
			p.first = 439;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e4, e2, e3, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E7={R,B}, E8={A,C}, E9={A,B} (Edge indel by removing edge E6={R,B1})
			p.first = 433;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C} (Edge indel by removing edge E7={R,B2})
			p.first = 433;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={R,A1}, E6={R,B}, E7={R,A2}, E9={A1,A2} (Edge indel by removing edge E8={A,B1})
			p.first = 421;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, e6, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={R,B}, E8={A1,A2} (Edge indel by removing edge E9={A,B2})
			p.first = 421;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3}, E8={A1,A2}, E9={A1,A3}, E10={A2,A3} (Edge indel by adding edge E10={B1,B2})
			p.first = 467;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, e9, EDGES_ALPHABET[i], ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={R,B1}, E7={R,B2}, E8={A,B1}, E9={A,B2}, E10={A,B1,B2} (Edge indel by adding edge E10={A,B1,B2})
			p.first = 469;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 456: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 414;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,B}, E5={R,C}, E6={R,A}, E7={A,B,C}, E8={A,C}, E9={A,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 418;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e6, e4, e5, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,B}, E5={R,A}, E6={R,C}, E7={A,B,C}, E8={A,B}, E9={A,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 418;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e5, e4, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2} (Edge indel by removing edge E4={R,A})
			p.first = 441;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E6={R,B}, E7={A,B,C}, E8={A,C}, E9={A,B} (Edge indel by removing edge E5={R,B1})
			p.first = 434;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={A,B,C}, E8={A,B}, E9={A,C} (Edge indel by removing edge E6={R,B2})
			p.first = 434;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E8={A,B1}, E9={A,B2} (Edge indel by removing edge E7={A,B1,B2})
			p.first = 415;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={R,B}, E7={A,B,C}, E9={A,B} (Edge indel by removing edge E8={A,B1})
			p.first = 422;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e5, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={A,B} (Edge indel by removing edge E9={A,B2})
			p.first = 422;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2}, E10={A2,A3} (Edge indel by adding edge E10={B1,B2})
			p.first = 468;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, e9, EDGES_ALPHABET[i], ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2}, E10={R,B1,B2} (Edge indel by adding edge E10={R,B1,B2})
			p.first = 469;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 457: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={A,B}, E9={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={A,B}, E9={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 416;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1,A2}, E4={R,A1}, E5={R,B}, E6={R,A2}, E7={A1,A2,B}, E8={A1,B}, E9={A2,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 419;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e6, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={A,B}, E9={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 418;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={A,B}, E9={B,C} (Edge indel by removing edge E4={R,A})
			p.first = 436;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E6={R,B}, E7={A,B,C}, E8={A,C}, E9={B,C} (Edge indel by removing edge E5={R,B})
			p.first = 440;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={A,B,C}, E8={A,B}, E9={B,C} (Edge indel by removing edge E6={R,C})
			p.first = 435;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E8={A,B}, E9={B,C} (Edge indel by removing edge E7={A,B,C})
			p.first = 417;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E9={B1,B2} (Edge indel by removing edge E8={A,B})
			p.first = 423;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={A,B} (Edge indel by removing edge E9={B,C})
			p.first = 422;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={B1,B2}, E10={A,B2} (Edge indel by adding edge E10={A,C})
			p.first = 468;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, EDGES_ALPHABET[i], e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,B1}, E5={R,A}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2}, E10={R,A,B2} (Edge indel by adding edge E10={R,B,C})
			p.first = 469;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, EDGES_ALPHABET[i], e3, e5, e4, e6, e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 458: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={R,B}, E8={A1,A2,B}, E9={A1,A2}
			// E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={R,B}, E8={A1,A2,B}, E9={A1,A2} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 420;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={R,A}, E8={A,B1,B2}, E9={B1,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 423;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e7, e5, e6, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={R,C}, E8={A,B,C}, E9={A,B} (Edge indel by removing edge E3={R,A1,B})
			p.first = 422;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,A}, E6={R,B}, E7={R,C}, E8={A,B,C}, E9={A,B} (Edge indel by removing edge E4={R,A2,B})
			p.first = 422;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B,C}, E4={R,A,B}, E6={R,A}, E7={R,B}, E8={A,B,C}, E9={A,C} (Edge indel by removing edge E5={R,A1})
			p.first = 442;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e4, e2, e3, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E7={R,B}, E8={A,B,C}, E9={A,C} (Edge indel by removing edge E6={R,A2})
			p.first = 442;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E8={A1,A2,B}, E9={A1,A2} (Edge indel by removing edge E7={R,B})
			p.first = 437;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={R,B}, E9={A1,A2} (Edge indel by removing edge E8={A1,A2,B})
			p.first = 421;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3}, E8={A1,A2,A3} (Edge indel by removing edge E9={A1,A2})
			p.first = 424;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={R,B1}, E7={R,B2}, E8={A,B1,B2}, E9={A,B1}, E10={A,B2} (Edge indel by adding edge E10={A1,B})
			p.first = 469;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, e9, EDGES_ALPHABET[i], ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E5={R,B1}, E6={R,A}, E7={R,B2}, E8={A,B1,B2}, E9={A,B1}, E10={A,B2} (Edge indel by adding edge E10={A2,B})
			p.first = 469;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e5, e7, e8, e9, EDGES_ALPHABET[i], ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 459: // E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,A2}, E8={A1,B}, E9={A2,B}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={B1,B2}, E8={A,B1}, E9={A,B2} (Edge indel by removing edge E1={R,A1,A2})
			p.first = 429;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={A,B,C}, E7={A,B}, E8={B,C}, E9={A,C} (Edge indel by removing edge E2={R,A1,B})
			p.first = 426;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e5, e4, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C}, E9={B,C} (Edge indel by removing edge E3={R,A2,B})
			p.first = 426;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E5={R,A}, E6={A,B1,B2}, E7={A,B1}, E8={B1,B2}, E9={A,B2} (Edge indel by removing edge E4={R,A1})
			p.first = 443;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2} (Edge indel by removing edge E5={R,A2})
			p.first = 443;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E7={A1,A2}, E8={A1,B}, E9={A2,B} (Edge indel by removing edge E6={A1,A2,B})
			p.first = 425;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E8={A1,B}, E9={A2,B} (Edge indel by removing edge E7={A1,A2})
			p.first = 438;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,B,C}, E3={R,A,C}, E4={R,B}, E5={R,A}, E6={A,B,C}, E7={A,B}, E9={A,C} (Edge indel by removing edge E8={A1,B})
			p.first = 432;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e4, e6, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B}, E2={R,A,C}, E3={R,B,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E9={A2,B})
			p.first = 432;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={A1,A2,A3}, E7={A1,A2}, E8={A1,A3}, E9={A2,A3}, E10={R,A3} (Edge indel by adding edge E10={R,B})
			p.first = 466;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,A2}, E8={A1,B}, E9={A2,B}, E10={R,A1,A2,B} (Edge indel by adding edge E10={R,A1,A2,B})
			p.first = 470;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 460: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2}, E8={A1,B}, E9={A2,B}
			// E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2}, E8={A1,B}, E9={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 425;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={B1,B2}, E8={A,B1}, E9={A,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 430;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={A,B}, E8={B,C}, E9={A,C} (Edge indel by removing edge E3={R,A1,B})
			p.first = 427;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e6, e5, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,A}, E6={R,B}, E7={A,B}, E8={A,C}, E9={B,C} (Edge indel by removing edge E4={R,A2,B})
			p.first = 427;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E6={R,A}, E7={A,B1}, E8={B1,B2}, E9={A,B2} (Edge indel by removing edge E5={R,A1})
			p.first = 444;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E7={A,B1}, E8={A,B2}, E9={B1,B2} (Edge indel by removing edge E6={R,A2})
			p.first = 444;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E8={A1,B}, E9={A2,B} (Edge indel by removing edge E7={A1,A2})
			p.first = 439;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={A,B}, E9={A,C} (Edge indel by removing edge E8={A1,B})
			p.first = 433;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e5, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,B}, E8={A,C} (Edge indel by removing edge E9={A2,B})
			p.first = 433;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={A1,A2}, E8={A1,A3}, E9={A2,A3}, E10={R,A3} (Edge indel by adding edge E10={R,B})
			p.first = 467;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2}, E8={A1,B}, E9={A2,B}, E10={A1,A2,B} (Edge indel by adding edge E10={A1,A2,B})
			p.first = 470;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 461: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C}, E9={B,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C}, E9={B,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 426;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,C}, E8={A,B}, E9={B,C} (Edge indel by removing edge E2={R,A,B})
			p.first = 431;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e5, e6, e8, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,A2}, E8={A1,B}, E9={A2,B} (Edge indel by removing edge E3={R,A,C})
			p.first = 428;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C}, E9={B,C} (Edge indel by removing edge E4={R,A})
			p.first = 446;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2} (Edge indel by removing edge E5={R,B})
			p.first = 445;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={A,B}, E8={A,C}, E9={B,C} (Edge indel by removing edge E6={A,B,C})
			p.first = 427;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E8={A,C}, E9={B,C} (Edge indel by removing edge E7={A,B})
			p.first = 440;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E9={B,C} (Edge indel by removing edge E8={A,C})
			p.first = 435;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C} (Edge indel by removing edge E9={B,C})
			p.first = 434;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2}, E10={R,B2} (Edge indel by adding edge E10={R,C})
			p.first = 468;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,A2}, E8={A1,B}, E9={A2,B}, E10={R,A2,B} (Edge indel by adding edge E10={R,B,C})
			p.first = 470;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 462: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 429;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,C}, E5={R,A}, E6={A,B,C}, E7={B,C}, E8={A,B}, E9={A,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 431;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e5, e4, e6, e8, e9, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A}, E5={R,C}, E6={A,B,C}, E7={A,B}, E8={B,C}, E9={A,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 431;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E5={R,B}, E6={A,B,C}, E7={A,C}, E8={A,B}, E9={B,C} (Edge indel by removing edge E4={R,B1})
			p.first = 446;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e6, e8, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E6={A,B,C}, E7={A,B}, E8={A,C}, E9={B,C} (Edge indel by removing edge E5={R,B2})
			p.first = 446;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2} (Edge indel by removing edge E6={A,B1,B2})
			p.first = 430;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,C}, E5={R,B}, E6={A,B,C}, E8={A,B}, E9={B,C} (Edge indel by removing edge E7={A,B1})
			p.first = 436;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e5, e4, e6, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B}, E5={R,C}, E6={A,B,C}, E7={A,B}, E9={B,C} (Edge indel by removing edge E8={A,B2})
			p.first = 436;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E9={B1,B2})
			p.first = 441;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2}, E10={R,A} (Edge indel by adding edge E10={R,A})
			p.first = 468;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E6={A1,A2,B}, E7={A1,B}, E8={A2,B}, E9={A1,A2}, E10={R,A1,A2} (Edge indel by adding edge E10={R,B1,B2})
			p.first = 470;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, EDGES_ALPHABET[i], e2, e3, e4, e5, e6, e9, e7, e8, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 463: // E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,B,C}, E8={A,B}, E9={A,C}
			// E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,B,C}, E8={A,B}, E9={A,C} (Edge indel by removing edge E1={R,A,B,C})
			p.first = 432;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={B,C}, E9={A,B} (Edge indel by removing edge E2={R,A,B})
			p.first = 436;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={A,B,C}, E8={A,B}, E9={B,C} (Edge indel by removing edge E3={R,A,C})
			p.first = 435;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,A}, E6={R,B}, E7={A,B,C}, E8={A,B}, E9={A,C} (Edge indel by removing edge E4={R,B,C})
			p.first = 434;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E6={R,A}, E7={A,B,C}, E8={A,B}, E9={B,C} (Edge indel by removing edge E5={R,A})
			p.first = 448;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2} (Edge indel by removing edge E6={R,B})
			p.first = 447;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B}, E9={A,C} (Edge indel by removing edge E7={A,B,C})
			p.first = 433;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,B,C}, E9={A,C} (Edge indel by removing edge E8={A,B})
			p.first = 442;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,A2} (Edge indel by removing edge E9={A,C})
			p.first = 437;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={R,B1}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2}, E10={R,B2} (Edge indel by adding edge E10={R,C})
			p.first = 469;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,A2}, E9={A1,B}, E10={A2,B} (Edge indel by adding edge E10={B,C})
			p.first = 470;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, e9, EDGES_ALPHABET[i], ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 464: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,B}, E9={A2,B}
			// E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,B}, E9={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 438;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 441;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={A,B,C}, E8={B,C}, E9={A,C} (Edge indel by removing edge E3={R,A1,B})
			p.first = 440;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,A}, E6={R,B}, E7={A,B,C}, E8={A,C}, E9={B,C} (Edge indel by removing edge E4={R,A2,B})
			p.first = 440;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,B,C}, E4={R,A,B}, E6={R,A}, E7={A,B,C}, E8={B,C}, E9={A,B} (Edge indel by removing edge E5={R,A1})
			p.first = 448;
			p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e4, e2, e3, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E7={A,B,C}, E8={A,B}, E9={B,C} (Edge indel by removing edge E6={R,A2})
			p.first = 448;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E8={A1,B}, E9={A2,B} (Edge indel by removing edge E7={A1,A2,B})
			p.first = 439;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={A,B,C}, E9={A,C} (Edge indel by removing edge E8={A1,B})
			p.first = 442;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e5, e7, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,B,C}, E8={A,C} (Edge indel by removing edge E9={A2,B})
			p.first = 442;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2}, E10={R,A} (Edge indel by adding edge E10={R,B})
			p.first = 469;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e2, EDGES_ALPHABET[i], e5, e6, e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,B}, E9={A2,B}, E10={A1,A2} (Edge indel by adding edge E10={A1,A2})
			p.first = 470;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 465: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 443;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,B}, E6={A,B,C}, E7={B,C}, E8={A,B}, E9={A,C} (Edge indel by removing edge E2={R,A,B1})
			p.first = 446;
			p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, e8, e9, e7, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={A,B,C}, E7={A,B}, E8={B,C}, E9={A,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 446;
			p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e5, e6, e7, e9, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,A}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2}, E9={B1,B2} (Edge indel by removing edge E4={R,B1,B2})
			p.first = 445;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E6={A1,A2,A3}, E7={A1,A2}, E8={A1,A3}, E9={A2,A3} (Edge indel by removing edge E5={R,A})
			p.first = 449;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E7={A,B1}, E8={A,B2}, E9={B1,B2} (Edge indel by removing edge E6={A,B1,B2})
			p.first = 444;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E8={A,B}, E9={B,C} (Edge indel by removing edge E7={A,B1})
			p.first = 448;
			p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e6, e8, e9, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={A,B,C}, E7={A,B}, E9={B,C} (Edge indel by removing edge E8={A,B2})
			p.first = 448;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={A,B1,B2}, E7={A,B1}, E8={A,B2} (Edge indel by removing edge E9={B1,B2})
			p.first = 447;
			p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, ZERO_CHAR, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={A1,A2,B}, E7={A1,A2}, E8={A1,B}, E9={A2,B}, E10={R,A2} (Edge indel by adding edge E10={R,B1})
			p.first = 470;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, EDGES_ALPHABET[i], e6, e7, e8, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={R,A1}, E6={A1,A2,B}, E7={A1,B}, E8={A1,A2}, E9={A2,B}, E10={R,A2} (Edge indel by adding edge E10={R,B2})
			p.first = 470;
			for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
				p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, EDGES_ALPHABET[i], e6, e8, e7, e9, ZERO_CHAR);
				insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
				update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
			break;

		case 466: // E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={A1,A2,A3}, E8={A1,A2}, E9={A1,A3}, E10={A2,A3}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={R,A}, E7={A,B1,B2}, E8={B1,B2}, E9={A,B1}, E10={A,B2} (Edge indel by removing edge E1={R,A1,A2})
            p.first = 451;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e6, e4, e5, e7, e9, e10, e8, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,A}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={B1,B2}, E10={A,B2} (Edge indel by removing edge E2={R,A1,A3})
            p.first = 451;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e5, e4, e6, e7, e8, e10, e9, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2}, E10={B1,B2} (Edge indel by removing edge E3={R,A2,A3})
            p.first = 451;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,B}, E2={R,A2,B}, E3={R,A1,A2}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,B}, E9={A2,B}, E10={A1,A2} (Edge indel by removing edge E4={R,A1})
            p.first = 459;
            p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e3, e1, e2, e5, e6, e7, e10, e8, e9, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,B}, E2={R,A1,A2}, E3={R,A2,B}, E4={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,B}, E9={A1,A2}, E10={A2,B} (Edge indel by removing edge E5={R,A2})
            p.first = 459;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e2, e1, e3, e4, e6, e7, e9, e8, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1}, E5={R,A2}, E7={A1,A2,B}, E8={A1,A2}, E9={A1,B}, E10={A2,B} (Edge indel by removing edge E6={R,A3})
            p.first = 459;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E8={A1,A2}, E9={A1,A3}, E10={A2,A3} (Edge indel by removing edge E7={A1,A2,A3})
			p.first = 450;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1}, E5={R,B2}, E6={R,A}, E7={A,B1,B2}, E9={A,B1}, E10={A,B2} (Edge indel by removing edge E8={A1,A2})
            p.first = 454;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e2, e3, e1, e6, e4, e5, e7, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,B1,B2}, E3={R,A,B2}, E4={R,B1}, E5={R,A}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E10={A,B2} (Edge indel by removing edge E9={A1,A3})
            p.first = 454;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e3, e2, e5, e4, e6, e7, e8, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1}, E2={R,A,B2}, E3={R,B1,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2} (Edge indel by removing edge E10={A2,A3})
            p.first = 454;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2}, E2={R,A1,A3}, E3={R,A2,A3}, E4={R,A1}, E5={R,A2}, E6={R,A3}, E7={A1,A2,A3}, E8={A1,A2}, E9={A1,A3}, E10={A2,A3}, E11={R,A1,A2,A3} (Edge indel by adding edge E11={R,A1,A2,A3})
            p.first = 471;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, EDGES_ALPHABET[i], e1, e2, e3, e4, e5, e6, e7, e8, e9, e10);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

		case 467: // E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3}, E8={A1,A2}, E9={A1,A3}, E10={A2,A3}
			// E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3}, E8={A1,A2}, E9={A1,A3}, E10={A2,A3} (Edge indel by removing edge E1={R,A1,A2,A3})
            p.first = 450;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);			

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={R,A}, E8={B1,B2}, E9={A,B1}, E10={A,B2} (Edge indel by removing edge E2={R,A1,A2})
            p.first = 452;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e7, e5, e6, e9, e10, e8, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,A}, E7={R,B1}, E8={A,B1}, E9={B1,B2}, E10={A,B2} (Edge indel by removing edge E3={R,A1,A3})
            p.first = 452;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, e7, e8, e10, e9, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,A}, E6={R,B1}, E7={R,B2}, E8={A,B1}, E9={A,B2}, E10={B1,B2} (Edge indel by removing edge E4={R,A2,A3})
            p.first = 452;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1,A2}, E6={R,A1}, E7={R,A2}, E8={A1,B}, E9={A2,B}, E10={A1,A2} (Edge indel by removing edge E5={R,A1})
            p.first = 460;
            p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e4, e2, e3, e6, e7, e10, e8, e9, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={R,A1}, E7={R,A2}, E8={A1,B}, E9={A1,A2}, E10={A2,B} (Edge indel by removing edge E6={R,A2})
            p.first = 460;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, e9, e8, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E8={A1,A2}, E9={A1,B}, E10={A2,B} (Edge indel by removing edge E7={R,A3})
            p.first = 460;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={R,A}, E9={A,B1}, E10={A,B2} (Edge indel by removing edge E8={A1,A2})
            p.first = 455;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e2, e7, e5, e6, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E5={R,B1}, E6={R,A}, E7={R,B2}, E8={A,B1}, E10={A,B2} (Edge indel by removing edge E9={A1,A3})
            p.first = 455;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e5, e7, e8, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={R,B1}, E7={R,B2}, E8={A,B1}, E9={A,B2} (Edge indel by removing edge E10={A2,A3})
            p.first = 455;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3}, E8={A1,A2}, E9={A1,A3}, E10={A2,A3}, E11={A1,A2,A3} (Edge indel by adding edge E11={A1,A2,A3})
            p.first = 471;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, EDGES_ALPHABET[i], e8, e9, e10);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

		case 468: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2}, E10={B1,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2}, E10={B1,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 451;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E3={R,A1,A2}, E4={R,A1}, E5={R,B}, E6={R,A2}, E7={A1,A2,B}, E8={A1,B}, E9={A1,A2}, E10={A2,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 453;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e4, e6, e5, e7, e9, e8, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E4={R,A1}, E5={R,A2}, E6={R,B}, E7={A1,A2,B}, E8={A1,A2}, E9={A1,B}, E10={A2,B} (Edge indel by removing edge E3={R,A,B2})
			p.first = 453;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e4, e5, e6, e7, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2}, E10={B1,B2} (Edge indel by removing edge E4={R,A})
			p.first = 462;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E6={R,B}, E7={A,B,C}, E8={A,C}, E9={A,B}, E10={B,C} (Edge indel by removing edge E5={R,B1})
			p.first = 461;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e7, e9, e8, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E7={A,B,C}, E8={A,B}, E9={A,C}, E10={B,C} (Edge indel by removing edge E6={R,B2})
			p.first = 461;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E8={A,B1}, E9={A,B2}, E10={B1,B2} (Edge indel by removing edge E7={A,B1,B2})
			p.first = 452;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,A}, E5={R,C}, E6={R,B}, E7={A,B,C}, E9={A,B}, E10={B,C} (Edge indel by removing edge E8={A,B1})
			p.first = 457;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e6, e5, e7, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,A}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={A,B}, E10={B,C} (Edge indel by removing edge E9={A,B2})
			p.first = 457;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,A}, E5={R,B1}, E6={R,B2}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2} (Edge indel by removing edge E10={B1,B2})
			p.first = 456;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={A1,A2,A3}, E8={A1,A2}, E9={A1,A3}, E10={A2,A3}, E11={R,A2,A3} (Edge indel by adding edge E11={R,B1,B2})
            p.first = 471;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, EDGES_ALPHABET[i], e4, e5, e6, e7, e8, e9, e10);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

		case 469: // E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={R,B1}, E7={R,B2}, E8={A,B1,B2}, E9={A,B1}, E10={A,B2}
			// E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={R,B1}, E7={R,B2}, E8={A,B1,B2}, E9={A,B1}, E10={A,B2} (Edge indel by removing edge E1={R,A,B1,B2})
			p.first = 454;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E3={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,C}, E7={R,A}, E8={A,B,C}, E9={B,C}, E10={A,B} (Edge indel by removing edge E2={R,A,B1})
			p.first = 457;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e7, e5, e6, e8, e10, e9, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={R,C}, E8={A,B,C}, E9={A,B}, E10={B,C} (Edge indel by removing edge E3={R,A,B2})
			p.first = 457;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, e7, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,A}, E6={R,B1}, E7={R,B2}, E8={A,B1,B2}, E9={A,B1}, E10={A,B2} (Edge indel by removing edge E4={R,B1,B2})
			p.first = 456;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1,A2}, E6={R,A1}, E7={R,A2}, E8={A1,A2,B}, E9={A1,B}, E10={A2,B} (Edge indel by removing edge E5={R,A})
			p.first = 464;
            p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e4, e2, e3, e6, e7, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,C}, E3={R,A,B}, E4={R,B,C}, E5={R,A}, E7={R,B}, E8={A,B,C}, E9={A,C}, E10={A,B} (Edge indel by removing edge E6={R,B1})
			p.first = 463;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, e8, e10, e9, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E8={A,B,C}, E9={A,B}, E10={A,C} (Edge indel by removing edge E7={R,B2})
			p.first = 463;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={R,B1}, E7={R,B2}, E9={A,B1}, E10={A,B2} (Edge indel by removing edge E8={A,B1,B2})
			p.first = 455;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={R,A1}, E6={R,B}, E7={R,A2}, E8={A1,A2,B}, E10={A1,A2} (Edge indel by removing edge E9={A,B1})
			p.first = 458;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, e6, e8, e9, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={R,B}, E8={A1,A2,B}, E9={A1,A2} (Edge indel by removing edge E10={A,B2})
			p.first = 458;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			
			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3}, E8={A1,A2,A3}, E9={A1,A2}, E10={A1,A3}, E11={A2,A3} (Edge indel by adding edge E11={B1,B2})
            p.first = 471;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, EDGES_ALPHABET[i]);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 470: // E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,A2}, E9={A1,B}, E10={A2,B}
			// E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E8={A1,A2}, E9={A1,B}, E10={A2,B} (Edge indel by removing edge E1={R,A1,A2,B})
			p.first = 459;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,B}, E6={R,C}, E7={A,B,C}, E8={B,C}, E9={A,B}, E10={A,C} (Edge indel by removing edge E2={R,A1,A2})
			p.first = 462;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e5, e6, e7, e9, e10, e8, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={A,B,C}, E8={A,B}, E9={B,C}, E10={A,C} (Edge indel by removing edge E3={R,A1,B})
			p.first = 461;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e3, e6, e5, e7, e8, e10, e9, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E5={R,A}, E6={R,B}, E7={A,B,C}, E8={A,B}, E9={A,C}, E10={B,C} (Edge indel by removing edge E4={R,A2,B})
			p.first = 461;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E6={R,A}, E7={A,B1,B2}, E8={A,B1}, E9={B1,B2}, E10={A,B2} (Edge indel by removing edge E5={R,A1})
			p.first = 465;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e7, e8, e10, e9, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E7={A,B1,B2}, E8={A,B1}, E9={A,B2}, E10={B1,B2} (Edge indel by removing edge E6={R,A2})
			p.first = 465;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e7, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E8={A1,A2}, E9={A1,B}, E10={A2,B} (Edge indel by removing edge E7={A1,A2,B})
			p.first = 460;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E7={A1,A2,B}, E9={A1,B}, E10={A2,B} (Edge indel by removing edge E8={A1,A2})
			p.first = 464;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e9, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,B,C}, E4={R,A,C}, E5={R,B}, E6={R,A}, E7={A,B,C}, E8={A,B}, E10={A,C} (Edge indel by removing edge E9={A1,B})
			p.first = 463;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e5, e7, e8, e10, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B,C}, E2={R,A,B}, E3={R,A,C}, E4={R,B,C}, E5={R,A}, E6={R,B}, E7={A,B,C}, E8={A,B}, E9={A,C} (Edge indel by removing edge E10={A2,B})
			p.first = 463;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, e9, ZERO_CHAR, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={A1,A2,A3}, E8={A1,A2}, E9={A1,A3}, E10={A2,A3}, E11={R,A3} (Edge indel by adding edge E11={R,B})
            p.first = 471;
            for (unsigned i=0; i<EDGES_ALPHABET.length(); i++)  {
                p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, EDGES_ALPHABET[i], e7, e8, e9, e10);
                insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
                update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
			}
            break;

        case 471: // E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3}, E8={A1,A2,A3}, E9={A1,A2}, E10={A1,A3}, E11={A2,A3}
			// E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3}, E8={A1,A2,A3}, E9={A1,A2}, E10={A1,A3}, E11={A2,A3} (Edge indel by removing edge E1={R,A1,A2})
            p.first = 466;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={R,A}, E8={A,B1,B2}, E9={B1,B2}, E10={A,B1}, E11={A,B2} (Edge indel by removing edge E2={R,A1,A2})
            p.first = 468;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e7, e5, e6, e8, e10, e11, e9, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,A}, E7={R,B2}, E8={A,B1,B2}, E9={A,B1}, E10={B1,B2}, E11={A,B2} (Edge indel by removing edge E3={R,A1,A3})
            p.first = 468;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e6, e5, e7, e8, e9, e11, e10, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E5={R,A}, E6={R,B1}, E7={R,B2}, E8={A,B1,B2}, E9={A,B1}, E10={A,B2}, E11={B1,B2} (Edge indel by removing edge E4={R,A2,A3})
            p.first = 468;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e5, e6, e7, e8, e9, e10, e11, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A2,B}, E4={R,A1,A2}, E6={R,A1}, E7={R,A2}, E8={A1,A2,B}, E9={A1,B}, E10={A2,B}, E11={A1,A2} (Edge indel by removing edge E5={R,A1})
			p.first = 470;
            p.second = create_permutations_subset(mismatches, root, b, c, a, p.first, e1, e4, e2, e3, e6, e7, e8, e11, e9, e10, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,B}, E3={R,A1,A2}, E4={R,A2,B}, E5={R,A1}, E7={R,A2}, E8={A1,A2,B}, E9={A1,B}, E10={A1,A2}, E11={A2,B} (Edge indel by removing edge E6={R,A2})
			p.first = 470;
            p.second = create_permutations_subset(mismatches, root, a, c, b, p.first, e1, e3, e2, e4, e5, e7, e8, e10, e9, e11, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,B}, E2={R,A1,A2}, E3={R,A1,B}, E4={R,A2,B}, E5={R,A1}, E6={R,A2}, E8={A1,A2,B}, E9={A1,A2}, E10={A1,B}, E11={A2,B} (Edge indel by removing edge E7={R,A3})
			p.first = 470;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e8, e9, e10, e11, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A1,A2,A3}, E2={R,A1,A2}, E3={R,A1,A3}, E4={R,A2,A3}, E5={R,A1}, E6={R,A2}, E7={R,A3}, E9={A1,A2}, E10={A1,A3}, E11={A2,A3} (Edge indel by removing edge E8={A1,A2,A3})
            p.first = 467;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e9, e10, e11, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,B1,B2}, E3={R,A,B1}, E4={R,A,B2}, E5={R,B1}, E6={R,B2}, E7={R,A}, E8={A,B1,B2}, E10={A,B1}, E11={A,B2} (Edge indel by removing edge E9={A1,A2})
            p.first = 469;
            p.second = create_permutations_subset(mismatches, root, c, a, b, p.first, e1, e3, e4, e2, e7, e5, e6, e8, e10, e11, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,B1,B2}, E4={R,A,B2}, E5={R,B1}, E6={R,A}, E7={R,B2}, E8={A,B1,B2}, E9={A,B1}, E11={A,B2} (Edge indel by removing edge E10={A1,A3})
            p.first = 469;
            p.second = create_permutations_subset(mismatches, root, b, a, c, p.first, e1, e2, e4, e3, e6, e5, e7, e8, e9, e11, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);

			// E1={R,A,B1,B2}, E2={R,A,B1}, E3={R,A,B2}, E4={R,B1,B2}, E5={R,A}, E6={R,B1}, E7={R,B2}, E8={A,B1,B2}, E9={A,B1}, E10={A,B2} (Edge indel by removing edge E11={A2,A3})
            p.first = 469;
            p.second = create_permutations_subset(mismatches, root, a, b, c, p.first, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, ZERO_CHAR);
			insert_edge_mismatch_hypergraphlet(EM_set[vindex], p, vindex);
			update_edge_mismatch_count(EM_set, p.second, p.first, (EDGE_MISMATCHES_ALLOWED-1), (vindex+1), EDGES_ALPHABET);
            break;
    }
}
